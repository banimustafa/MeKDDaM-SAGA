package gui.form.task;
import global.Global;
import gui.form.outcome.DataAcclimatisationForm;
import gui.form.outcome.DataExplorationForm;
import gui.form.outcome.DataPreProcessingForm;
import gui.form.outcome.DeploymentForm;
import gui.form.outcome.KnowledgeEvaluationForm;
import gui.form.outcome.KnowledgePresentationForm;
import gui.form.outcome.ModelBuildingForm;
import gui.form.outcome.ModelEvaluationForm;
import gui.form.outcome.ProcessEvaluationForm;
import gui.form.outcome.ObjectivesDefinitionForm;
import gui.form.outcome.TechniqueSelectionForm;
import gui.form.supplement.HumanInteractionForm;
import gui.form.supplement.ManagementForm;
import java.awt.Color;

import javax.swing.DefaultComboBoxModel;
import process_model.basic.util.ArrayList;
import process_model.general.Outcome;
import process_model.issue.justification.Justification;
import process_model.issue.problem.Problem;
import process_model.issue.problem.Reason;
import process_model.issue.problem.Solution;
import process_model.issue.tracibility.ExternalSource;
import process_model.issue.tracibility.HumanSource;
import process_model.issue.tracibility.InternalSource;
import process_model.issue.tracibility.Source;
import process_model.phase.delivery.Delivery;
import process_model.phase.stage.performing.PerformedActivity;
import process_model.phase.stage.planning.Plan;
import process_model.phase.stage.planning.PlanItem;
import process_model.phase.stage.validating.Validation;
import process_model.phase.stage.validating.ValidationType;
import process_model.phase.stage.validating.Validating;
import process_model.supplement.human_interaction.Analyst;
import process_model.supplement.management.resource.Resource;

/**
 *
 * @author amb04
 */
public class ValidatingForm extends javax.swing.JFrame {
private Plan plan=new Plan(); // planning consists of plan
private PlanItem customisedPlanItem=null;
private PlanItem customisedSubPlanItem=null;
private Validation activityValidation=null;
private Validation performerValidation=null;
private Validation resourcesValidation=null;
private Validation justificationValidation=null;;
private Validation customisedValidation=null;;
private Validation problemsValidation=null;;
private Validation outcomeValidation=null;;

private Resource resource;

private Problem problem=null;
//
private Solution solution=null;
//
private Reason reason=null;

private String cause=null;
private Source solutionEvidence=null;
private Source justificationEvidence=null;
private Delivery delivery=null;
private Outcome outcome=null;
//
private Justification justification=null;
private Analyst analyst=null;
private PerformedActivity performedActivity=null;


//AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
    private String analystRole[]={"","Data Miner", "Biologist", "Domain Expert",
    "Statistician", "Lab Technician", "Computer Scientist", "Other"};

    private String analystLevel[]={"","Beginner", "Normal", "Professional"};

    private String resourceTypeArray[]={"","Hardware","Software","Human Expertise","Other"};   

    
    //
    /** Creates new form PlanningForm */
//CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
public ValidatingForm() {
     initComponents();
     this.refresh_performedActivity();
     this.populate_performedPlan();
     this.setTitle("Phase Validating: "+Global.currentPhase.getTitle());
     
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Performing_jLayeredPane = new javax.swing.JLayeredPane();
        Performing_Details_jDesktopPane_jDesktopPane = new javax.swing.JDesktopPane();
        Performing_Details_TabbedPane = new javax.swing.JTabbedPane();
        Performing_Performer_jDesktopPane = new javax.swing.JLayeredPane();
        Performing_Performer_jDesktopPane1 = new javax.swing.JDesktopPane();
        Planning_Planner_jDesktopPane = new javax.swing.JDesktopPane();
        Planning_Planner_info_jDesktopPane = new javax.swing.JDesktopPane();
        Planning_Planner_Name_jLabel = new javax.swing.JLabel();
        Planning_Planner_Contacts_jLabel = new javax.swing.JLabel();
        jScrollPane62 = new javax.swing.JScrollPane();
        Analyst_Contacts_jTextArea = new javax.swing.JTextArea();
        Analyst_Name_jTextField = new javax.swing.JTextField();
        Analyst_Role_jComboBox = new javax.swing.JComboBox();
        Planning_Planner_Level_jLabel = new javax.swing.JLabel();
        Analyst_Level_jComboBox = new javax.swing.JComboBox();
        Planning_Planner_Role_jLabel = new javax.swing.JLabel();
        jScrollPane9 = new javax.swing.JScrollPane();
        Analysts_jList = new javax.swing.JList();
        Performer_Validation_jDesktopPane = new javax.swing.JDesktopPane();
        Performing_ValidationPerformerResult_jLabel = new javax.swing.JLabel();
        jScrollPane19 = new javax.swing.JScrollPane();
        Performer_Validation_jTextPane = new javax.swing.JTextPane();
        Performer_IsValid_jCheckBox = new javax.swing.JCheckBox();
        Performer_Validate_jButton = new javax.swing.JButton();
        Performer_Invalidate_jButton = new javax.swing.JButton();
        jLayeredPane39 = new javax.swing.JLayeredPane();
        Planning_Resource_jDesktopPane = new javax.swing.JDesktopPane();
        Resource_jDesktopPane = new javax.swing.JDesktopPane();
        Resource_Cost_jLabel = new javax.swing.JLabel();
        Resource_Type_jLabel = new javax.swing.JLabel();
        Resource_Type_jComboBox = new javax.swing.JComboBox();
        Resource_Cost_jTextField = new javax.swing.JTextField();
        Resource_Quantity_jTextField = new javax.swing.JTextField();
        Resource_Quantity_jLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Resource_Description_jTextArea = new javax.swing.JTextArea();
        jScrollPane7 = new javax.swing.JScrollPane();
        Resources_jList = new javax.swing.JList();
        jScrollPane8 = new javax.swing.JScrollPane();
        Planned_Resources_jList = new javax.swing.JList();
        jScrollPane11 = new javax.swing.JScrollPane();
        Selected_Resources_jList = new javax.swing.JList();
        Resources_Validation_jDesktopPane = new javax.swing.JDesktopPane();
        Performing_ValidationResourceResult_jLabel1 = new javax.swing.JLabel();
        jScrollPane23 = new javax.swing.JScrollPane();
        Resources_Validation_jTextPane = new javax.swing.JTextPane();
        Resources_IsValid_jCheckBox = new javax.swing.JCheckBox();
        Resource_Invalidate_jButton = new javax.swing.JButton();
        Resource_Validate_jButton = new javax.swing.JButton();
        Performing_Justification_jLayeredPane = new javax.swing.JLayeredPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane34 = new javax.swing.JScrollPane();
        Justification_jTextPane = new javax.swing.JTextPane();
        Performing_JustificationDescription_jLabel1 = new javax.swing.JLabel();
        Justification_Source_jDesktopPane = new javax.swing.JDesktopPane();
        jScrollPane5 = new javax.swing.JScrollPane();
        Justification_Sources_jList = new javax.swing.JList();
        jScrollPane6 = new javax.swing.JScrollPane();
        Selected_Justification_Sources_jList = new javax.swing.JList();
        Justification_Validation_jDesktopPane = new javax.swing.JDesktopPane();
        Performing_ValidationJustificationResult_jLabel1 = new javax.swing.JLabel();
        jScrollPane24 = new javax.swing.JScrollPane();
        Justification_Validation_jTextPane = new javax.swing.JTextPane();
        Justification_IsValid_jCheckBox = new javax.swing.JCheckBox();
        Justification_Invalidate_jButton = new javax.swing.JButton();
        Justification_Validate_jButton = new javax.swing.JButton();
        Performing_Problem_jLayeredPane = new javax.swing.JLayeredPane();
        Performing_Problem_jDesktopPane = new javax.swing.JDesktopPane();
        Performing_Problem_Control_jDesktopPane = new javax.swing.JDesktopPane();
        jScrollPane29 = new javax.swing.JScrollPane();
        Problem_jTextPane = new javax.swing.JTextPane();
        Solution_jDesktopPane = new javax.swing.JDesktopPane();
        jScrollPane32 = new javax.swing.JScrollPane();
        Solution_jTextPane = new javax.swing.JTextPane();
        Solution_Source_jDesktopPane = new javax.swing.JDesktopPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        Solution_Sources_jList = new javax.swing.JList();
        jScrollPane3 = new javax.swing.JScrollPane();
        Selected_Solution_Evidences_jList = new javax.swing.JList();
        Performing_Problem_Next_jButton = new javax.swing.JButton();
        Performing_Problem_Previous_jButton = new javax.swing.JButton();
        Performing_Customised_info_jDesktopPane1 = new javax.swing.JDesktopPane();
        Performing_PerformedActivityDuration_jLabel1 = new javax.swing.JLabel();
        jScrollPane15 = new javax.swing.JScrollPane();
        Reason_jTextPane = new javax.swing.JTextPane();
        Performing_PerformedActivityDuration_jTextField1 = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        Selected_Causes_jList = new javax.swing.JList();
        Problems_Validation_jDesktopPane = new javax.swing.JDesktopPane();
        Performing_ValidationProblemResult_jLabel = new javax.swing.JLabel();
        jScrollPane20 = new javax.swing.JScrollPane();
        Problems_Validation_jTextPane = new javax.swing.JTextPane();
        Problems_IsValid_jCheckBox = new javax.swing.JCheckBox();
        Problem_Invalidate_jButton = new javax.swing.JButton();
        Problem_Validate_jButton = new javax.swing.JButton();
        Performing_Outcome_jLayeredPane = new javax.swing.JLayeredPane();
        Performing_Outcome_jDesktopPane = new javax.swing.JDesktopPane();
        Outcome_Validation_jDesktopPane = new javax.swing.JDesktopPane();
        Performing_ValidationOutcomeResult_jLabel1 = new javax.swing.JLabel();
        jScrollPane18 = new javax.swing.JScrollPane();
        Outcome_Validation_jTextPane = new javax.swing.JTextPane();
        Outcome_IsValid_jCheckBox = new javax.swing.JCheckBox();
        Outcome_Invalidate_jButton = new javax.swing.JButton();
        Outcome_Validate_jButton = new javax.swing.JButton();
        Performed_Plan_jPanel1 = new javax.swing.JPanel();
        Performed_Plan_jPanel2 = new javax.swing.JPanel();
        jButton5 = new javax.swing.JButton();
        Control_jDesktopPane = new javax.swing.JDesktopPane();
        Last_jButton = new javax.swing.JButton();
        Next_jButton = new javax.swing.JButton();
        Previous_jButton = new javax.swing.JButton();
        First_jButton = new javax.swing.JButton();
        Refresh_jButton = new javax.swing.JButton();
        Planning_CustomisedPlan_jDesktopPane = new javax.swing.JDesktopPane();
        Activity_Validation_jDesktopPane = new javax.swing.JDesktopPane();
        Activity_IsValid_jCheckBox = new javax.swing.JCheckBox();
        Performing_ValidationPlanResult_jLabel = new javax.swing.JLabel();
        jScrollPane17 = new javax.swing.JScrollPane();
        Activity_Validation_jTextPane = new javax.swing.JTextPane();
        Plan_Invalidate_jButton = new javax.swing.JButton();
        Plan_Validate_jButton = new javax.swing.JButton();
        Performed_Plan_jPanel = new javax.swing.JPanel();
        Planning_Performed_jCheckBox = new javax.swing.JCheckBox();
        jScrollPane68 = new javax.swing.JScrollPane();
        Planning_Customised_Description_jTextPane = new javax.swing.JTextPane();
        Planning_Customised_Optional_jCheckBox = new javax.swing.JCheckBox();
        Planning_CustomisedPlanItem_jLabel = new javax.swing.JLabel();
        Planning_CustomisedPlanSubItem_jLabel = new javax.swing.JLabel();
        jScrollPane69 = new javax.swing.JScrollPane();
        Planning_Customised_SubPlanItem_jTextPane = new javax.swing.JTextPane();
        Planning_Customised_SubPlanItem_jCheckBox = new javax.swing.JCheckBox();
        Planning_Preset_SubPlanItem_Next_jButton = new javax.swing.JButton();
        Planning_Preset_SubPlanItem_Previous_jButton = new javax.swing.JButton();
        PerformedActivityDuration_jLabel = new javax.swing.JLabel();
        PerformedActivity_Duration_jTextField = new javax.swing.JTextField();
        Control_jDesktopPane1 = new javax.swing.JDesktopPane();
        jLabel1 = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowDeactivated(java.awt.event.WindowEvent evt) {
                formWindowDeactivated(evt);
            }
        });

        Performing_jLayeredPane.setBackground(new java.awt.Color(255, 255, 204));
        Performing_jLayeredPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        Performing_Details_jDesktopPane_jDesktopPane.setBackground(new java.awt.Color(255, 255, 204));
        Performing_Details_jDesktopPane_jDesktopPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        Performing_Performer_jDesktopPane1.setBackground(new java.awt.Color(255, 255, 204));
        Performing_Performer_jDesktopPane1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        Planning_Planner_jDesktopPane.setBackground(new java.awt.Color(255, 255, 204));
        Planning_Planner_jDesktopPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        Planning_Planner_info_jDesktopPane.setBackground(new java.awt.Color(255, 255, 153));
        Planning_Planner_info_jDesktopPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        Planning_Planner_info_jDesktopPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Planning_Planner_info_jDesktopPaneMouseClicked(evt);
            }
        });

        Planning_Planner_Name_jLabel.setText("Name");
        Planning_Planner_Name_jLabel.setBounds(20, 10, 210, 20);
        Planning_Planner_info_jDesktopPane.add(Planning_Planner_Name_jLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Planner_Contacts_jLabel.setText("Contact Details (Comma separated)");
        Planning_Planner_Contacts_jLabel.setBounds(20, 80, 210, 20);
        Planning_Planner_info_jDesktopPane.add(Planning_Planner_Contacts_jLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Analyst_Contacts_jTextArea.setBackground(new java.awt.Color(255, 255, 204));
        Analyst_Contacts_jTextArea.setColumns(20);
        Analyst_Contacts_jTextArea.setRows(5);
        Analyst_Contacts_jTextArea.setDoubleBuffered(true);
        Analyst_Contacts_jTextArea.setEnabled(false);
        jScrollPane62.setViewportView(Analyst_Contacts_jTextArea);

        jScrollPane62.setBounds(20, 100, 410, 110);
        Planning_Planner_info_jDesktopPane.add(jScrollPane62, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Analyst_Name_jTextField.setBackground(new java.awt.Color(255, 255, 204));
        Analyst_Name_jTextField.setDoubleBuffered(true);
        Analyst_Name_jTextField.setEnabled(false);
        Analyst_Name_jTextField.setBounds(20, 30, 410, 20);
        Planning_Planner_info_jDesktopPane.add(Analyst_Name_jTextField, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Analyst_Role_jComboBox.setBackground(new java.awt.Color(255, 255, 204));
        Analyst_Role_jComboBox.setEditable(true);
        Analyst_Role_jComboBox.setModel(new DefaultComboBoxModel(this.analystRole));
        Analyst_Role_jComboBox.setDoubleBuffered(true);
        Analyst_Role_jComboBox.setEnabled(false);
        Analyst_Role_jComboBox.setBounds(20, 250, 180, 20);
        Planning_Planner_info_jDesktopPane.add(Analyst_Role_jComboBox, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Planner_Level_jLabel.setText("Level");
        Planning_Planner_Level_jLabel.setBounds(250, 230, 150, 20);
        Planning_Planner_info_jDesktopPane.add(Planning_Planner_Level_jLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Analyst_Level_jComboBox.setBackground(new java.awt.Color(255, 255, 204));
        Analyst_Level_jComboBox.setEditable(true);
        Analyst_Level_jComboBox.setModel(new DefaultComboBoxModel(this.analystLevel));
        Analyst_Level_jComboBox.setDoubleBuffered(true);
        Analyst_Level_jComboBox.setEnabled(false);
        Analyst_Level_jComboBox.setBounds(250, 250, 180, 20);
        Planning_Planner_info_jDesktopPane.add(Analyst_Level_jComboBox, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Planner_Role_jLabel.setText("Role");
        Planning_Planner_Role_jLabel.setBounds(20, 230, 150, 20);
        Planning_Planner_info_jDesktopPane.add(Planning_Planner_Role_jLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Planner_info_jDesktopPane.setBounds(430, 10, 450, 330);
        Planning_Planner_jDesktopPane.add(Planning_Planner_info_jDesktopPane, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Analysts_jList.setBackground(new java.awt.Color(255, 255, 153));
        Analysts_jList.setBorder(javax.swing.BorderFactory.createTitledBorder("Available Actors"));
        Analysts_jList.setModel(getAnalystsModel());
        Analysts_jList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                Analysts_jListValueChanged(evt);
            }
        });
        jScrollPane9.setViewportView(Analysts_jList);

        jScrollPane9.setBounds(10, 10, 410, 200);
        Planning_Planner_jDesktopPane.add(jScrollPane9, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Performer_Validation_jDesktopPane.setBackground(new java.awt.Color(255, 255, 102));
        Performer_Validation_jDesktopPane.setBorder(javax.swing.BorderFactory.createTitledBorder(ValidationType.PERFORMER.criteria()));

        Performing_ValidationPerformerResult_jLabel.setText("Validation Rational");
        Performing_ValidationPerformerResult_jLabel.setBounds(10, 20, 140, 20);
        Performer_Validation_jDesktopPane.add(Performing_ValidationPerformerResult_jLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jScrollPane19.setViewportView(Performer_Validation_jTextPane);

        jScrollPane19.setBounds(10, 40, 290, 70);
        Performer_Validation_jDesktopPane.add(jScrollPane19, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Performer_IsValid_jCheckBox.setBackground(new java.awt.Color(255, 255, 102));
        Performer_IsValid_jCheckBox.setText("Valid");
        Performer_IsValid_jCheckBox.setEnabled(false);
        Performer_IsValid_jCheckBox.setBounds(310, 38, 80, 20);
        Performer_Validation_jDesktopPane.add(Performer_IsValid_jCheckBox, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Performer_Validate_jButton.setText("Validate");
        Performer_Validate_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Performer_Validate_jButtonActionPerformed(evt);
            }
        });
        Performer_Validate_jButton.setBounds(310, 63, 90, 22);
        Performer_Validation_jDesktopPane.add(Performer_Validate_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Performer_Invalidate_jButton.setText("Invalidate");
        Performer_Invalidate_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Performer_Invalidate_jButtonActionPerformed(evt);
            }
        });
        Performer_Invalidate_jButton.setBounds(310, 88, 90, 22);
        Performer_Validation_jDesktopPane.add(Performer_Invalidate_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Performer_Validation_jDesktopPane.setBounds(10, 220, 410, 120);
        Planning_Planner_jDesktopPane.add(Performer_Validation_jDesktopPane, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Planner_jDesktopPane.setBounds(10, 10, 900, 350);
        Performing_Performer_jDesktopPane1.add(Planning_Planner_jDesktopPane, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Performing_Performer_jDesktopPane1.setBounds(0, 0, 930, 380);
        Performing_Performer_jDesktopPane.add(Performing_Performer_jDesktopPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Performing_Details_TabbedPane.addTab("Performer", Performing_Performer_jDesktopPane);

        Planning_Resource_jDesktopPane.setBackground(new java.awt.Color(255, 255, 204));
        Planning_Resource_jDesktopPane.setBorder(javax.swing.BorderFactory.createTitledBorder(null, " Project Resources ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        Resource_jDesktopPane.setBackground(new java.awt.Color(255, 255, 153));
        Resource_jDesktopPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Resource Details"));
        Resource_jDesktopPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Resource_jDesktopPaneMouseClicked(evt);
            }
        });

        Resource_Cost_jLabel.setText("Cost");
        Resource_Cost_jLabel.setBounds(290, 110, 50, 20);
        Resource_jDesktopPane.add(Resource_Cost_jLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Resource_Type_jLabel.setText("Resource Type");
        Resource_Type_jLabel.setBounds(280, 10, 90, 20);
        Resource_jDesktopPane.add(Resource_Type_jLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Resource_Type_jComboBox.setBackground(new java.awt.Color(255, 255, 153));
        Resource_Type_jComboBox.setModel(new DefaultComboBoxModel(this.resourceTypeArray));
        Resource_Type_jComboBox.setEnabled(false);
        Resource_Type_jComboBox.setBounds(280, 30, 190, 20);
        Resource_jDesktopPane.add(Resource_Type_jComboBox, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Resource_Cost_jTextField.setBackground(new java.awt.Color(255, 255, 204));
        Resource_Cost_jTextField.setEditable(false);
        Resource_Cost_jTextField.setEnabled(false);
        Resource_Cost_jTextField.setBounds(350, 110, 60, 20);
        Resource_jDesktopPane.add(Resource_Cost_jTextField, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Resource_Quantity_jTextField.setBackground(new java.awt.Color(255, 255, 204));
        Resource_Quantity_jTextField.setEditable(false);
        Resource_Quantity_jTextField.setEnabled(false);
        Resource_Quantity_jTextField.setBounds(350, 70, 60, 20);
        Resource_jDesktopPane.add(Resource_Quantity_jTextField, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Resource_Quantity_jLabel.setText("Quantity");
        Resource_Quantity_jLabel.setBounds(290, 70, 60, 20);
        Resource_jDesktopPane.add(Resource_Quantity_jLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Resource_Description_jTextArea.setBackground(new java.awt.Color(255, 255, 204));
        Resource_Description_jTextArea.setColumns(20);
        Resource_Description_jTextArea.setEditable(false);
        Resource_Description_jTextArea.setRows(5);
        Resource_Description_jTextArea.setEnabled(false);
        jScrollPane1.setViewportView(Resource_Description_jTextArea);

        jScrollPane1.setBounds(20, 20, 250, 120);
        Resource_jDesktopPane.add(jScrollPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Resource_jDesktopPane.setBounds(440, 200, 480, 150);
        Planning_Resource_jDesktopPane.add(Resource_jDesktopPane, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Resources_jList.setBackground(new java.awt.Color(255, 255, 153));
        Resources_jList.setBorder(javax.swing.BorderFactory.createTitledBorder("Project Resources"));
        Resources_jList.setModel(this.getProjectResourcesModel());
        Resources_jList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        Resources_jList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                Resources_jListValueChanged(evt);
            }
        });
        jScrollPane7.setViewportView(Resources_jList);

        jScrollPane7.setBounds(10, 120, 420, 70);
        Planning_Resource_jDesktopPane.add(jScrollPane7, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planned_Resources_jList.setBackground(new java.awt.Color(255, 255, 153));
        Planned_Resources_jList.setBorder(javax.swing.BorderFactory.createTitledBorder("Planned Resources"));
        Planned_Resources_jList.setModel(this.getPlannedResourcesModel());
        Planned_Resources_jList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        Planned_Resources_jList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                Planned_Resources_jListValueChanged(evt);
            }
        });
        jScrollPane8.setViewportView(Planned_Resources_jList);

        jScrollPane8.setBounds(10, 20, 420, 90);
        Planning_Resource_jDesktopPane.add(jScrollPane8, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Selected_Resources_jList.setBackground(new java.awt.Color(255, 255, 153));
        Selected_Resources_jList.setBorder(javax.swing.BorderFactory.createTitledBorder("Performing Used Resources"));
        Selected_Resources_jList.setModel(this.getSelectedResourcesModel());
        Selected_Resources_jList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        Selected_Resources_jList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                Selected_Resources_jListValueChanged(evt);
            }
        });
        jScrollPane11.setViewportView(Selected_Resources_jList);

        jScrollPane11.setBounds(440, 20, 480, 170);
        Planning_Resource_jDesktopPane.add(jScrollPane11, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Resources_Validation_jDesktopPane.setBackground(new java.awt.Color(255, 255, 102));
        Resources_Validation_jDesktopPane.setBorder(javax.swing.BorderFactory.createTitledBorder(ValidationType.RESOURCES.criteria()));

        Performing_ValidationResourceResult_jLabel1.setText("Validation Rational");
        Performing_ValidationResourceResult_jLabel1.setBounds(10, 20, 140, 20);
        Resources_Validation_jDesktopPane.add(Performing_ValidationResourceResult_jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jScrollPane23.setViewportView(Resources_Validation_jTextPane);

        jScrollPane23.setBounds(10, 40, 300, 70);
        Resources_Validation_jDesktopPane.add(jScrollPane23, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Resources_IsValid_jCheckBox.setBackground(new java.awt.Color(255, 255, 102));
        Resources_IsValid_jCheckBox.setText("Valid");
        Resources_IsValid_jCheckBox.setEnabled(false);
        Resources_IsValid_jCheckBox.setBounds(320, 40, 90, 20);
        Resources_Validation_jDesktopPane.add(Resources_IsValid_jCheckBox, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Resource_Invalidate_jButton.setText("Invalidate");
        Resource_Invalidate_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Resource_Invalidate_jButtonActionPerformed(evt);
            }
        });
        Resource_Invalidate_jButton.setBounds(320, 88, 90, 22);
        Resources_Validation_jDesktopPane.add(Resource_Invalidate_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Resource_Validate_jButton.setText("Validate");
        Resource_Validate_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Resource_Validate_jButtonActionPerformed(evt);
            }
        });
        Resource_Validate_jButton.setBounds(320, 64, 90, 22);
        Resources_Validation_jDesktopPane.add(Resource_Validate_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Resources_Validation_jDesktopPane.setBounds(10, 210, 420, 140);
        Planning_Resource_jDesktopPane.add(Resources_Validation_jDesktopPane, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Resource_jDesktopPane.setBounds(0, 0, 930, 360);
        jLayeredPane39.add(Planning_Resource_jDesktopPane, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Performing_Details_TabbedPane.addTab(" Resources", jLayeredPane39);

        jPanel2.setBackground(new java.awt.Color(255, 255, 204));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        Justification_jTextPane.setBackground(new java.awt.Color(255, 255, 153));
        Justification_jTextPane.setEnabled(false);
        jScrollPane34.setViewportView(Justification_jTextPane);

        Performing_JustificationDescription_jLabel1.setText("Justification ");

        Justification_Source_jDesktopPane.setBackground(new java.awt.Color(255, 255, 153));
        Justification_Source_jDesktopPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Supporting Evidences"));

        Justification_Sources_jList.setBackground(new java.awt.Color(255, 255, 204));
        Justification_Sources_jList.setBorder(javax.swing.BorderFactory.createTitledBorder("Available Sources"));
        Justification_Sources_jList.setModel(this.getSourcesModel());
        Justification_Sources_jList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        Justification_Sources_jList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                Justification_Sources_jListValueChanged(evt);
            }
        });
        jScrollPane5.setViewportView(Justification_Sources_jList);

        jScrollPane5.setBounds(20, 30, 410, 80);
        Justification_Source_jDesktopPane.add(jScrollPane5, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Selected_Justification_Sources_jList.setBackground(new java.awt.Color(255, 255, 204));
        Selected_Justification_Sources_jList.setBorder(javax.swing.BorderFactory.createTitledBorder("Selected Justification Sources"));
        Selected_Justification_Sources_jList.setModel(this.getSelectedJustificationEvidencesModel());
        Selected_Justification_Sources_jList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        Selected_Justification_Sources_jList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                Selected_Justification_Sources_jListValueChanged(evt);
            }
        });
        jScrollPane6.setViewportView(Selected_Justification_Sources_jList);

        jScrollPane6.setBounds(440, 30, 440, 200);
        Justification_Source_jDesktopPane.add(jScrollPane6, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Justification_Validation_jDesktopPane.setBackground(new java.awt.Color(255, 255, 102));
        Justification_Validation_jDesktopPane.setBorder(javax.swing.BorderFactory.createTitledBorder(ValidationType.JUSTIFICATION.criteria()));

        Performing_ValidationJustificationResult_jLabel1.setText("Validation Rational");
        Performing_ValidationJustificationResult_jLabel1.setBounds(10, 20, 140, 20);
        Justification_Validation_jDesktopPane.add(Performing_ValidationJustificationResult_jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jScrollPane24.setViewportView(Justification_Validation_jTextPane);

        jScrollPane24.setBounds(10, 40, 290, 70);
        Justification_Validation_jDesktopPane.add(jScrollPane24, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Justification_IsValid_jCheckBox.setBackground(new java.awt.Color(255, 255, 102));
        Justification_IsValid_jCheckBox.setText("Valid");
        Justification_IsValid_jCheckBox.setEnabled(false);
        Justification_IsValid_jCheckBox.setBounds(310, 34, 90, 20);
        Justification_Validation_jDesktopPane.add(Justification_IsValid_jCheckBox, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Justification_Invalidate_jButton.setText("Invalidate");
        Justification_Invalidate_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Justification_Invalidate_jButtonActionPerformed(evt);
            }
        });
        Justification_Invalidate_jButton.setBounds(310, 86, 90, 22);
        Justification_Validation_jDesktopPane.add(Justification_Invalidate_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Justification_Validate_jButton.setText("Validate");
        Justification_Validate_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Justification_Validate_jButtonActionPerformed(evt);
            }
        });
        Justification_Validate_jButton.setBounds(310, 60, 90, 22);
        Justification_Validation_jDesktopPane.add(Justification_Validate_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Justification_Validation_jDesktopPane.setBounds(20, 120, 410, 120);
        Justification_Source_jDesktopPane.add(Justification_Validation_jDesktopPane, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Justification_Source_jDesktopPane, javax.swing.GroupLayout.PREFERRED_SIZE, 900, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane34, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 902, Short.MAX_VALUE)
                    .addComponent(Performing_JustificationDescription_jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(Performing_JustificationDescription_jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane34, javax.swing.GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Justification_Source_jDesktopPane, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );

        jPanel2.setBounds(0, 0, 930, 380);
        Performing_Justification_jLayeredPane.add(jPanel2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Performing_Details_TabbedPane.addTab("Justification", Performing_Justification_jLayeredPane);

        Performing_Problem_jDesktopPane.setBackground(new java.awt.Color(255, 255, 204));
        Performing_Problem_jDesktopPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        Performing_Problem_Control_jDesktopPane.setBackground(new java.awt.Color(255, 255, 204));
        Performing_Problem_Control_jDesktopPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Performing Problems"));

        Problem_jTextPane.setBackground(new java.awt.Color(255, 255, 153));
        Problem_jTextPane.setEnabled(false);
        jScrollPane29.setViewportView(Problem_jTextPane);

        jScrollPane29.setBounds(10, 20, 420, 130);
        Performing_Problem_Control_jDesktopPane.add(jScrollPane29, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Solution_jDesktopPane.setBackground(new java.awt.Color(255, 255, 153));
        Solution_jDesktopPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Problem Solutions"));

        Solution_jTextPane.setBackground(new java.awt.Color(255, 255, 204));
        Solution_jTextPane.setEnabled(false);
        jScrollPane32.setViewportView(Solution_jTextPane);

        jScrollPane32.setBounds(20, 20, 450, 40);
        Solution_jDesktopPane.add(jScrollPane32, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Solution_Source_jDesktopPane.setBackground(new java.awt.Color(255, 255, 153));
        Solution_Source_jDesktopPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Solution Evidences"));

        Solution_Sources_jList.setBackground(new java.awt.Color(255, 255, 204));
        Solution_Sources_jList.setBorder(javax.swing.BorderFactory.createTitledBorder("Sources"));
        Solution_Sources_jList.setModel(this.getSourcesModel());
        Solution_Sources_jList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        Solution_Sources_jList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                Solution_Sources_jListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(Solution_Sources_jList);

        jScrollPane2.setBounds(10, 20, 220, 120);
        Solution_Source_jDesktopPane.add(jScrollPane2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Selected_Solution_Evidences_jList.setBackground(new java.awt.Color(255, 255, 204));
        Selected_Solution_Evidences_jList.setBorder(javax.swing.BorderFactory.createTitledBorder("Solution Evidences"));
        Selected_Solution_Evidences_jList.setModel(this.getSelectedSolutionEvidencesModel());
        Selected_Solution_Evidences_jList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        Selected_Solution_Evidences_jList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                Selected_Solution_Evidences_jListValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(Selected_Solution_Evidences_jList);

        jScrollPane3.setBounds(240, 20, 210, 120);
        Solution_Source_jDesktopPane.add(jScrollPane3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Solution_Source_jDesktopPane.setBounds(10, 60, 460, 150);
        Solution_jDesktopPane.add(Solution_Source_jDesktopPane, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Solution_jDesktopPane.setBounds(430, 130, 470, 210);
        Performing_Problem_Control_jDesktopPane.add(Solution_jDesktopPane, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Performing_Problem_Next_jButton.setText("Next >");
        Performing_Problem_Next_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Performing_Problem_Next_jButtonActionPerformed(evt);
            }
        });
        Performing_Problem_Next_jButton.setBounds(330, 150, 100, 22);
        Performing_Problem_Control_jDesktopPane.add(Performing_Problem_Next_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Performing_Problem_Previous_jButton.setText("< Previous");
        Performing_Problem_Previous_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Performing_Problem_Previous_jButtonActionPerformed(evt);
            }
        });
        Performing_Problem_Previous_jButton.setBounds(220, 150, 110, 22);
        Performing_Problem_Control_jDesktopPane.add(Performing_Problem_Previous_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Performing_Customised_info_jDesktopPane1.setBackground(new java.awt.Color(255, 255, 153));
        Performing_Customised_info_jDesktopPane1.setBorder(javax.swing.BorderFactory.createTitledBorder("Reason of the Problem"));

        Performing_PerformedActivityDuration_jLabel1.setText("Duration");
        Performing_PerformedActivityDuration_jLabel1.setBounds(10, 130, 60, 20);
        Performing_Customised_info_jDesktopPane1.add(Performing_PerformedActivityDuration_jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Reason_jTextPane.setBackground(new java.awt.Color(255, 255, 204));
        jScrollPane15.setViewportView(Reason_jTextPane);

        jScrollPane15.setBounds(10, 20, 210, 70);
        Performing_Customised_info_jDesktopPane1.add(jScrollPane15, javax.swing.JLayeredPane.DEFAULT_LAYER);
        Performing_PerformedActivityDuration_jTextField1.setBounds(70, 130, 60, 22);
        Performing_Customised_info_jDesktopPane1.add(Performing_PerformedActivityDuration_jTextField1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Selected_Causes_jList.setBackground(new java.awt.Color(255, 255, 204));
        Selected_Causes_jList.setBorder(javax.swing.BorderFactory.createTitledBorder("Identified Causes"));
        Selected_Causes_jList.setModel(this.getPlannedResourcesModel());
        Selected_Causes_jList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        Selected_Causes_jList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                Selected_Causes_jListValueChanged(evt);
            }
        });
        jScrollPane4.setViewportView(Selected_Causes_jList);

        jScrollPane4.setBounds(230, 20, 220, 70);
        Performing_Customised_info_jDesktopPane1.add(jScrollPane4, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Performing_Customised_info_jDesktopPane1.setBounds(430, 20, 470, 100);
        Performing_Problem_Control_jDesktopPane.add(Performing_Customised_info_jDesktopPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Problems_Validation_jDesktopPane.setBackground(new java.awt.Color(255, 255, 102));
        Problems_Validation_jDesktopPane.setBorder(javax.swing.BorderFactory.createTitledBorder(ValidationType.PROBLEMS.criteria()));

        Performing_ValidationProblemResult_jLabel.setText("Validation Rational");
        Performing_ValidationProblemResult_jLabel.setBounds(10, 15, 140, 20);
        Problems_Validation_jDesktopPane.add(Performing_ValidationProblemResult_jLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jScrollPane20.setViewportView(Problems_Validation_jTextPane);

        jScrollPane20.setBounds(10, 34, 280, 110);
        Problems_Validation_jDesktopPane.add(jScrollPane20, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Problems_IsValid_jCheckBox.setBackground(new java.awt.Color(255, 255, 102));
        Problems_IsValid_jCheckBox.setText("Valid");
        Problems_IsValid_jCheckBox.setEnabled(false);
        Problems_IsValid_jCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Problems_IsValid_jCheckBoxActionPerformed(evt);
            }
        });
        Problems_IsValid_jCheckBox.setBounds(300, 30, 90, 20);
        Problems_Validation_jDesktopPane.add(Problems_IsValid_jCheckBox, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Problem_Invalidate_jButton.setText("Invalidate");
        Problem_Invalidate_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Problem_Invalidate_jButtonActionPerformed(evt);
            }
        });
        Problem_Invalidate_jButton.setBounds(300, 80, 90, 22);
        Problems_Validation_jDesktopPane.add(Problem_Invalidate_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Problem_Validate_jButton.setText("Validate");
        Problem_Validate_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Problem_Validate_jButtonActionPerformed(evt);
            }
        });
        Problem_Validate_jButton.setBounds(300, 55, 90, 22);
        Problems_Validation_jDesktopPane.add(Problem_Validate_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Problems_Validation_jDesktopPane.setBounds(10, 170, 420, 170);
        Performing_Problem_Control_jDesktopPane.add(Problems_Validation_jDesktopPane, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Performing_Problem_Control_jDesktopPane.setBounds(10, 10, 910, 350);
        Performing_Problem_jDesktopPane.add(Performing_Problem_Control_jDesktopPane, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Performing_Problem_jDesktopPane.setBounds(0, 0, 930, 380);
        Performing_Problem_jLayeredPane.add(Performing_Problem_jDesktopPane, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Performing_Details_TabbedPane.addTab("Problems", Performing_Problem_jLayeredPane);

        Performing_Outcome_jDesktopPane.setBackground(new java.awt.Color(255, 255, 204));
        Performing_Outcome_jDesktopPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        Outcome_Validation_jDesktopPane.setBackground(new java.awt.Color(255, 255, 102));
        Outcome_Validation_jDesktopPane.setBorder(javax.swing.BorderFactory.createTitledBorder(ValidationType.OUTCOME.criteria()));

        Performing_ValidationOutcomeResult_jLabel1.setText("Validation Rational");
        Performing_ValidationOutcomeResult_jLabel1.setBounds(10, 20, 140, 20);
        Outcome_Validation_jDesktopPane.add(Performing_ValidationOutcomeResult_jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jScrollPane18.setViewportView(Outcome_Validation_jTextPane);

        jScrollPane18.setBounds(10, 40, 400, 60);
        Outcome_Validation_jDesktopPane.add(jScrollPane18, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Outcome_IsValid_jCheckBox.setBackground(new java.awt.Color(255, 255, 102));
        Outcome_IsValid_jCheckBox.setText("Valid");
        Outcome_IsValid_jCheckBox.setEnabled(false);
        Outcome_IsValid_jCheckBox.setBounds(420, 30, 90, 20);
        Outcome_Validation_jDesktopPane.add(Outcome_IsValid_jCheckBox, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Outcome_Invalidate_jButton.setText("Invalidate");
        Outcome_Invalidate_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Outcome_Invalidate_jButtonActionPerformed(evt);
            }
        });
        Outcome_Invalidate_jButton.setBounds(420, 80, 90, 22);
        Outcome_Validation_jDesktopPane.add(Outcome_Invalidate_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Outcome_Validate_jButton.setText("Validate");
        Outcome_Validate_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Outcome_Validate_jButtonActionPerformed(evt);
            }
        });
        Outcome_Validate_jButton.setBounds(420, 50, 90, 22);
        Outcome_Validation_jDesktopPane.add(Outcome_Validate_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Outcome_Validation_jDesktopPane.setBounds(20, 230, 520, 120);
        Performing_Outcome_jDesktopPane.add(Outcome_Validation_jDesktopPane, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Performed_Plan_jPanel1.setBackground(new java.awt.Color(255, 255, 153));
        Performed_Plan_jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        Performed_Plan_jPanel2.setBackground(new java.awt.Color(255, 255, 102));
        Performed_Plan_jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jButton5.setFont(new java.awt.Font("Tahoma", 0, 16));
        jButton5.setText(" Phase Delivery");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout Performed_Plan_jPanel2Layout = new javax.swing.GroupLayout(Performed_Plan_jPanel2);
        Performed_Plan_jPanel2.setLayout(Performed_Plan_jPanel2Layout);
        Performed_Plan_jPanel2Layout.setHorizontalGroup(
            Performed_Plan_jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Performed_Plan_jPanel2Layout.createSequentialGroup()
                .addGap(101, 101, 101)
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(129, Short.MAX_VALUE))
        );
        Performed_Plan_jPanel2Layout.setVerticalGroup(
            Performed_Plan_jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Performed_Plan_jPanel2Layout.createSequentialGroup()
                .addContainerGap(37, Short.MAX_VALUE)
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31))
        );

        javax.swing.GroupLayout Performed_Plan_jPanel1Layout = new javax.swing.GroupLayout(Performed_Plan_jPanel1);
        Performed_Plan_jPanel1.setLayout(Performed_Plan_jPanel1Layout);
        Performed_Plan_jPanel1Layout.setHorizontalGroup(
            Performed_Plan_jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Performed_Plan_jPanel1Layout.createSequentialGroup()
                .addContainerGap(33, Short.MAX_VALUE)
                .addComponent(Performed_Plan_jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39))
        );
        Performed_Plan_jPanel1Layout.setVerticalGroup(
            Performed_Plan_jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Performed_Plan_jPanel1Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(Performed_Plan_jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        Performed_Plan_jPanel1.setBounds(30, 30, 500, 170);
        Performing_Outcome_jDesktopPane.add(Performed_Plan_jPanel1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Performing_Outcome_jDesktopPane.setBounds(0, 0, 930, 360);
        Performing_Outcome_jLayeredPane.add(Performing_Outcome_jDesktopPane, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Performing_Details_TabbedPane.addTab("Outcome", Performing_Outcome_jLayeredPane);

        Performing_Details_TabbedPane.setBounds(20, 220, 940, 390);
        Performing_Details_jDesktopPane_jDesktopPane.add(Performing_Details_TabbedPane, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Control_jDesktopPane.setBackground(new java.awt.Color(255, 255, 153));
        Control_jDesktopPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        Last_jButton.setText("Last >>");
        Last_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Last_jButtonActionPerformed(evt);
            }
        });
        Last_jButton.setBounds(330, 10, 100, 23);
        Control_jDesktopPane.add(Last_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Next_jButton.setText("Next >");
        Next_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Next_jButtonActionPerformed(evt);
            }
        });
        Next_jButton.setBounds(240, 10, 90, 23);
        Control_jDesktopPane.add(Next_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Previous_jButton.setText("< Previous");
        Previous_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Previous_jButtonActionPerformed(evt);
            }
        });
        Previous_jButton.setBounds(120, 10, 120, 23);
        Control_jDesktopPane.add(Previous_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        First_jButton.setText("<< First");
        First_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                First_jButtonActionPerformed(evt);
            }
        });
        First_jButton.setBounds(10, 10, 110, 23);
        Control_jDesktopPane.add(First_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Refresh_jButton.setText("Refresh  Activities");
        Refresh_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Refresh_jButtonActionPerformed(evt);
            }
        });
        Refresh_jButton.setBounds(440, 10, 160, 23);
        Control_jDesktopPane.add(Refresh_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Control_jDesktopPane.setBounds(20, 620, 610, 40);
        Performing_Details_jDesktopPane_jDesktopPane.add(Control_jDesktopPane, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_CustomisedPlan_jDesktopPane.setBackground(new java.awt.Color(255, 255, 153));
        Planning_CustomisedPlan_jDesktopPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        Activity_Validation_jDesktopPane.setBackground(new java.awt.Color(255, 255, 102));
        Activity_Validation_jDesktopPane.setBorder(javax.swing.BorderFactory.createTitledBorder(ValidationType.ACTIVITY.criteria()));

        Activity_IsValid_jCheckBox.setBackground(new java.awt.Color(255, 255, 102));
        Activity_IsValid_jCheckBox.setText("Valid");
        Activity_IsValid_jCheckBox.setEnabled(false);
        Activity_IsValid_jCheckBox.setBounds(290, 60, 90, 20);
        Activity_Validation_jDesktopPane.add(Activity_IsValid_jCheckBox, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Performing_ValidationPlanResult_jLabel.setText("Validation Rational");
        Performing_ValidationPlanResult_jLabel.setBounds(20, 30, 250, 20);
        Activity_Validation_jDesktopPane.add(Performing_ValidationPlanResult_jLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jScrollPane17.setViewportView(Activity_Validation_jTextPane);

        jScrollPane17.setBounds(20, 50, 250, 110);
        Activity_Validation_jDesktopPane.add(jScrollPane17, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Plan_Invalidate_jButton.setText("Invalidate");
        Plan_Invalidate_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Plan_Invalidate_jButtonActionPerformed(evt);
            }
        });
        Plan_Invalidate_jButton.setBounds(290, 120, 90, 22);
        Activity_Validation_jDesktopPane.add(Plan_Invalidate_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Plan_Validate_jButton.setText("Validate");
        Plan_Validate_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Plan_Validate_jButtonActionPerformed(evt);
            }
        });
        Plan_Validate_jButton.setBounds(290, 90, 90, 22);
        Activity_Validation_jDesktopPane.add(Plan_Validate_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Activity_Validation_jDesktopPane.setBounds(530, 10, 390, 180);
        Planning_CustomisedPlan_jDesktopPane.add(Activity_Validation_jDesktopPane, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Performed_Plan_jPanel.setBackground(new java.awt.Color(255, 255, 153));
        Performed_Plan_jPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        Planning_Performed_jCheckBox.setBackground(new java.awt.Color(255, 255, 153));
        Planning_Performed_jCheckBox.setText("Performed");
        Planning_Performed_jCheckBox.setEnabled(false);

        Planning_Customised_Description_jTextPane.setBackground(new java.awt.Color(255, 255, 204));
        Planning_Customised_Description_jTextPane.setEditable(false);
        Planning_Customised_Description_jTextPane.setEnabled(false);
        jScrollPane68.setViewportView(Planning_Customised_Description_jTextPane);

        Planning_Customised_Optional_jCheckBox.setBackground(new java.awt.Color(255, 255, 153));
        Planning_Customised_Optional_jCheckBox.setText("Optional");
        Planning_Customised_Optional_jCheckBox.setEnabled(false);

        Planning_CustomisedPlanItem_jLabel.setText("Plan Item");

        Planning_CustomisedPlanSubItem_jLabel.setText("Sub-Item");

        Planning_Customised_SubPlanItem_jTextPane.setBackground(new java.awt.Color(255, 255, 204));
        Planning_Customised_SubPlanItem_jTextPane.setEditable(false);
        Planning_Customised_SubPlanItem_jTextPane.setEnabled(false);
        jScrollPane69.setViewportView(Planning_Customised_SubPlanItem_jTextPane);

        Planning_Customised_SubPlanItem_jCheckBox.setBackground(new java.awt.Color(255, 255, 153));
        Planning_Customised_SubPlanItem_jCheckBox.setText("Optional");
        Planning_Customised_SubPlanItem_jCheckBox.setEnabled(false);

        Planning_Preset_SubPlanItem_Next_jButton.setText(" >");
        Planning_Preset_SubPlanItem_Next_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Planning_Preset_SubPlanItem_Next_jButtonActionPerformed(evt);
            }
        });

        Planning_Preset_SubPlanItem_Previous_jButton.setText("<");
        Planning_Preset_SubPlanItem_Previous_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Planning_Preset_SubPlanItem_Previous_jButtonActionPerformed(evt);
            }
        });

        PerformedActivityDuration_jLabel.setText("Duration");

        PerformedActivity_Duration_jTextField.setBackground(new java.awt.Color(255, 255, 204));
        PerformedActivity_Duration_jTextField.setEnabled(false);

        javax.swing.GroupLayout Performed_Plan_jPanelLayout = new javax.swing.GroupLayout(Performed_Plan_jPanel);
        Performed_Plan_jPanel.setLayout(Performed_Plan_jPanelLayout);
        Performed_Plan_jPanelLayout.setHorizontalGroup(
            Performed_Plan_jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Performed_Plan_jPanelLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(Planning_CustomisedPlanItem_jLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane68, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(Performed_Plan_jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Planning_Performed_jCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Planning_Customised_Optional_jCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16))
            .addGroup(Performed_Plan_jPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Performed_Plan_jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Performed_Plan_jPanelLayout.createSequentialGroup()
                        .addComponent(PerformedActivityDuration_jLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(PerformedActivity_Duration_jTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 140, Short.MAX_VALUE)
                        .addComponent(Planning_Preset_SubPlanItem_Previous_jButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Planning_Preset_SubPlanItem_Next_jButton))
                    .addGroup(Performed_Plan_jPanelLayout.createSequentialGroup()
                        .addComponent(Planning_CustomisedPlanSubItem_jLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane69, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Planning_Customised_SubPlanItem_jCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
        );
        Performed_Plan_jPanelLayout.setVerticalGroup(
            Performed_Plan_jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Performed_Plan_jPanelLayout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(Performed_Plan_jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Planning_CustomisedPlanItem_jLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(Performed_Plan_jPanelLayout.createSequentialGroup()
                        .addComponent(Planning_Performed_jCheckBox)
                        .addGap(3, 3, 3)
                        .addComponent(Planning_Customised_Optional_jCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane68, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(Performed_Plan_jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Planning_Customised_SubPlanItem_jCheckBox)
                    .addComponent(Planning_CustomisedPlanSubItem_jLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane69, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(Performed_Plan_jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Performed_Plan_jPanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(PerformedActivityDuration_jLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(Performed_Plan_jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(PerformedActivity_Duration_jTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Planning_Preset_SubPlanItem_Previous_jButton, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Planning_Preset_SubPlanItem_Next_jButton, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );

        Performed_Plan_jPanel.setBounds(20, 10, 500, 180);
        Planning_CustomisedPlan_jDesktopPane.add(Performed_Plan_jPanel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_CustomisedPlan_jDesktopPane.setBounds(20, 10, 930, 200);
        Performing_Details_jDesktopPane_jDesktopPane.add(Planning_CustomisedPlan_jDesktopPane, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Control_jDesktopPane1.setBackground(new java.awt.Color(255, 255, 153));
        Control_jDesktopPane1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setText("Tip: Save using Validate & Invalidate Buttons");
        jLabel1.setBounds(10, 10, 320, 20);
        Control_jDesktopPane1.add(jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Control_jDesktopPane1.setBounds(640, 620, 320, 40);
        Performing_Details_jDesktopPane_jDesktopPane.add(Control_jDesktopPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Performing_Details_jDesktopPane_jDesktopPane.setBounds(10, 10, 970, 670);
        Performing_jLayeredPane.add(Performing_Details_jDesktopPane_jDesktopPane, javax.swing.JLayeredPane.DEFAULT_LAYER);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(Performing_jLayeredPane, javax.swing.GroupLayout.DEFAULT_SIZE, 984, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(Performing_jLayeredPane, javax.swing.GroupLayout.DEFAULT_SIZE, 680, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Problems_IsValid_jCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Problems_IsValid_jCheckBoxActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_Problems_IsValid_jCheckBoxActionPerformed

    private void Refresh_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Refresh_jButtonActionPerformed
        this.refresh_performedActivity();       
}//GEN-LAST:event_Refresh_jButtonActionPerformed

    private void Planning_Planner_info_jDesktopPaneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Planning_Planner_info_jDesktopPaneMouseClicked
        HumanInteractionForm humanInteractionForm=null;
        humanInteractionForm=new HumanInteractionForm(this.analyst);
}//GEN-LAST:event_Planning_Planner_info_jDesktopPaneMouseClicked

    private void Analysts_jListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_Analysts_jListValueChanged
 if (Global.project!=null&&Global.project.getSupplements()!=null &&
     Global.project.getSupplements().getHumanInteraction()!=null )
      if (this.Analysts_jList.getSelectedIndex()>=0)
            this.analyst=Global.project.getSupplements().getHumanInteraction().
                                    get(this.Analysts_jList.getSelectedIndex());
if (this.plan!=null && this.analyst!=null)
{
    this.plan.setPlanner(this.analyst.clone());    
}
  this.populate_analyst();
  this.populateForm();


}//GEN-LAST:event_Analysts_jListValueChanged

    private void Planned_Resources_jListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_Planned_Resources_jListValueChanged
//Note: since the planned resources is saved in the plan which is now stored in the activity
// once the original plan changed the change is not reflected on planned resources stored in the performed plan 
// this seems to be logical since you cannot carry out an out of date plan
// in this case the nest thing is to deleteCustomisedValidation the old edition and add the new on
// I will add some code to lock the plan once it is performed from change

        if (this.plan!=null && this.plan.getResources()!=null &&
                this.plan.getResources().getResourcesList().size()>0)
            if (this.Planned_Resources_jList.getSelectedIndex()>=0)
                this.resource=this.plan.getResources().getResource(Planned_Resources_jList.getSelectedIndex());
        this.populate_resource();
        this.populateForm();
}//GEN-LAST:event_Planned_Resources_jListValueChanged

    private void Resources_jListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_Resources_jListValueChanged

        if (Global.project!=null&&Global.project.getSupplements()!=null
                && Global.project.getSupplements().getManagement()!=null
                && Global.project.getSupplements().getManagement().getResources()!=null )
            if (this.Resources_jList.getSelectedIndex()>=0)
                this.resource=Global.project.getSupplements().getManagement().getResources().getResource(this.Resources_jList.getSelectedIndex());
        this.populate_resource();
        this.populateForm();
    }//GEN-LAST:event_Resources_jListValueChanged

    private void Resource_jDesktopPaneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Resource_jDesktopPaneMouseClicked
        ManagementForm projectManagementForm=null;
        projectManagementForm=new ManagementForm(this.resource);
}//GEN-LAST:event_Resource_jDesktopPaneMouseClicked

    private void Planning_Preset_SubPlanItem_Next_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Planning_Preset_SubPlanItem_Next_jButtonActionPerformed
         this.next_customised_subPlan();
}//GEN-LAST:event_Planning_Preset_SubPlanItem_Next_jButtonActionPerformed

    private void Planning_Preset_SubPlanItem_Previous_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Planning_Preset_SubPlanItem_Previous_jButtonActionPerformed
          this.previous_customised_subPlan();
}//GEN-LAST:event_Planning_Preset_SubPlanItem_Previous_jButtonActionPerformed

    private void Next_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Next_jButtonActionPerformed
    this.next_performedActivity();
    }//GEN-LAST:event_Next_jButtonActionPerformed

    private void Previous_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Previous_jButtonActionPerformed
    this.previous_performedActivity();
    }//GEN-LAST:event_Previous_jButtonActionPerformed

    private void First_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_First_jButtonActionPerformed
    this.first_performedActivity();
    }//GEN-LAST:event_First_jButtonActionPerformed

    private void Last_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Last_jButtonActionPerformed
    this.last_performedActivity();
    }//GEN-LAST:event_Last_jButtonActionPerformed

    private void Performing_Problem_Next_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Performing_Problem_Next_jButtonActionPerformed
    this.next_problem();
    }//GEN-LAST:event_Performing_Problem_Next_jButtonActionPerformed

    private void Performing_Problem_Previous_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Performing_Problem_Previous_jButtonActionPerformed
    this.previous_problem();
    }//GEN-LAST:event_Performing_Problem_Previous_jButtonActionPerformed

    private void Solution_Sources_jListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_Solution_Sources_jListValueChanged
        if (Global.project !=null &&  Global.project.getSources()!=null &&
            Global.project.getSources().getSourcesList().size()>0)
         if (this.Solution_Sources_jList.getSelectedIndex()>=0)
                this.solutionEvidence=(Source) Global.project.getSources().getSourcesList().get(this.Solution_Sources_jList.getSelectedIndex());
    }//GEN-LAST:event_Solution_Sources_jListValueChanged

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated

    }//GEN-LAST:event_formWindowActivated

    private void formWindowDeactivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowDeactivated
//this.save();

    }//GEN-LAST:event_formWindowDeactivated

    private void Selected_Causes_jListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_Selected_Causes_jListValueChanged
    if (this.problem!=null && this.problem.getReason()!=null)

         if (this.Selected_Causes_jList.getSelectedIndex()>=0)
                this.cause=(String) this.problem.getReason().getCause(this.Selected_Causes_jList.getSelectedIndex());

    }//GEN-LAST:event_Selected_Causes_jListValueChanged

    private void Selected_Solution_Evidences_jListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_Selected_Solution_Evidences_jListValueChanged
    if (this.problem!=null && this.problem.getReason()!=null)
         if (this.Selected_Solution_Evidences_jList.getSelectedIndex()>=0)
             this.solutionEvidence= this.problem.getSolution().getEvidence(
                this.Selected_Solution_Evidences_jList.getSelectedIndex());

    }//GEN-LAST:event_Selected_Solution_Evidences_jListValueChanged

    private void Justification_Sources_jListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_Justification_Sources_jListValueChanged
    if (Global.project !=null &&  Global.project.getSources()!=null &&
        Global.project.getSources().getSourcesList().size()>0)
     if (this.Justification_Sources_jList.getSelectedIndex()>=0)

         this.justificationEvidence=(Source) Global.project.getSources().
                 getSourcesList().get(this.Justification_Sources_jList.getSelectedIndex());


    }//GEN-LAST:event_Justification_Sources_jListValueChanged

    private void Selected_Justification_Sources_jListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_Selected_Justification_Sources_jListValueChanged
    if (this.performedActivity!=null && this.performedActivity.getJustification()!=null)
         if (this.Selected_Justification_Sources_jList.getSelectedIndex()>=0)
         this.justificationEvidence= this.performedActivity.getJustification().
           getEvidence(this.Selected_Justification_Sources_jList.getSelectedIndex());

    }//GEN-LAST:event_Selected_Justification_Sources_jListValueChanged

    private void Selected_Resources_jListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_Selected_Resources_jListValueChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_Selected_Resources_jListValueChanged

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
//    System.runFinalization();
    System.gc();
    }//GEN-LAST:event_formWindowClosed

    private void Performer_Validate_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Performer_Validate_jButtonActionPerformed
    Performer_IsValid_jCheckBox.setSelected(true);
     this.save_performerValidation();

    }//GEN-LAST:event_Performer_Validate_jButtonActionPerformed

    private void Performer_Invalidate_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Performer_Invalidate_jButtonActionPerformed
    Performer_IsValid_jCheckBox.setSelected(false);
    this.save_performerValidation();
    }//GEN-LAST:event_Performer_Invalidate_jButtonActionPerformed

    private void Resource_Validate_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Resource_Validate_jButtonActionPerformed
    Resources_IsValid_jCheckBox.setSelected(true);
    this.save_resourcesValidation();
    }//GEN-LAST:event_Resource_Validate_jButtonActionPerformed

    private void Resource_Invalidate_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Resource_Invalidate_jButtonActionPerformed
    Resources_IsValid_jCheckBox.setSelected(false);
    this.save_resourcesValidation();
    }//GEN-LAST:event_Resource_Invalidate_jButtonActionPerformed

    private void Justification_Validate_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Justification_Validate_jButtonActionPerformed
    Justification_IsValid_jCheckBox.setSelected(true);
    this.save_justificationValidation();
    }//GEN-LAST:event_Justification_Validate_jButtonActionPerformed

    private void Justification_Invalidate_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Justification_Invalidate_jButtonActionPerformed
    Justification_IsValid_jCheckBox.setSelected(false);
    this.save_justificationValidation();
    }//GEN-LAST:event_Justification_Invalidate_jButtonActionPerformed

    private void Problem_Validate_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Problem_Validate_jButtonActionPerformed
    Problems_IsValid_jCheckBox.setSelected(true);
    this.save_problemsValidation();
    }//GEN-LAST:event_Problem_Validate_jButtonActionPerformed

    private void Problem_Invalidate_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Problem_Invalidate_jButtonActionPerformed
     Problems_IsValid_jCheckBox.setSelected(false);
     this.save_problemsValidation();
    }//GEN-LAST:event_Problem_Invalidate_jButtonActionPerformed

    private void Outcome_Validate_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Outcome_Validate_jButtonActionPerformed
    Outcome_IsValid_jCheckBox.setSelected(true);
    this.save_outcomeValidation();
    }//GEN-LAST:event_Outcome_Validate_jButtonActionPerformed

    private void Outcome_Invalidate_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Outcome_Invalidate_jButtonActionPerformed
     Outcome_IsValid_jCheckBox.setSelected(false);
     this.save_outcomeValidation();
    }//GEN-LAST:event_Outcome_Invalidate_jButtonActionPerformed

    private void Plan_Validate_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Plan_Validate_jButtonActionPerformed
    Activity_IsValid_jCheckBox.setSelected(true);
    this.save_activityValidation();
    }//GEN-LAST:event_Plan_Validate_jButtonActionPerformed

    private void Plan_Invalidate_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Plan_Invalidate_jButtonActionPerformed
    Activity_IsValid_jCheckBox.setSelected(false);
    this.save_activityValidation();
    }//GEN-LAST:event_Plan_Invalidate_jButtonActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        if (Global.currentPhase.getName().equals("Objectives Definition"))
            new ObjectivesDefinitionForm().setVisible(true);
        else if (Global.currentPhase.getName().equals("Data Pre-Processing"))
            new DataPreProcessingForm().setVisible(true);
        else if (Global.currentPhase.getName().equals("Data Exploration"))
            new DataExplorationForm().setVisible(true);
        else if (Global.currentPhase.getName().equals("Data Acclimatisation"))
            new DataAcclimatisationForm().setVisible(true);
        else if (Global.currentPhase.getName().equals("Technique Selection"))
            new TechniqueSelectionForm().setVisible(true);
        else if (Global.currentPhase.getName().equals("Model Building"))
            new ModelBuildingForm().setVisible(true);
        else if (Global.currentPhase.getName().equals("Model Evaluation"))
            new ModelEvaluationForm().setVisible(true);
        else if (Global.currentPhase.getName().equals("Knowledge Presentation"))
            new KnowledgePresentationForm().setVisible(true);
        else if (Global.currentPhase.getName().equals("Knowledge Evaluation"))
            new KnowledgeEvaluationForm().setVisible(true);
        else if (Global.currentPhase.getName().equals("Deployment"))
            new DeploymentForm().setVisible(true);
        else if (Global.currentPhase.getName().equals("Process Evaluation"))
            new ProcessEvaluationForm().setVisible(true);
}//GEN-LAST:event_jButton5ActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
this.save_validation();
this.save();
    }//GEN-LAST:event_formWindowClosing

    
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new ValidatingForm().setVisible(true);
            }
        });
    }


//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
//                       Get Planned Objectives Model
//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC

public  DefaultComboBoxModel getPlanModel()
{
  DefaultComboBoxModel dcm=null;
  ArrayList<Plan> planList=new ArrayList<Plan>();
  String[] planArrayNames = null;
  if (Global.currentPhase!=null&&Global.currentPhase.getPlanning()!=null)
  {
    if ( Global.currentPhase.getPlanning().getPlanList().size()>0)
      {
        planList=Global.currentPhase.getPlanning().getPlanList();
        int size=planList.size();
        planArrayNames = new String[size];
        int i=0;
        for (Object o:planList)
            {
              Plan thisPlan=(Plan) o;
              planArrayNames[i]=thisPlan.getDescription();
              i=i+1;
             }
        dcm=new DefaultComboBoxModel(planArrayNames);
        return dcm;
        }
     else
      {
        String names[] ={"<No plan available>"};
        dcm=new DefaultComboBoxModel(names);
        return dcm;
      }
  }
 else
    {
    String names[] ={"<No plan available>"};
    dcm=new DefaultComboBoxModel(names);
     return dcm;
    }
 }

//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
//                       Get Project Resources Model
//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
public  DefaultComboBoxModel getProjectResourcesModel()
{
  DefaultComboBoxModel dcm=null;
  ArrayList<Resource> resourcesList=new ArrayList<Resource>();
  String[] resourcesArrayNames = null;
  if (Global.project!=null
          && Global.project.getSupplements()!=null
          && Global.project.getSupplements().getManagement()!=null )
  {
      if (  Global.project.getSupplements().getManagement().getResources()!=null
              && Global.project.getSupplements().getManagement().getResources().getResourcesList().size()>0)
      {
        resourcesList=Global.project.getSupplements().getManagement().getResources().getResourcesList();
        int size=resourcesList.size();
        resourcesArrayNames = new String[size];
        int i=0;
        for (Object o:resourcesList)
            {
              Resource thisResource=(Resource) o;
              String result="";
              if (thisResource!=null && thisResource.getResourceType()!=null)
                  result=thisResource.getResourceType().toString()+"  ";
              if (thisResource!=null && thisResource.getDescription()!=null)
                   result=result+ thisResource.getDescription();
              resourcesArrayNames[i]=result;
              i=i+1;
             }
        dcm=new DefaultComboBoxModel(resourcesArrayNames);
        return dcm;
        }
     else
      {
        String names[] ={"<No resources available>"};
        dcm=new DefaultComboBoxModel(names);
        return dcm;
      }
  }
 else
    {
    String names[] ={"<No resources available>"};
    dcm=new DefaultComboBoxModel(names);
     return dcm;
    }
 }

//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
//                       Get Planned Resources Model
//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
public  DefaultComboBoxModel getSelectedResourcesModel()
{
  DefaultComboBoxModel dcm=null;
  ArrayList<Resource> resourcesList=new ArrayList<Resource>();
  String[] resourcesArrayNames = null;
  if ( this.performedActivity!=null && this.performedActivity.getResources()!=null )
  {
      if (this.performedActivity.getResources().getResourcesList().size()>0)
      {
        resourcesList=this.performedActivity.getResources().getResourcesList();
        int size=resourcesList.size();
        resourcesArrayNames = new String[size];
        int i=0;
        for (Object o:resourcesList)
            {
              Resource thisResource=(Resource) o;
              String result="";
              if (thisResource!=null && thisResource.getResourceType()!=null)
                  result=thisResource.getResourceType().toString()+"  ";
              if (thisResource!=null && thisResource.getDescription()!=null)
                   result=result+ thisResource.getDescription();
              resourcesArrayNames[i]=result;
              i=i+1;
             }
        dcm=new DefaultComboBoxModel(resourcesArrayNames);
        return dcm;
        }
     else
      {
        String names[] ={"<No selected resources yet>"};
        dcm=new DefaultComboBoxModel(names);
        return dcm;
      }
  }
 else
    {
    String names[] ={"<No selected resources yet>"};
    dcm=new DefaultComboBoxModel(names);
     return dcm;
    }
 }


//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
//                       Get Planned Resources Model
//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
public  DefaultComboBoxModel getPlannedResourcesModel()
{
  DefaultComboBoxModel dcm=null;
  ArrayList<Resource> resourcesList=new ArrayList<Resource>();
  String[] resourcesArrayNames = null;
  if ( this.plan !=null && this.plan.getResources()!=null )
  {
      if (this.plan.getResources().getResourcesList().size()>0)
      {
        resourcesList=this.plan.getResources().getResourcesList();
        int size=resourcesList.size();
        resourcesArrayNames = new String[size];
        int i=0;
        for (Object o:resourcesList)
            {
              Resource thisResource=(Resource) o;
              String result="";
              if (thisResource!=null && thisResource.getResourceType()!=null)
                  result=thisResource.getResourceType().toString()+"  ";
              if (thisResource!=null && thisResource.getDescription()!=null)
                   result=result+ thisResource.getDescription();
              resourcesArrayNames[i]=result;
              i=i+1;
             }
        dcm=new DefaultComboBoxModel(resourcesArrayNames);
        return dcm;
        }
     else
      {
        String names[] ={"<No planned resources available>"};
        dcm=new DefaultComboBoxModel(names);
        return dcm;
      }
  }
 else
    {
    String names[] ={"<No planned resources available>"};
    dcm=new DefaultComboBoxModel(names);
     return dcm;
    }
 }

//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
//                       Get Analyst Model
//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC

public  DefaultComboBoxModel getAnalystsModel()
{
  DefaultComboBoxModel dcm=null;
  ArrayList<Analyst> analystsList=new ArrayList<Analyst>();
  String[] analystArrayNames = null;
  if (Global.project!=null&&Global.project.getSupplements()!=null
          && Global.project.getSupplements().getHumanInteraction()!=null )
  {
      if (  Global.project.getSupplements().getHumanInteraction().getAnalystsList().size()>0)
      {
        analystsList=Global.project.getSupplements().getHumanInteraction().getAnalystsList();
        int size=analystsList.size();
        analystArrayNames = new String[size];
        int i=0;
        for (Object o:analystsList)
            {
              Analyst visitedAnalyst=(Analyst) o;
              analystArrayNames[i]=
                      visitedAnalyst.getRole()+", " +visitedAnalyst.getLevel()+
                      "["+visitedAnalyst.getName()+", "+ visitedAnalyst.getContactDetails()+"]";
              i=i+1;
             }
        dcm=new DefaultComboBoxModel(analystArrayNames);
        return dcm;
        }
     else
      {
        String names[] ={"<No analyst available yet>"};
        dcm=new DefaultComboBoxModel(names);
        return dcm;
      }
  }
 else
    {
    String names[] ={"<No analyst available yet>"};
    dcm=new DefaultComboBoxModel(names);
     return dcm;
    }
 }

//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
//                       Get Project Resources Model
//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
public  DefaultComboBoxModel getSourcesModel()
{
  DefaultComboBoxModel dcm=null;
  ArrayList<Source> sourcesList=new ArrayList<Source>();
  String[] sourcesArrayNames = null;
  if (Global.project!=null && Global.project.getSources()!=null)
  {
      if ( Global.project.getSources().getSourcesList().size()>0)
      {
        sourcesList=Global.project.getSources().getSourcesList();
        int size=sourcesList.size();
        sourcesArrayNames = new String[size];
        int i=0;
        for (Object o:sourcesList)
            {
            String result="";
             if (o.getClass().getSimpleName().equals("InternalSource"))
              {
                  InternalSource thisSource=(InternalSource) o;
                  result=thisSource.toString();
              }
              else if (o.getClass().getSimpleName().equals("ExternalSource"))
              {
                  ExternalSource thisSource=(ExternalSource) o;
                  result=thisSource.toString();
              }
              else if (o.getClass().getSimpleName().equals("HumanSource"))
              {
                  HumanSource thisSource=(HumanSource) o;
                  result=thisSource.toString();
              }
              sourcesArrayNames[i]=result;
              i=i+1;
              //--------------------------------------------------------------
             }
        dcm=new DefaultComboBoxModel(sourcesArrayNames);
        return dcm;
        }
     else
      {
        String names[] ={"<No sources available>"};
        dcm=new DefaultComboBoxModel(names);
        return dcm;
      }
  }
 else
    {
    String names[] ={"<No sources available>"};
    dcm=new DefaultComboBoxModel(names);
     return dcm;
    }
 }

//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
//                       Get Project Resources Model
//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
public  DefaultComboBoxModel getSelectedSolutionEvidencesModel()
{
  DefaultComboBoxModel dcm=null;
  ArrayList<Source> selectedEvidencesList=new ArrayList<Source>();
  String[] sourcesArrayNames = null;
  if (this.solution!=null)
  {
      if ( this.solution.getEvidencesList().size()>0)
      {
        selectedEvidencesList=this.solution.getEvidencesList();
        int size=selectedEvidencesList.size();
        sourcesArrayNames = new String[size];
        int i=0;
        for (Object o:selectedEvidencesList)
            {
              String result="";
             if (o.getClass().getSimpleName().equals("InternalSource"))
              {
                  InternalSource thisSource=(InternalSource) o;
                  result=thisSource.toString();
              }
              else if (o.getClass().getSimpleName().equals("ExternalSource"))
              {
                  ExternalSource thisSource=(ExternalSource) o;
                  result=thisSource.toString();
              }
              else if (o.getClass().getSimpleName().equals("HumanSource"))
              {
                  HumanSource thisSource=(HumanSource) o;
                  result=thisSource.toString();
              }

              sourcesArrayNames[i]=result;
              i=i+1;
              //--------------------------------------------------------------
             }
        dcm=new DefaultComboBoxModel(sourcesArrayNames);
        return dcm;
        }
     else
      {
        String names[] ={"<No evidences selected yet>"};
        dcm=new DefaultComboBoxModel(names);
        return dcm;
      }
  }
 else
    {
    String names[] ={"<No resources are available>"};
    dcm=new DefaultComboBoxModel(names);
     return dcm;
    }
 }



//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
//                       Get Project Resources Model
//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
public  DefaultComboBoxModel getSelectedJustificationEvidencesModel()
{
  DefaultComboBoxModel dcm=null;
  ArrayList<Source> selectedJustificationEvidencesList=new ArrayList<Source>();
  String[] justificationArrayNames = null;
  if (this.justification!=null)
  {
      if (this.justification.getEvidencesList().size()>0)
      {
        selectedJustificationEvidencesList=this.justification.getEvidencesList();
        int size=selectedJustificationEvidencesList.size();
        justificationArrayNames = new String[size];
        int i=0;
        for (Object o:selectedJustificationEvidencesList)
            {
              String result="";
             if (o.getClass().getSimpleName().equals("InternalSource"))
              {
                  InternalSource thisSource=(InternalSource) o;
                  result=thisSource.toString();
              }
              else if (o.getClass().getSimpleName().equals("ExternalSource"))
              {
                  ExternalSource thisSource=(ExternalSource) o;
                  result=thisSource.toString();
              }
              else if (o.getClass().getSimpleName().equals("HumanSource"))
              {
                  HumanSource thisSource=(HumanSource) o;
                  result=thisSource.toString();
              }
              justificationArrayNames[i]=result;
              i=i+1;
             }
        dcm=new DefaultComboBoxModel(justificationArrayNames);
        return dcm;
        }
     else
      {
        String names[] ={"<No causes traced yest>"};
        dcm=new DefaultComboBoxModel(names);
        return dcm;
      }
  }
 else
    {
    String names[] ={"<No reasons recorded yet>"};
    dcm=new DefaultComboBoxModel(names);
     return dcm;
    }
 }

//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
//                       Get Project Resources Model
//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
public  DefaultComboBoxModel getSelectedCausesModel()
{
  DefaultComboBoxModel dcm=null;
  ArrayList<String> selectedCausesList=new ArrayList<String>();
  String[] causesArrayNames = null;
  if (this.reason!=null)
  {
      if (this.reason.getCausesList().size()>0)
      {
        selectedCausesList=this.reason.getCausesList();
        int size=selectedCausesList.size();
        causesArrayNames = new String[size];
        int i=0;
        for (Object o:selectedCausesList)
            {
              //--------------------------------------------------------------
              String thisCause=(String) o;
              //--------------------------------------------------------------
              causesArrayNames[i]=thisCause;
              i=i+1;
              //--------------------------------------------------------------
             }
        dcm=new DefaultComboBoxModel(causesArrayNames);
        return dcm;
        }
     else
      {
        String names[] ={"<No causes traced yest>"};
        dcm=new DefaultComboBoxModel(names);
        return dcm;
      }
  }
 else
    {
    String names[] ={"<No reasons recorded yet>"};
    dcm=new DefaultComboBoxModel(names);
     return dcm;
    }
 }


//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//                       Reusable in Performed
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
//                       Get Project Resources Model
//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
public  DefaultComboBoxModel getResourcesModel()
{
  DefaultComboBoxModel dcm=null;
  ArrayList<Resource> resourcesList=new ArrayList<Resource>();
  String[] resourcesArrayNames = null;
  if (Global.project!=null
          && Global.project.getSupplements()!=null
          && Global.project.getSupplements().getManagement()!=null )
  {
      if (  Global.project.getSupplements().getManagement().getResources()!=null
              && Global.project.getSupplements().getManagement().getResources().getResourcesList().size()>0)
      {
        resourcesList=Global.project.getSupplements().getManagement().getResources().getResourcesList();
        int size=resourcesList.size();
        resourcesArrayNames = new String[size];
        int i=0;
        for (Object o:resourcesList)
            {
              Resource thisResource=(Resource) o;
              String result="";
              if (thisResource!=null && thisResource.getResourceType()!=null)
                  result=thisResource.getResourceType().toString()+"  ";
              if (thisResource!=null && thisResource.getDescription()!=null)
                   result=result+ thisResource.getDescription();
              resourcesArrayNames[i]=result;
              i=i+1;
             }
        dcm=new DefaultComboBoxModel(resourcesArrayNames);
        return dcm;
        }
     else
      {
        String names[] ={"<No resources are available>"};
        dcm=new DefaultComboBoxModel(names);
        return dcm;
      }
  }
 else
    {
    String names[] ={"<No resources are available>"};
    dcm=new DefaultComboBoxModel(names);
     return dcm;
    }
 }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox Activity_IsValid_jCheckBox;
    private javax.swing.JDesktopPane Activity_Validation_jDesktopPane;
    private javax.swing.JTextPane Activity_Validation_jTextPane;
    private javax.swing.JTextArea Analyst_Contacts_jTextArea;
    private javax.swing.JComboBox Analyst_Level_jComboBox;
    private javax.swing.JTextField Analyst_Name_jTextField;
    private javax.swing.JComboBox Analyst_Role_jComboBox;
    private javax.swing.JList Analysts_jList;
    private javax.swing.JDesktopPane Control_jDesktopPane;
    private javax.swing.JDesktopPane Control_jDesktopPane1;
    private javax.swing.JButton First_jButton;
    private javax.swing.JButton Justification_Invalidate_jButton;
    private javax.swing.JCheckBox Justification_IsValid_jCheckBox;
    private javax.swing.JDesktopPane Justification_Source_jDesktopPane;
    private javax.swing.JList Justification_Sources_jList;
    private javax.swing.JButton Justification_Validate_jButton;
    private javax.swing.JDesktopPane Justification_Validation_jDesktopPane;
    private javax.swing.JTextPane Justification_Validation_jTextPane;
    private javax.swing.JTextPane Justification_jTextPane;
    private javax.swing.JButton Last_jButton;
    private javax.swing.JButton Next_jButton;
    private javax.swing.JButton Outcome_Invalidate_jButton;
    private javax.swing.JCheckBox Outcome_IsValid_jCheckBox;
    private javax.swing.JButton Outcome_Validate_jButton;
    private javax.swing.JDesktopPane Outcome_Validation_jDesktopPane;
    private javax.swing.JTextPane Outcome_Validation_jTextPane;
    private javax.swing.JLabel PerformedActivityDuration_jLabel;
    private javax.swing.JTextField PerformedActivity_Duration_jTextField;
    private javax.swing.JPanel Performed_Plan_jPanel;
    private javax.swing.JPanel Performed_Plan_jPanel1;
    private javax.swing.JPanel Performed_Plan_jPanel2;
    private javax.swing.JButton Performer_Invalidate_jButton;
    private javax.swing.JCheckBox Performer_IsValid_jCheckBox;
    private javax.swing.JButton Performer_Validate_jButton;
    private javax.swing.JDesktopPane Performer_Validation_jDesktopPane;
    private javax.swing.JTextPane Performer_Validation_jTextPane;
    private javax.swing.JDesktopPane Performing_Customised_info_jDesktopPane1;
    private javax.swing.JTabbedPane Performing_Details_TabbedPane;
    private javax.swing.JDesktopPane Performing_Details_jDesktopPane_jDesktopPane;
    private javax.swing.JLabel Performing_JustificationDescription_jLabel1;
    private javax.swing.JLayeredPane Performing_Justification_jLayeredPane;
    private javax.swing.JDesktopPane Performing_Outcome_jDesktopPane;
    private javax.swing.JLayeredPane Performing_Outcome_jLayeredPane;
    private javax.swing.JLabel Performing_PerformedActivityDuration_jLabel1;
    private javax.swing.JTextField Performing_PerformedActivityDuration_jTextField1;
    private javax.swing.JLayeredPane Performing_Performer_jDesktopPane;
    private javax.swing.JDesktopPane Performing_Performer_jDesktopPane1;
    private javax.swing.JDesktopPane Performing_Problem_Control_jDesktopPane;
    private javax.swing.JButton Performing_Problem_Next_jButton;
    private javax.swing.JButton Performing_Problem_Previous_jButton;
    private javax.swing.JDesktopPane Performing_Problem_jDesktopPane;
    private javax.swing.JLayeredPane Performing_Problem_jLayeredPane;
    private javax.swing.JLabel Performing_ValidationJustificationResult_jLabel1;
    private javax.swing.JLabel Performing_ValidationOutcomeResult_jLabel1;
    private javax.swing.JLabel Performing_ValidationPerformerResult_jLabel;
    private javax.swing.JLabel Performing_ValidationPlanResult_jLabel;
    private javax.swing.JLabel Performing_ValidationProblemResult_jLabel;
    private javax.swing.JLabel Performing_ValidationResourceResult_jLabel1;
    private javax.swing.JLayeredPane Performing_jLayeredPane;
    private javax.swing.JButton Plan_Invalidate_jButton;
    private javax.swing.JButton Plan_Validate_jButton;
    private javax.swing.JList Planned_Resources_jList;
    private javax.swing.JLabel Planning_CustomisedPlanItem_jLabel;
    private javax.swing.JLabel Planning_CustomisedPlanSubItem_jLabel;
    private javax.swing.JDesktopPane Planning_CustomisedPlan_jDesktopPane;
    private javax.swing.JTextPane Planning_Customised_Description_jTextPane;
    private javax.swing.JCheckBox Planning_Customised_Optional_jCheckBox;
    private javax.swing.JCheckBox Planning_Customised_SubPlanItem_jCheckBox;
    private javax.swing.JTextPane Planning_Customised_SubPlanItem_jTextPane;
    private javax.swing.JCheckBox Planning_Performed_jCheckBox;
    private javax.swing.JLabel Planning_Planner_Contacts_jLabel;
    private javax.swing.JLabel Planning_Planner_Level_jLabel;
    private javax.swing.JLabel Planning_Planner_Name_jLabel;
    private javax.swing.JLabel Planning_Planner_Role_jLabel;
    private javax.swing.JDesktopPane Planning_Planner_info_jDesktopPane;
    private javax.swing.JDesktopPane Planning_Planner_jDesktopPane;
    private javax.swing.JButton Planning_Preset_SubPlanItem_Next_jButton;
    private javax.swing.JButton Planning_Preset_SubPlanItem_Previous_jButton;
    private javax.swing.JDesktopPane Planning_Resource_jDesktopPane;
    private javax.swing.JButton Previous_jButton;
    private javax.swing.JButton Problem_Invalidate_jButton;
    private javax.swing.JButton Problem_Validate_jButton;
    private javax.swing.JTextPane Problem_jTextPane;
    private javax.swing.JCheckBox Problems_IsValid_jCheckBox;
    private javax.swing.JDesktopPane Problems_Validation_jDesktopPane;
    private javax.swing.JTextPane Problems_Validation_jTextPane;
    private javax.swing.JTextPane Reason_jTextPane;
    private javax.swing.JButton Refresh_jButton;
    private javax.swing.JLabel Resource_Cost_jLabel;
    private javax.swing.JTextField Resource_Cost_jTextField;
    private javax.swing.JTextArea Resource_Description_jTextArea;
    private javax.swing.JButton Resource_Invalidate_jButton;
    private javax.swing.JLabel Resource_Quantity_jLabel;
    private javax.swing.JTextField Resource_Quantity_jTextField;
    private javax.swing.JComboBox Resource_Type_jComboBox;
    private javax.swing.JLabel Resource_Type_jLabel;
    private javax.swing.JButton Resource_Validate_jButton;
    private javax.swing.JDesktopPane Resource_jDesktopPane;
    private javax.swing.JCheckBox Resources_IsValid_jCheckBox;
    private javax.swing.JDesktopPane Resources_Validation_jDesktopPane;
    private javax.swing.JTextPane Resources_Validation_jTextPane;
    private javax.swing.JList Resources_jList;
    private javax.swing.JList Selected_Causes_jList;
    private javax.swing.JList Selected_Justification_Sources_jList;
    private javax.swing.JList Selected_Resources_jList;
    private javax.swing.JList Selected_Solution_Evidences_jList;
    private javax.swing.JDesktopPane Solution_Source_jDesktopPane;
    private javax.swing.JList Solution_Sources_jList;
    private javax.swing.JDesktopPane Solution_jDesktopPane;
    private javax.swing.JTextPane Solution_jTextPane;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLayeredPane jLayeredPane39;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane15;
    private javax.swing.JScrollPane jScrollPane17;
    private javax.swing.JScrollPane jScrollPane18;
    private javax.swing.JScrollPane jScrollPane19;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane20;
    private javax.swing.JScrollPane jScrollPane23;
    private javax.swing.JScrollPane jScrollPane24;
    private javax.swing.JScrollPane jScrollPane29;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane32;
    private javax.swing.JScrollPane jScrollPane34;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane62;
    private javax.swing.JScrollPane jScrollPane68;
    private javax.swing.JScrollPane jScrollPane69;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JMenuBar menuBar;
    // End of variables declaration                   
   // End of variables declaration//GEN-END:variables


//SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
//****************************************************************************
//                              Save Resource
//****************************************************************************
//SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS

 private void save_activityValidation()
 {
   if (performedActivity!=null)
   {
          
                if (this.performedActivity.getValidations() == null)
                    this.performedActivity.setValidations(new Validating());
                
                if (this.performedActivity.getValidations().getActivityValidation()==null)
                    this.performedActivity.getValidations().setActivityValidation(new Validation());
                
                
                this.activityValidation = this.performedActivity.getValidations().getActivityValidation().clone();
               
                this.activityValidation.setType(ValidationType.ACTIVITY);
                this.activityValidation.setValidationCriteria(ValidationType.ACTIVITY.criteria());
                                
                this.activityValidation.setRational(this.Activity_Validation_jTextPane.getText());

                this.activityValidation.setValid(Activity_IsValid_jCheckBox.isSelected());

                if (activityValidation != null) {

                    this.performedActivity.getValidations().setActivityValidation(activityValidation.clone());
                }
               
          

     }
 }


//*************************************************************************
 //*************************************************************************
 //*************************************************************************

 private void save_performerValidation()
 {  
   if (performedActivity!=null)
   {
            
                if (this.performedActivity.getValidations() == null) 
                    this.performedActivity.setValidations(new Validating());

                if (this.performedActivity.getValidations().getPerformerValidation()==null)
                    this.performedActivity.getValidations().setPerformerValidation(new Validation());
                
                this.performerValidation = this.performedActivity.getValidations().getPerformerValidation().clone();

                this.performerValidation.setType(ValidationType.PERFORMER);
                this.performerValidation.setValidationCriteria(ValidationType.PERFORMER.criteria());                                
                
                this.performerValidation.setRational(this.Performer_Validation_jTextPane.getText());
                
                this.performerValidation.setValid(Performer_IsValid_jCheckBox.isSelected());

                if (performerValidation != null) 
                 this.performedActivity.getValidations().setPerformerValidation(performerValidation.clone());


     }
 }


//*************************************************************************
 //*************************************************************************
 //*************************************************************************
 private void save_resourcesValidation()
 {
   if (performedActivity!=null)
   {    
                if (this.performedActivity.getValidations() == null) 
                    this.performedActivity.setValidations(new Validating());                                
               
                if (this.performedActivity.getValidations().getResourcesValidation()==null)
                    this.performedActivity.getValidations().setResourcesValidation(new Validation());
               
                this.resourcesValidation = this.performedActivity.getValidations().getResourcesValidation().clone();
                
                this.resourcesValidation.setType(ValidationType.RESOURCES);
                this.resourcesValidation.setValidationCriteria(ValidationType.RESOURCES.criteria());                
                
                this.resourcesValidation.setRational(this.Resources_Validation_jTextPane.getText());

                this.resourcesValidation.setValid(Resources_IsValid_jCheckBox.isSelected());
                
                if (resourcesValidation != null)                 
                    this.performedActivity.getValidations().setResourcesValidation(resourcesValidation.clone());                

     }
 }

//*************************************************************************
 //*************************************************************************
 //*************************************************************************
 private void save_justificationValidation()
 {
   if (performedActivity!=null)
   {
    
                if (this.performedActivity.getValidations() == null) 
                    this.performedActivity.setValidations(new Validating());
               
                if (this.performedActivity.getValidations().getJustificationValidation()==null)
                    this.performedActivity.getValidations().setJustificationValidation(new Validation());
                
                this.justificationValidation = this.performedActivity.getValidations().getJustificationValidation().clone();

                this.justificationValidation.setType(ValidationType.JUSTIFICATION);
                this.justificationValidation.setValidationCriteria(ValidationType.JUSTIFICATION.criteria());               
                
                this.justificationValidation.setRational(this.Justification_Validation_jTextPane.getText());
                    
                this.justificationValidation.setValid(Justification_IsValid_jCheckBox.isSelected());
                
                if (justificationValidation != null) 
                
                    this.performedActivity.getValidations().setJustificationValidation(justificationValidation.clone());                

     }
 }

//*************************************************************************
 //*************************************************************************
 //*************************************************************************

 private void save_problemsValidation()
 {
   if (performedActivity!=null)
   {
         
                if (this.performedActivity.getValidations() == null) 
                    this.performedActivity.setValidations(new Validating());

                if (this.performedActivity.getValidations().getProblemsValidation()==null)
                    this.performedActivity.getValidations().setProblemsValidation(new Validation());                
                
                this.problemsValidation = this.performedActivity.getValidations().getProblemsValidation().clone();

                this.problemsValidation.setType(ValidationType.PROBLEMS);
                this.problemsValidation.setValidationCriteria(ValidationType.PROBLEMS.criteria());                

                this.problemsValidation.setRational(this.Problems_Validation_jTextPane.getText());
                
                this.problemsValidation.setValid(Problems_IsValid_jCheckBox.isSelected());
                
                if (problemsValidation != null)
                    this.performedActivity.getValidations().setProblemsValidation(problemsValidation.clone());
                   
     }
 }

 //*************************************************************************
 //*************************************************************************
 //*************************************************************************

 private void save_outcomeValidation()
 {
   if (performedActivity!=null)
   {         
                if (this.performedActivity.getValidations() == null) 
                    this.performedActivity.setValidations(new Validating());
                
                if (this.performedActivity.getValidations().getOutcomeValidation()==null)
                    this.performedActivity.getValidations().setOutcomeValidation(new Validation());                
                
                this.outcomeValidation = this.performedActivity.getValidations().getOutcomeValidation().clone();

                this.outcomeValidation.setType(ValidationType.PROBLEMS);
                this.outcomeValidation.setValidationCriteria(ValidationType.PROBLEMS.criteria());
                
                this.outcomeValidation.setRational(this.Outcome_Validation_jTextPane.getText());

                this.outcomeValidation.setValid(Outcome_IsValid_jCheckBox.isSelected());
                
                if (outcomeValidation != null)                
                    this.performedActivity.getValidations().setOutcomeValidation(outcomeValidation.clone());
                
     }
 }


 //***************************************************************************
 private void save_customised_subPlan()
 {
     if (this.plan!=null && this.customisedPlanItem!=null)
    {
        if(this.customisedSubPlanItem==null)
            this.customisedSubPlanItem= new PlanItem();

        this.customisedSubPlanItem.setDescription(this.Planning_Customised_SubPlanItem_jTextPane.getText());
        this.customisedSubPlanItem.setOptional(this.Planning_Customised_SubPlanItem_jCheckBox.isSelected());
        this.customisedPlanItem.saveSub(this.customisedSubPlanItem);
        this.plan.setCustomisedPlanItem(this.customisedPlanItem);
    }
  
 }



 //RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR
//****************************************************************************
//                              Refresh
//****************************************************************************
//RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR

 private void refresh_performedActivity()
 {

if (Global.currentPhase.getPerforming() != null && Global.currentPhase.getPerforming()!=null &&
    Global.currentPhase.getPerforming().getFirst()!=null)
    {
         this.performedActivity=Global.currentPhase.getPerforming().getFirst();
         this.refresh_performedActivity_details();
    }
    //else
         //System.out.print(" No Plan is available");
}

 //RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR
 //                         Refresh Plan Details
 //RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR

 private void refresh_performedActivity_details()
 {

 if (performedActivity!=null)

  {
     this.plan = this.performedActivity.getPerformedPlan();

     if ( this.plan!=null && this.plan.getCustomisedPlanItem()!=null)
          this.customisedPlanItem=this.plan.getCustomisedPlanItem();

     if ( this.customisedPlanItem!=null && this.customisedPlanItem.getSubPlanList().size()>0 &&
      this.customisedPlanItem.getFirstSub()!=null)
           this.customisedSubPlanItem=this.customisedPlanItem.getFirstSub();
      //--------------------------------------------------------------------
        //                      Refreshing Analyst
        //--------------------------------------------------------------------
        if (this.performedActivity.getPerformer()!=null)
            this.analyst=this.performedActivity.getPerformer();
        //--------------------------------------------------------------------
        //                      Refreshing Resources
        //--------------------------------------------------------------------
        if (this.performedActivity.getResources()!=null)
            this.resource=this.performedActivity.getResources().getFirst();    
        //--------------------------------------------------------------------
        this.Resources_jList.setModel(this.getResourcesModel());
        this.Selected_Resources_jList.setModel(this.getPlannedResourcesModel());

        //--------------------------------------------------------------------
        //                      Refreshing Problem
        //--------------------------------------------------------------------
        if (this.performedActivity.getProblems()!=null)
            this.problem=this.performedActivity.getProblems().getFirst();
        //--------------------------------------------------------------------
        this.Solution_Sources_jList.setModel(this.getSourcesModel());
        this.Selected_Solution_Evidences_jList.setModel(this.getSelectedSolutionEvidencesModel());
        //--------------------------------------------------------------------
        this.Selected_Causes_jList.setModel(this.getSelectedCausesModel());
        
        //--------------------------------------------------------------------
        //                    Refreshing Justification
        //--------------------------------------------------------------------
        if (this.performedActivity.getJustification()!=null)
            this.justification=this.performedActivity.getJustification();
        //--------------------------------------------------------------------
        if (this.justification !=null && this.justification.getEvidencesList().size()>0)
            this.justificationEvidence=this.justification.getFirstEvidence();
        //--------------------------------------------------------------------
        this.Justification_Sources_jList.setModel(this.getSourcesModel());
        this.Selected_Justification_Sources_jList.setModel(this.getSelectedJustificationEvidencesModel());

        //--------------------------------------------------------------------        
        //                       Refreshing Outcome
        //--------------------------------------------------------------------        
        if (this.performedActivity.getOutcome()!=null)
            this.outcome=this.performedActivity.getOutcome();
        //--------------------------------------------------------------------   
        if (this.outcome !=null && this.outcome.getDeliveriesList().size()>0)
            this.delivery=this.outcome.getFirstDelivery();

        this.refresh_validation();
     }

 }

//FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
//****************************************************************************
//                            First & Last Plan
//****************************************************************************
//FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF

 private void first_performedActivity()
    {
     if (Global.currentPhase.getPerforming()!=null)
     {
         this.save_validation();
         this.clear_performedActivity_details();
         this.performedActivity=Global.currentPhase.getPerforming().getFirst();         
         this.refresh_performedActivity_details();         
         this.populate_performedPlan();
      }

       // this.refresh_Resource(this.thisResource);
 }

 //****************************************************************************
 private void last_performedActivity()
 {
    if (Global.currentPhase.getPerforming()!=null)
    {
        this.save_validation();
        this.clear_performedActivity_details();
        this.performedActivity=Global.currentPhase.getPerforming().getLast();        
        this.refresh_performedActivity_details();        
        this.populate_performedPlan();
  }

     //   this.refresh_Resource(this.thisResource);
 }


//NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
//****************************************************************************
//                                Next Plan
//****************************************************************************
//NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
 private void next_performedActivity()
    {
      if(Global.currentPhase.getPerforming()!=null)
        {
            if (this.performedActivity!=null)
            {
                if (Global.currentPhase.getPerforming().getNext(this.performedActivity)!=null)
                {
                    this.save_validation();
                    this.clear_performedActivity_details();                    
                    this.performedActivity=Global.currentPhase.getPerforming().getNext(this.performedActivity);
                    this.refresh_performedActivity_details();                    
                    this.populate_performedPlan();
                }
            }
        }
        //else
            //System.out.print("No Phase Performing is found ");
    }


 private void save_validation()
    {
     this.save_activityValidation();
     this.save_customised_subPlan();
     this.save_justificationValidation();
     this.save_outcomeValidation();
     this.save_performerValidation();
     this.save_problemsValidation();
     this.save_resourcesValidation();
 }

 
 private void save()
    {
     if (this.performedActivity!=null)
     {
         if (Global.currentPhase.getPerforming()!=null)
             Global.currentPhase.getPerforming().save(performedActivity);
      
       Global.currentPhase.setValidating(new Validating("Validation is performed for each performeed activity,\n"
                                                        + "See performing for more details"));
//    Global.currentPhase.store(null);
      Global.currentPhase.save();
      
     }          
 }

//PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
//****************************************************************************
//                     Previous Plan& Resource
//****************************************************************************
//PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
  private void previous_performedActivity()
    {
      if(Global.currentPhase.getPerforming()!=null)
        {
            if (this.performedActivity!=null)
            {
                if (Global.currentPhase.getPerforming().getPrevious(this.performedActivity)!=null)
                {
                    this.save_validation();
                    this.clear_performedActivity_details();                    
                    this.performedActivity=Global.currentPhase.getPerforming().getPrevious(this.performedActivity);
                    this.refresh_performedActivity_details();                    
                    this.populate_performedPlan();
                }
            }
        }
        //else
            //System.out.print("No Phase Performing is found ");

    }



//NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
//****************************************************************************
//                                Next problem
//****************************************************************************
//NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
 private void next_problem()
    {
      if(this.performedActivity!=null && this.performedActivity.getProblems()!=null)
      {
            if (this.problem!=null)
              this.problem=this.performedActivity.getProblems().getNext(this.problem);
            else
              this.problem=this.performedActivity.getProblems().getFirst();

            this.refresh_problem_details();
            this.populate_problem();
            this.populateForm();
       }
        //else
            //System.out.print("No Phase problem yet!");
    }



//PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
//****************************************************************************
//                    Previous Problem
//****************************************************************************
//PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP

 private void previous_problem()
    {
      if(this.performedActivity!=null && this.performedActivity.getProblems()!=null)
      {
            if (this.problem!=null)
              this.problem=this.performedActivity.getProblems().getPrevious(this.problem);
            else
              this.problem=this.performedActivity.getProblems().getLast();

            this.refresh_problem_details();
            this.populate_problem();
            this.populateForm();
       }
       //else
            //System.out.print("No Phase problem yet!");
    }


//CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
//****************************************************************************
//                     Clear Performed Activity
//****************************************************************************
 //CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

 private void clear_performedActivity()
{
     this.performedActivity= new PerformedActivity();
     //     
     this.plan=new Plan();
     //
     this.customisedPlanItem=null;
     this.customisedSubPlanItem=null;
     //
     this.Performed_Plan_jPanel.setLocation(430, 10);     
//     this.Plan_jList.setVisible(true);
     //this.Select_jButton.setVisible(true);
     //
     this.clear_performedActivity_details();
     //
     this.clear_PerformedPlanForm();

 }
//CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
//****************************************************************************
//                     Clear Performed Activity Details
//****************************************************************************
 //CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

 private void clear_performedActivity_details()
{     
     this.plan=null;
     //
     this.clear_customised_subPlan();
     //
     this.justification=null;
     //
     this.justificationEvidence=null;
     //
     this.clear_resource();
     //
     this.clear_problem();
     //
     this.clear_analyst();
     //
     //
     this.clear_validation();
     //     
     this.populate_performedPlan();// another way to clear the form using the build in else statments in populate form
 }




 //CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
 //                              Clear Problem
 //CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
 private void clear_problem( )
{
     this.clear_problemForm();
     this.problem=null;
     this.solution=null;
     this.solutionEvidence=null;
     this.reason=null;
     this.clear_problemForm();
 }

 //CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
 //                              Clear Problem Form
 //CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
  private void clear_problemForm()
{
     //--------------------------------------------------------------------
     this.Selected_Solution_Evidences_jList.setSelectionBackground(Color.white);
     this.Solution_Sources_jList.setSelectionBackground(Color.white);
     this.Selected_Causes_jList.setSelectionBackground(Color.white);
     //--------------------------------------------------------------------
     this.Problem_jTextPane.setText("");
     //--------------------------------------------------------------------
     this.Reason_jTextPane.setText("");
     //--------------------------------------------------------------------
     this.Solution_jTextPane.setText("");
     //--------------------------------------------------------------------
     this.Resource_Type_jComboBox.setSelectedIndex(0);
     //--------------------------------------------------------------------
     String evidencesNames[] ={""};
     this.Selected_Solution_Evidences_jList.setModel(new DefaultComboBoxModel(evidencesNames));
     this.Selected_Solution_Evidences_jList.setSelectedValue(null,false);
     //--------------------------------------------------------------------
     String reasonsNames[] ={""};
     this.Selected_Causes_jList.setModel(new DefaultComboBoxModel(reasonsNames));
     this.Selected_Causes_jList.setSelectedValue(null,false);
 }


 //CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
 //                              Clear Analyst
 //CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
 private void clear_analyst( )
{
     this.clear_analystForm();
     this.analyst=null;

     this.Analysts_jList.setModel(this.getAnalystsModel());
     this.Analysts_jList.setSelectedValue(null,false);
 }
 private void clear_analystForm()
{
     this.Analyst_Name_jTextField.setText("");
     this.Analyst_Contacts_jTextArea.setText("");
     this.Analyst_Role_jComboBox.setSelectedIndex(0);
     this.Analyst_Level_jComboBox.setSelectedIndex(0);
 }


//CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
//                              Clear thisResource
//CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
private void clear_resource( )
{
     this.clear_resourceForm();
     this.resource=null;
 }
//PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
//****************************************************************************
//                             Populate
//****************************************************************************
//PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP

private void populateForm()
{
            this.repaint();
            this.pack();
 }


//PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
//                         Populate Plan Form
//PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
 private void populate_performedPlan()
{
if (this.plan!=null)
     {                 
         if (this.customisedPlanItem!=null && this.customisedPlanItem.getDescription()!=null)
        {
            this.Planning_Customised_Description_jTextPane.setText(this.customisedPlanItem.getDescription());
            this.Planning_Customised_Optional_jCheckBox.setSelected(this.customisedPlanItem.isOptional());
         }
         else
           this.Planning_Customised_Description_jTextPane.setText("");
         //--------------------------------------------------------------------
         if (this.customisedPlanItem!=null && this.customisedSubPlanItem!=null && this.customisedSubPlanItem.getDescription()!=null)
         {
            this.Planning_Customised_SubPlanItem_jCheckBox.setSelected(customisedSubPlanItem.isOptional());
            this.Planning_Customised_SubPlanItem_jTextPane.setText(this.customisedSubPlanItem.getDescription());
         }
         else
            this.Planning_Customised_SubPlanItem_jTextPane.setText("");
         //-------------------------------------------------------------------- 
         this.Planning_Performed_jCheckBox.setSelected(this.plan.isPerformed());
         
         
         if (this.justification!=null && this.justification.getRational()!=null)
             this.Justification_jTextPane.setText(this.justification.getRational());
         else
             this.Justification_jTextPane.setText("");
         //*********************************************************************
         this.Selected_Justification_Sources_jList.setModel(this.getSelectedJustificationEvidencesModel());
         this.Selected_Resources_jList.setModel(this.getSelectedResourcesModel());
         //*********************************************************************
         this.populate_customised_subplan();
         this.populate_problem();         
         this.populate_resource();
         this.populate_analyst();         
         this.populate_validation();
     }
 //else
 //System.out.print(" No Planned Activity found to populate");


if (performedActivity!=null)
 
    this.PerformedActivity_Duration_jTextField.setText(String.valueOf(this.performedActivity.getDuration()));     
// else
//System.out.print(" No Performed Activity found to populate");

//-----------------------------------------------------------------------------
this.populateForm();
 
}


//PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
//                         Populate Resource Form
//PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
 private void populate_analyst()
{
     this.clear_analystForm();
     if (analyst!=null)
     {
         if (analyst.getName()!=null)
            this.Analyst_Name_jTextField.setText(analyst.getName());
         else
           this.Analyst_Name_jTextField.setText("");
         //--------------------------------------------------------------------
         if (analyst.getContactDetails()!=null)
            this.Analyst_Contacts_jTextArea.setText(analyst.getContactDetails());
         else
           this.Analyst_Contacts_jTextArea.setText("");
         //--------------------------------------------------------------------
         if (analyst.getLevel()!=null)
            this.Analyst_Level_jComboBox.setSelectedIndex(analyst.getLevel().ordinal()+1);
         //--------------------------------------------------------------------
         if (analyst.getRole()!=null)
            this.Analyst_Role_jComboBox.setSelectedIndex(analyst.getRole().ordinal()+1);

     }
  //  else
        //System.out.print(" No Analyst found to populate");
     this.populateForm();
 }

  //RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR
//****************************************************************************
//                              Refresh Resource
//****************************************************************************
//RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR

 private void refresh_problem()
 {
    if (this.performedActivity!=null && this.performedActivity.getProblems()!=null&&
        this.performedActivity.getProblems().getProblemsList().size()>0)
    {
        this.problem = this.performedActivity.getProblems().getFirst();
        this.refresh_problem_details();
        
        this.populate_problem();
    }
    //else
        //System.out.print(" No Resource is available");

}
//****************************************************************************
//****************************************************************************
 private void refresh_problem_details()
{
if (this.problem!=null && this.problem.getSolution()!=null)
    this.solution=this.problem.getSolution();
if (this.problem!=null && this.problem.getReason()!=null)
    this.reason=this.problem.getReason();
//
this.Selected_Causes_jList.setModel(this.getSelectedCausesModel());
//
this.Selected_Solution_Evidences_jList.setModel(this.getSelectedSolutionEvidencesModel());
//
}


//CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
//****************************************************************************
//                     Clear Source Resource & Source
//****************************************************************************
 //CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC


 private void clear_PerformedPlanForm()
{
    //------------------------------------------------------------------------
    this.Planning_Customised_Description_jTextPane.setText("");
    this.Planning_Customised_Optional_jCheckBox.setSelected(false);
    //------------------------------------------------------------------------
    this.Planning_Performed_jCheckBox.setSelected(false);
//    this.Planning_Customised_jCheckBox.setSelected(false);
    //------------------------------------------------------------------------    
    this.clear_resourceForm();
    this.clear_analystForm();
    this.clear_problemForm();
    //------------------------------------------------------------------------
    this.populateForm();
 }

//CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
//****************************************************************************
//                     Clear Resource Form
//****************************************************************************
 //CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

 private void clear_resourceForm()
{
     this.Resource_Cost_jTextField.setText("");
     this.Resource_Quantity_jTextField.setText("");
     this.Resource_Description_jTextArea.setText("");
     this.Resource_Type_jComboBox.setSelectedIndex(0);

     String names[] ={"<No resources selected yet>"};
     this.Selected_Resources_jList.setModel(new DefaultComboBoxModel(names));
     this.Selected_Resources_jList.setSelectionBackground(Color.white);

     this.Resources_jList.setSelectionBackground(Color.white);
     this.Resources_jList.setSelectedValue(null,false);     
     
     this.Planned_Resources_jList.setSelectionBackground(Color.white);
     this.Planned_Resources_jList.setSelectedValue(null,false);


 }
//PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
//                         Populate Resource Form
//PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
 private void populate_problem()
{
     this.clear_problemForm();
     //
     if (this.problem!=null)
     {
         this.Selected_Solution_Evidences_jList.setSelectionBackground(Color.white);
         this.Solution_Sources_jList.setSelectionBackground(Color.white);
         this.Selected_Causes_jList.setSelectionBackground(Color.white);
         //--------------------------------------------------------------------
         if (this.problem.getDescription()!=null)
            this.Problem_jTextPane.setText(this.problem.getDescription());
         else
           this.Problem_jTextPane.setText("");
         //--------------------------------------------------------------------
         if (this.problem.getReason()!=null)
            this.Reason_jTextPane.setText(this.problem.getReason().getExplanation());
         else
             this.Reason_jTextPane.setText("");
        //--------------------------------------------------------------------
        if (this.problem.getSolution()!=null)
            this.Solution_jTextPane.setText(this.problem.getSolution().getDescription());
        else
            this.Solution_jTextPane.setText("");

         this.Selected_Solution_Evidences_jList.setModel(this.getSelectedSolutionEvidencesModel());
         //
         this.Selected_Causes_jList.setModel(this.getSelectedCausesModel());

     }
//else
   //System.out.print(" No Resource found to populate");
    //
    this.Solution_Sources_jList.setModel(this.getSourcesModel());
    this.populateForm();
 }

//PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
//                         Populate Resource Form
//PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
 private void populate_resource()
{
     if (resource!=null)
     {
         this.Resources_jList.setSelectionBackground(Color.white);
         this.Planned_Resources_jList.setSelectionBackground(Color.white);
         this.Selected_Resources_jList.setSelectionBackground(Color.white);
         //--------------------------------------------------------------------
         if (resource.getDescription()!=null)
            this.Resource_Description_jTextArea.setText(resource.getDescription());
         else
           this.Resource_Description_jTextArea.setText("");
         //
         if (resource.getResourceType()!=null)
            this.Resource_Type_jComboBox.setSelectedIndex(resource.getResourceType().ordinal()+1);

         this.Resource_Cost_jTextField.setText(String.valueOf(resource.getCost()));

         this.Resource_Quantity_jTextField.setText(String.valueOf(resource.getQuantiy()));
     // this.Selected_Resources_jList.setSelectedIndex(0);

     }
    // else
    //  //System.out.print(" No Resource found to populate");
    //
    this.Planned_Resources_jList.setModel(this.getPlannedResourcesModel());
    this.populateForm();
 }


 //============================================================================
 private void populate_customised_subplan()
    {
      //--------------------------------------------------------------------
         if (this.customisedPlanItem!=null &&
                 this.customisedSubPlanItem!=null &&
                 this.customisedSubPlanItem.getDescription()!=null)
         {
            this.Planning_Customised_SubPlanItem_jCheckBox.setSelected(customisedSubPlanItem.isOptional());
            this.Planning_Customised_SubPlanItem_jTextPane.setText(this.customisedSubPlanItem.getDescription());
         }
         else
            this.Planning_Customised_SubPlanItem_jTextPane.setText("");
 }

  //CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
 //                         Clear sub Plan Form
 //CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
 //-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
private void clear_customised_subPlanForm()
{
    this.Planning_Customised_SubPlanItem_jTextPane.setText("");
    this.Planning_Customised_SubPlanItem_jCheckBox.setSelected(false);
}
//-----------------------------------------------------------------------------
private void clear_customised_subPlan()
{
       this.customisedSubPlanItem=null;
       clear_customised_subPlanForm();
}

//NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
//****************************************************************************
//                     Next Customised SubPlan
//****************************************************************************
//NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
 private void next_customised_subPlan()
    {
      if(Global.currentPhase.getPlanning()!=null)
        {
            if (this.plan!=null)
            {
                if (this.customisedPlanItem!=null && this.customisedSubPlanItem!=null)
                {
                    this.save_customised_subPlan();
                    this.customisedSubPlanItem=this.customisedPlanItem.getNextSub(customisedSubPlanItem);
                }
                else
                    this.customisedSubPlanItem=this.plan.getCustomisedPlanItem().getLastSub();
                this.populate_customised_subplan();
            }
        }
        //else
            //System.out.print("No Phase PreRequisits is found yet ");
    }


 //NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
//****************************************************************************
//                          Previous Customised SubPlan
//****************************************************************************
//NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
 private void previous_customised_subPlan()
    {
      if(Global.currentPhase.getPlanning()!=null)
        {
            if (this.plan!=null)
            {
                if (this.customisedPlanItem!=null && this.customisedSubPlanItem!=null)
                {
                    this.save_customised_subPlan();
                    this.customisedSubPlanItem=this.customisedPlanItem.getPreviousSub(customisedSubPlanItem);
                }
                else
                    this.customisedSubPlanItem=this.plan.getCustomisedPlanItem().getFirstSub();
               this.populate_customised_subplan();
            }
        }
        //else
            //System.out.print("No Phase PreRequisits is found yet ");
    }


 //RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR
//****************************************************************************
//                              Refresh
//****************************************************************************
//RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR

private void refresh_validation()
{

    if (this.performedActivity!=null)
    {
        if (this.performedActivity.getValidations()!=null)
        {
            this.performerValidation=this.performedActivity.getValidations().getPerformerValidation().clone();
            this.resourcesValidation=this.performedActivity.getValidations().getResourcesValidation().clone();
            this.justificationValidation=this.performedActivity.getValidations().getJustificationValidation().clone();
            this.problemsValidation=this.performedActivity.getValidations().getProblemsValidation().clone();
            this.outcomeValidation=this.performedActivity.getValidations().getOutcomeValidation().clone();
            this.activityValidation=this.performedActivity.getValidations().getActivityValidation().clone();
        }
        
    }
}

 //CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
 //                              Clear validation
 //CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
 private void clear_validation( )
{     
     this.performerValidation=null;
     this.resourcesValidation=null;
     this.justificationValidation=null;
     this.problemsValidation=null;
     this.outcomeValidation=null;
     this.activityValidation=null;
     this.customisedValidation=null;
 }


//PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
//                         Populate Validation
//PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
 private void populate_validation()
{          

     //VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
     if (performerValidation!=null)
     {
         if (performerValidation.getRational()!=null)
            this.Performer_Validation_jTextPane.setText(performerValidation.getRational());
         else
           this.Performer_Validation_jTextPane.setText("");

         this.Performer_IsValid_jCheckBox.setSelected(performerValidation.isValid());
     }
     else
     {
        this.Performer_Validation_jTextPane.setText("");
        this.Performer_IsValid_jCheckBox.setSelected(false);
     }
     //VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
     if (resourcesValidation!=null)
     {
         if (this.resourcesValidation.getRational()!=null)
            this.Resources_Validation_jTextPane.setText(resourcesValidation.getRational());
         else
           this.Resources_Validation_jTextPane.setText("");

         this.Resources_IsValid_jCheckBox.setSelected(resourcesValidation.isValid());
     }
     else
     {
         this.Resources_Validation_jTextPane.setText("");
         this.Resources_IsValid_jCheckBox.setSelected(false);
     }
     //VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
     if (justificationValidation!=null)
     {
         if (justificationValidation.getRational()!=null)
            this.Justification_Validation_jTextPane.setText(justificationValidation.getRational());
         else
           this.Justification_Validation_jTextPane.setText("");

         this.Justification_IsValid_jCheckBox.setSelected(justificationValidation.isValid());
     }
     else
     {
         this.Justification_Validation_jTextPane.setText("");
         this.Justification_IsValid_jCheckBox.setSelected(false);
     }

    //VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
     if (problemsValidation!=null)
     {
         if (problemsValidation.getRational()!=null)
            this.Problems_Validation_jTextPane.setText(problemsValidation.getRational());
         else
           this.Problems_Validation_jTextPane.setText("");
     
         this.Problems_IsValid_jCheckBox.setSelected(problemsValidation.isValid());
     }
     else
     {
         this.Problems_Validation_jTextPane.setText("");
         this.Problems_IsValid_jCheckBox.setSelected(false);
     }


     //VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
     if (outcomeValidation!=null)
     {
         if (outcomeValidation.getRational()!=null)
            this.Outcome_Validation_jTextPane.setText(outcomeValidation.getRational());
         else
           this.Outcome_Validation_jTextPane.setText("");
     
         this.Outcome_IsValid_jCheckBox.setSelected(outcomeValidation.isValid());         
     }
     else
     {
         this.Outcome_Validation_jTextPane.setText("");
         this.Outcome_IsValid_jCheckBox.setSelected(false);
     }

     //VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
     if (activityValidation!=null)
     {
         if (activityValidation.getRational()!=null)
            this.Activity_Validation_jTextPane.setText(activityValidation.getRational());
         else
           this.Activity_Validation_jTextPane.setText("");
     
         this.Activity_IsValid_jCheckBox.setSelected(activityValidation.isValid());         
     }
    else
     {
       this.Activity_Validation_jTextPane.setText("");
       this.Activity_IsValid_jCheckBox.setSelected(false);
     }

     this.populateForm();
 }

}