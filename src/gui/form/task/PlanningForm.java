/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PlanningForm.java
 *
 * Created on 04-Oct-2010, 12:06:33
 */

package gui.form.task;

import global.Global;
import gui.form.supplement.HumanInteractionForm;
import gui.form.supplement.ManagementForm;
import java.awt.Color;
import java.io.File;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import process_model.basic.util.ArrayList;
import process_model.phase.Phase;
import process_model.phase.objective.Objectives;
import process_model.phase.objective.PhaseObjective;
import process_model.phase.stage.planning.Plan;
import process_model.phase.stage.planning.PlanItem;
import process_model.phase.stage.planning.Planning;
import process_model.supplement.human_interaction.Analyst;
import process_model.supplement.management.resource.Resource;
import process_model.supplement.management.resource.Resources;
import toolbox.Tools;

/**
 *
 * @author amb04
 */
public class PlanningForm extends javax.swing.JFrame {
    private Phase phase=null;
    private Plan plan=null; // planning consists of plan
    //private Plan passedPlan=null; // planning consists of plan
    private boolean deactivationFlag=false;
   //
    private PlanItem customisedPlanItem=null;
    private PlanItem customisedSubPlanItem=null;
    private PlanItem presetPlanItem=null;
    private PlanItem presetSubPlanItem=null;    
    private PhaseObjective objective=null;
    private Objectives objectives=null;
    private Resource resource=null;
    private Resources resources=null; 
    private Analyst analyst=null;

    //AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
    private String analystRole[]={"","Data Miner", "Biologist", "Domain Expert",
    "Statistician", "Lab Technician", "Computer Scientist", "Other"};

    private String analystLevel[]={"","Beginner", "Normal", "Professional"};

    private String resourceTypeArray[]={"","Hardware","Software","Human Expertise","Other"};

    private String objectivesTypeArray[]={"","Functional", "Quality Related",
    "Standard Related", "Human Related",
    "Mangment Related", "Other Non-functional"};
    //
    /** Creates new form PlanningForm */
//CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
public PlanningForm() {    
     initComponents();
     //------------------------------------------------------------------------
     if (this.phase==null)
    {
      if (Global.currentPhase!=null)
      {
         if (Global.currentPhase.getPlanning()==null)
             Global.currentPhase.setPlanning(new Planning());
         
         this.phase = Global.currentPhase.clone(true);
       }
      else
          JOptionPane.showMessageDialog(null, "Phase Does Not exists");
    }
     //------------------------------------------------------------------------
     this.refresh_plan();     
     this.populate_plan();
     this.setVisible(true);
     this.setTitle("Phase Planning: "+phase.getTitle());
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Planning_tab_jDesktopPane = new javax.swing.JLayeredPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        Planning_CustomisedPlan_jDesktopPane1 = new javax.swing.JDesktopPane();
        jScrollPane72 = new javax.swing.JScrollPane();
        Planning_Preset_Description_jTextPane = new javax.swing.JTextPane();
        Planning_CustomisedPlanItem_jLabel1 = new javax.swing.JLabel();
        Planning_Preset_Optional_jCheckBox = new javax.swing.JCheckBox();
        Planning_CustomisedPlan_jDesktopPane = new javax.swing.JDesktopPane();
        Planning_CustomisedPlanSubItem_jLabel = new javax.swing.JLabel();
        jScrollPane68 = new javax.swing.JScrollPane();
        Planning_Customised_Description_jTextPane = new javax.swing.JTextPane();
        jScrollPane69 = new javax.swing.JScrollPane();
        Planning_Customised_SubPlanItem_jTextPane = new javax.swing.JTextPane();
        Planning_CustomisedPlanItem_jLabel = new javax.swing.JLabel();
        Planning_Customised_SubPlanItem_Previous_jButton = new javax.swing.JButton();
        Planning_Customised_SubPlanItem_Add_jButton = new javax.swing.JButton();
        Planning_Customised_SubPlanItem_Delete_jButton = new javax.swing.JButton();
        Planning_Customised_SubPlanItem_Next_jButton = new javax.swing.JButton();
        Planning_Customised_Optional_jCheckBox = new javax.swing.JCheckBox();
        Planning_Customised_SubPlanItem_Save_jButton = new javax.swing.JButton();
        Planning_Customised_SubPlanItem_jCheckBox = new javax.swing.JCheckBox();
        jPanel6 = new javax.swing.JPanel();
        storeCustomised_jButton = new javax.swing.JButton();
        openCustomised_jButton = new javax.swing.JButton();
        loadCustomised_jButton = new javax.swing.JButton();
        Planning_Customised_jCheckBox = new javax.swing.JCheckBox();
        Planning_Performed_jCheckBox = new javax.swing.JCheckBox();
        Planning_Details_jDesktopPane = new javax.swing.JDesktopPane();
        Planning_jTabbedPane = new javax.swing.JTabbedPane();
        Planning_Objective_jLayeredPane = new javax.swing.JLayeredPane();
        Planning_Objectives_jDesktopPane = new javax.swing.JDesktopPane();
        Planning_Objective_view_jPanel = new javax.swing.JPanel();
        jScrollPane47 = new javax.swing.JScrollPane();
        Objective_Description_jTextPane = new javax.swing.JTextPane();
        Objective_Type_jComboBox = new javax.swing.JComboBox();
        Planning_Objective_Type_jLabel = new javax.swing.JLabel();
        Objective_Fulfilled_jCheckBox = new javax.swing.JCheckBox();
        Objective_Customised_jCheckBox = new javax.swing.JCheckBox();
        Planning_Objectives_Control_jDesktopPane = new javax.swing.JDesktopPane();
        Planning_Objectives_Select_jButton = new javax.swing.JButton();
        Planning_Objectives_UnSelect_jButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        Selected_Objectives_jList = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        Objectives_jList = new javax.swing.JList();
        jLayeredPane37 = new javax.swing.JLayeredPane();
        Planning_Resource_jDesktopPane = new javax.swing.JDesktopPane();
        Planning_Objectives_Control_jDesktopPane1 = new javax.swing.JDesktopPane();
        Planning_Resources_Select_jButton = new javax.swing.JButton();
        Planning_Resources_UnSelect_jButton = new javax.swing.JButton();
        Resource_jDesktopPane = new javax.swing.JDesktopPane();
        Resource_Cost_jLabel = new javax.swing.JLabel();
        Resource_Type_jLabel = new javax.swing.JLabel();
        Resource_Type_jComboBox = new javax.swing.JComboBox();
        Resource_Cost_jTextField = new javax.swing.JTextField();
        Resource_Quantity_jTextField = new javax.swing.JTextField();
        Resource_Quantity_jLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Resource_Description_jTextArea = new javax.swing.JTextArea();
        Resources_Edit_jButton1 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        Resources_jList = new javax.swing.JList();
        jScrollPane5 = new javax.swing.JScrollPane();
        Selected_Resources_jList = new javax.swing.JList();
        jLayeredPane69 = new javax.swing.JLayeredPane();
        Planning_Planner_jDesktopPane = new javax.swing.JDesktopPane();
        Planning_Planner_info_jDesktopPane = new javax.swing.JDesktopPane();
        Planning_Planner_Name_jLabel = new javax.swing.JLabel();
        Planning_Planner_Contacts_jLabel = new javax.swing.JLabel();
        jScrollPane62 = new javax.swing.JScrollPane();
        Analyst_Contacts_jTextArea = new javax.swing.JTextArea();
        Analyst_Name_jTextField = new javax.swing.JTextField();
        Analyst_Role_jComboBox = new javax.swing.JComboBox();
        Planning_Planner_Level_jLabel = new javax.swing.JLabel();
        Analyst_Level_jComboBox = new javax.swing.JComboBox();
        Planning_Planner_Role_jLabel = new javax.swing.JLabel();
        Performer_edit_jButton = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        Analysts_jList = new javax.swing.JList();
        Planning_Control_jDesktopPane = new javax.swing.JDesktopPane();
        Add_jButton = new javax.swing.JButton();
        Delete_jButton = new javax.swing.JButton();
        Save_jButton = new javax.swing.JButton();
        Refresh_jButton = new javax.swing.JButton();
        Last_jButton = new javax.swing.JButton();
        Next_jButton = new javax.swing.JButton();
        Previous_jButton = new javax.swing.JButton();
        First_jButton = new javax.swing.JButton();
        New_jButton = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setFocusable(false);
        setMaximizedBounds(new java.awt.Rectangle(2, 2, 1030, 802));
        setModalExclusionType(java.awt.Dialog.ModalExclusionType.APPLICATION_EXCLUDE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowDeactivated(java.awt.event.WindowEvent evt) {
                formWindowDeactivated(evt);
            }
        });

        Planning_tab_jDesktopPane.setBackground(new java.awt.Color(255, 255, 204));
        Planning_tab_jDesktopPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(255, 255, 204));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, " Planned Activity", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        Planning_CustomisedPlan_jDesktopPane1.setBackground(new java.awt.Color(255, 255, 153));
        Planning_CustomisedPlan_jDesktopPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Preset Description", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        Planning_Preset_Description_jTextPane.setBackground(new java.awt.Color(255, 255, 204));
        jScrollPane72.setViewportView(Planning_Preset_Description_jTextPane);

        jScrollPane72.setBounds(20, 40, 440, 120);
        Planning_CustomisedPlan_jDesktopPane1.add(jScrollPane72, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_CustomisedPlanItem_jLabel1.setText("Main Item");
        Planning_CustomisedPlanItem_jLabel1.setBounds(20, 20, 130, 20);
        Planning_CustomisedPlan_jDesktopPane1.add(Planning_CustomisedPlanItem_jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Preset_Optional_jCheckBox.setBackground(new java.awt.Color(255, 255, 153));
        Planning_Preset_Optional_jCheckBox.setText("Optional");
        Planning_Preset_Optional_jCheckBox.setBounds(370, 10, 90, 20);
        Planning_CustomisedPlan_jDesktopPane1.add(Planning_Preset_Optional_jCheckBox, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_CustomisedPlan_jDesktopPane.setBackground(new java.awt.Color(255, 255, 153));
        Planning_CustomisedPlan_jDesktopPane.setBorder(javax.swing.BorderFactory.createTitledBorder(null, " Customised Description", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        Planning_CustomisedPlanSubItem_jLabel.setText("Sub Activity");
        Planning_CustomisedPlanSubItem_jLabel.setBounds(20, 100, 70, 20);
        Planning_CustomisedPlan_jDesktopPane.add(Planning_CustomisedPlanSubItem_jLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jScrollPane68.setViewportView(Planning_Customised_Description_jTextPane);

        jScrollPane68.setBounds(20, 40, 410, 60);
        Planning_CustomisedPlan_jDesktopPane.add(jScrollPane68, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jScrollPane69.setViewportView(Planning_Customised_SubPlanItem_jTextPane);

        jScrollPane69.setBounds(20, 120, 260, 40);
        Planning_CustomisedPlan_jDesktopPane.add(jScrollPane69, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_CustomisedPlanItem_jLabel.setText("Main Activity");
        Planning_CustomisedPlanItem_jLabel.setBounds(20, 20, 150, 20);
        Planning_CustomisedPlan_jDesktopPane.add(Planning_CustomisedPlanItem_jLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Customised_SubPlanItem_Previous_jButton.setText("<");
        Planning_Customised_SubPlanItem_Previous_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Planning_Customised_SubPlanItem_Previous_jButtonActionPerformed(evt);
            }
        });
        Planning_Customised_SubPlanItem_Previous_jButton.setBounds(280, 140, 80, 20);
        Planning_CustomisedPlan_jDesktopPane.add(Planning_Customised_SubPlanItem_Previous_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Customised_SubPlanItem_Add_jButton.setText("Add+");
        Planning_Customised_SubPlanItem_Add_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Planning_Customised_SubPlanItem_Add_jButtonActionPerformed(evt);
            }
        });
        Planning_Customised_SubPlanItem_Add_jButton.setBounds(280, 180, 80, 20);
        Planning_CustomisedPlan_jDesktopPane.add(Planning_Customised_SubPlanItem_Add_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Customised_SubPlanItem_Delete_jButton.setText("Delete");
        Planning_Customised_SubPlanItem_Delete_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Planning_Customised_SubPlanItem_Delete_jButtonActionPerformed(evt);
            }
        });
        Planning_Customised_SubPlanItem_Delete_jButton.setBounds(360, 120, 70, 20);
        Planning_CustomisedPlan_jDesktopPane.add(Planning_Customised_SubPlanItem_Delete_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Customised_SubPlanItem_Next_jButton.setText(" >");
        Planning_Customised_SubPlanItem_Next_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Planning_Customised_SubPlanItem_Next_jButtonActionPerformed(evt);
            }
        });
        Planning_Customised_SubPlanItem_Next_jButton.setBounds(360, 140, 70, 20);
        Planning_CustomisedPlan_jDesktopPane.add(Planning_Customised_SubPlanItem_Next_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Customised_Optional_jCheckBox.setBackground(new java.awt.Color(255, 255, 204));
        Planning_Customised_Optional_jCheckBox.setText("Optional");
        Planning_Customised_Optional_jCheckBox.setBounds(330, 10, 100, 20);
        Planning_CustomisedPlan_jDesktopPane.add(Planning_Customised_Optional_jCheckBox, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Customised_SubPlanItem_Save_jButton.setText("Save");
        Planning_Customised_SubPlanItem_Save_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Planning_Customised_SubPlanItem_Save_jButtonActionPerformed(evt);
            }
        });
        Planning_Customised_SubPlanItem_Save_jButton.setBounds(360, 180, 70, 20);
        Planning_CustomisedPlan_jDesktopPane.add(Planning_Customised_SubPlanItem_Save_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Customised_SubPlanItem_jCheckBox.setBackground(new java.awt.Color(255, 255, 204));
        Planning_Customised_SubPlanItem_jCheckBox.setText("Optional");
        Planning_Customised_SubPlanItem_jCheckBox.setBounds(280, 120, 80, 20);
        Planning_CustomisedPlan_jDesktopPane.add(Planning_Customised_SubPlanItem_jCheckBox, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jPanel6.setBackground(new java.awt.Color(255, 255, 153));
        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Customisation File"));
        jPanel6.setLayout(null);

        storeCustomised_jButton.setText("Store");
        storeCustomised_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                storeCustomised_jButtonActionPerformed(evt);
            }
        });
        jPanel6.add(storeCustomised_jButton);
        storeCustomised_jButton.setBounds(10, 20, 110, 25);

        openCustomised_jButton.setText("open");
        openCustomised_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openCustomised_jButtonActionPerformed(evt);
            }
        });
        jPanel6.add(openCustomised_jButton);
        openCustomised_jButton.setBounds(130, 20, 90, 25);

        loadCustomised_jButton.setText("Load");
        loadCustomised_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadCustomised_jButtonActionPerformed(evt);
            }
        });
        jPanel6.add(loadCustomised_jButton);
        loadCustomised_jButton.setBounds(230, 20, 100, 25);

        Planning_Customised_jCheckBox.setBackground(new java.awt.Color(255, 255, 204));
        Planning_Customised_jCheckBox.setText("Customised");
        Planning_Customised_jCheckBox.setEnabled(false);

        Planning_Performed_jCheckBox.setBackground(new java.awt.Color(255, 255, 204));
        Planning_Performed_jCheckBox.setText("Performed");
        Planning_Performed_jCheckBox.setEnabled(false);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Planning_CustomisedPlan_jDesktopPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 471, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(Planning_Performed_jCheckBox)
                        .addGap(125, 125, 125)
                        .addComponent(Planning_Customised_jCheckBox)))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Planning_CustomisedPlan_jDesktopPane, javax.swing.GroupLayout.DEFAULT_SIZE, 443, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(Planning_CustomisedPlan_jDesktopPane, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Planning_CustomisedPlan_jDesktopPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 174, Short.MAX_VALUE))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Planning_Performed_jCheckBox)
                            .addComponent(Planning_Customised_jCheckBox)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        Planning_Details_jDesktopPane.setBackground(new java.awt.Color(255, 255, 204));
        Planning_Details_jDesktopPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        Planning_Objectives_jDesktopPane.setBackground(new java.awt.Color(255, 255, 102));
        Planning_Objectives_jDesktopPane.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Plan Objectives", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        Planning_Objective_view_jPanel.setBackground(new java.awt.Color(255, 255, 153));
        Planning_Objective_view_jPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(" Objective Details"));
        Planning_Objective_view_jPanel.setLayout(null);

        Objective_Description_jTextPane.setBackground(new java.awt.Color(255, 255, 204));
        Objective_Description_jTextPane.setEditable(false);
        jScrollPane47.setViewportView(Objective_Description_jTextPane);

        Planning_Objective_view_jPanel.add(jScrollPane47);
        jScrollPane47.setBounds(16, 18, 430, 72);

        Objective_Type_jComboBox.setModel(new DefaultComboBoxModel(this.objectivesTypeArray));
        Objective_Type_jComboBox.setEnabled(false);
        Planning_Objective_view_jPanel.add(Objective_Type_jComboBox);
        Objective_Type_jComboBox.setBounds(580, 20, 189, 22);

        Planning_Objective_Type_jLabel.setText("Type");
        Planning_Objective_view_jPanel.add(Planning_Objective_Type_jLabel);
        Planning_Objective_Type_jLabel.setBounds(510, 20, 50, 20);

        Objective_Fulfilled_jCheckBox.setBackground(new java.awt.Color(255, 255, 153));
        Objective_Fulfilled_jCheckBox.setText("Fulfilled");
        Planning_Objective_view_jPanel.add(Objective_Fulfilled_jCheckBox);
        Objective_Fulfilled_jCheckBox.setBounds(710, 50, 111, 20);

        Objective_Customised_jCheckBox.setBackground(new java.awt.Color(255, 255, 153));
        Objective_Customised_jCheckBox.setText("Customised");
        Planning_Objective_view_jPanel.add(Objective_Customised_jCheckBox);
        Objective_Customised_jCheckBox.setBounds(510, 50, 111, 20);

        Planning_Objective_view_jPanel.setBounds(10, 210, 930, 110);
        Planning_Objectives_jDesktopPane.add(Planning_Objective_view_jPanel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Objectives_Control_jDesktopPane.setBackground(new java.awt.Color(255, 255, 102));

        Planning_Objectives_Select_jButton.setText("+>");
        Planning_Objectives_Select_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Planning_Objectives_Select_jButtonActionPerformed(evt);
            }
        });
        Planning_Objectives_Select_jButton.setBounds(0, 0, 60, 20);
        Planning_Objectives_Control_jDesktopPane.add(Planning_Objectives_Select_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Objectives_UnSelect_jButton.setText("<-");
        Planning_Objectives_UnSelect_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Planning_Objectives_UnSelect_jButtonActionPerformed(evt);
            }
        });
        Planning_Objectives_UnSelect_jButton.setBounds(0, 20, 60, 20);
        Planning_Objectives_Control_jDesktopPane.add(Planning_Objectives_UnSelect_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Objectives_Control_jDesktopPane.setBounds(460, 20, 60, 50);
        Planning_Objectives_jDesktopPane.add(Planning_Objectives_Control_jDesktopPane, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Selected_Objectives_jList.setBorder(javax.swing.BorderFactory.createTitledBorder("Selected Objectives for Planning"));
        Selected_Objectives_jList.setModel(this.getPlannedObjectivesModel());
        Selected_Objectives_jList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        Selected_Objectives_jList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                Selected_Objectives_jListValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(Selected_Objectives_jList);

        jScrollPane3.setBounds(520, 20, 420, 180);
        Planning_Objectives_jDesktopPane.add(jScrollPane3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Objectives_jList.setBorder(javax.swing.BorderFactory.createTitledBorder("Phase Objectives"));
        Objectives_jList.setModel(this.getObjectivesModel());
        Objectives_jList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        Objectives_jList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                Objectives_jListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(Objectives_jList);

        jScrollPane2.setBounds(10, 20, 450, 180);
        Planning_Objectives_jDesktopPane.add(jScrollPane2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Objectives_jDesktopPane.setBounds(0, 0, 950, 350);
        Planning_Objective_jLayeredPane.add(Planning_Objectives_jDesktopPane, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_jTabbedPane.addTab("Objective to Achieve", Planning_Objective_jLayeredPane);

        Planning_Resource_jDesktopPane.setBackground(new java.awt.Color(255, 255, 102));
        Planning_Resource_jDesktopPane.setBorder(javax.swing.BorderFactory.createTitledBorder(null, " Project Resources ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        Planning_Objectives_Control_jDesktopPane1.setBackground(new java.awt.Color(255, 255, 102));

        Planning_Resources_Select_jButton.setText("+>");
        Planning_Resources_Select_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Planning_Resources_Select_jButtonActionPerformed(evt);
            }
        });
        Planning_Resources_Select_jButton.setBounds(0, 0, 60, 20);
        Planning_Objectives_Control_jDesktopPane1.add(Planning_Resources_Select_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Resources_UnSelect_jButton.setText("<-");
        Planning_Resources_UnSelect_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Planning_Resources_UnSelect_jButtonActionPerformed(evt);
            }
        });
        Planning_Resources_UnSelect_jButton.setBounds(0, 20, 60, 20);
        Planning_Objectives_Control_jDesktopPane1.add(Planning_Resources_UnSelect_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Objectives_Control_jDesktopPane1.setBounds(470, 20, 60, 50);
        Planning_Resource_jDesktopPane.add(Planning_Objectives_Control_jDesktopPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Resource_jDesktopPane.setBackground(new java.awt.Color(255, 255, 153));
        Resource_jDesktopPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Resource Details"));
        Resource_jDesktopPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Resource_jDesktopPaneMouseClicked(evt);
            }
        });

        Resource_Cost_jLabel.setText("Cost");
        Resource_Cost_jLabel.setBounds(780, 50, 50, 20);
        Resource_jDesktopPane.add(Resource_Cost_jLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Resource_Type_jLabel.setText("Resource Type");
        Resource_Type_jLabel.setBounds(530, 10, 90, 20);
        Resource_jDesktopPane.add(Resource_Type_jLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Resource_Type_jComboBox.setBackground(new java.awt.Color(255, 255, 204));
        Resource_Type_jComboBox.setModel(new DefaultComboBoxModel(this.resourceTypeArray));
        Resource_Type_jComboBox.setEnabled(false);
        Resource_Type_jComboBox.setBounds(530, 30, 200, 20);
        Resource_jDesktopPane.add(Resource_Type_jComboBox, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Resource_Cost_jTextField.setBackground(new java.awt.Color(255, 255, 204));
        Resource_Cost_jTextField.setEditable(false);
        Resource_Cost_jTextField.setBounds(830, 50, 60, 20);
        Resource_jDesktopPane.add(Resource_Cost_jTextField, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Resource_Quantity_jTextField.setBackground(new java.awt.Color(255, 255, 204));
        Resource_Quantity_jTextField.setEditable(false);
        Resource_Quantity_jTextField.setBounds(830, 20, 60, 20);
        Resource_jDesktopPane.add(Resource_Quantity_jTextField, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Resource_Quantity_jLabel.setText("Quantity");
        Resource_Quantity_jLabel.setBounds(770, 20, 60, 20);
        Resource_jDesktopPane.add(Resource_Quantity_jLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Resource_Description_jTextArea.setBackground(new java.awt.Color(255, 255, 204));
        Resource_Description_jTextArea.setColumns(20);
        Resource_Description_jTextArea.setEditable(false);
        Resource_Description_jTextArea.setRows(5);
        jScrollPane1.setViewportView(Resource_Description_jTextArea);

        jScrollPane1.setBounds(20, 20, 440, 60);
        Resource_jDesktopPane.add(jScrollPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Resource_jDesktopPane.setBounds(10, 230, 930, 90);
        Planning_Resource_jDesktopPane.add(Resource_jDesktopPane, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Resources_Edit_jButton1.setText("Edit");
        Resources_Edit_jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Resources_Edit_jButton1ActionPerformed(evt);
            }
        });
        Resources_Edit_jButton1.setBounds(10, 200, 460, 23);
        Planning_Resource_jDesktopPane.add(Resources_Edit_jButton1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Resources_jList.setBorder(javax.swing.BorderFactory.createTitledBorder("Available Resources"));
        Resources_jList.setModel(this.getResourcesModel());
        Resources_jList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        Resources_jList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                Resources_jListValueChanged(evt);
            }
        });
        jScrollPane4.setViewportView(Resources_jList);

        jScrollPane4.setBounds(10, 20, 460, 180);
        Planning_Resource_jDesktopPane.add(jScrollPane4, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Selected_Resources_jList.setBorder(javax.swing.BorderFactory.createTitledBorder("Selected Resources for Planning"));
        Selected_Resources_jList.setModel(this.getPlannedResourcesModel());
        Selected_Resources_jList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        Selected_Resources_jList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                Selected_Resources_jListValueChanged(evt);
            }
        });
        jScrollPane5.setViewportView(Selected_Resources_jList);

        jScrollPane5.setBounds(530, 20, 410, 200);
        Planning_Resource_jDesktopPane.add(jScrollPane5, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Resource_jDesktopPane.setBounds(0, 0, 950, 340);
        jLayeredPane37.add(Planning_Resource_jDesktopPane, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_jTabbedPane.addTab("Required Resources", jLayeredPane37);

        Planning_Planner_jDesktopPane.setBackground(new java.awt.Color(255, 255, 102));
        Planning_Planner_jDesktopPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        Planning_Planner_info_jDesktopPane.setBackground(new java.awt.Color(255, 255, 153));
        Planning_Planner_info_jDesktopPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        Planning_Planner_info_jDesktopPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Planning_Planner_info_jDesktopPaneMouseClicked(evt);
            }
        });

        Planning_Planner_Name_jLabel.setText("Name");
        Planning_Planner_Name_jLabel.setBounds(20, 10, 210, 20);
        Planning_Planner_info_jDesktopPane.add(Planning_Planner_Name_jLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Planner_Contacts_jLabel.setText("Contact Details (Comma separated)");
        Planning_Planner_Contacts_jLabel.setBounds(20, 80, 210, 20);
        Planning_Planner_info_jDesktopPane.add(Planning_Planner_Contacts_jLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Analyst_Contacts_jTextArea.setBackground(new java.awt.Color(255, 255, 204));
        Analyst_Contacts_jTextArea.setColumns(20);
        Analyst_Contacts_jTextArea.setRows(5);
        jScrollPane62.setViewportView(Analyst_Contacts_jTextArea);

        jScrollPane62.setBounds(20, 100, 450, 110);
        Planning_Planner_info_jDesktopPane.add(jScrollPane62, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Analyst_Name_jTextField.setBackground(new java.awt.Color(255, 255, 204));
        Analyst_Name_jTextField.setBounds(20, 30, 450, 20);
        Planning_Planner_info_jDesktopPane.add(Analyst_Name_jTextField, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Analyst_Role_jComboBox.setBackground(new java.awt.Color(255, 255, 204));
        Analyst_Role_jComboBox.setEditable(true);
        Analyst_Role_jComboBox.setModel(new DefaultComboBoxModel(this.analystRole));
        Analyst_Role_jComboBox.setEnabled(false);
        Analyst_Role_jComboBox.setBounds(20, 260, 180, 20);
        Planning_Planner_info_jDesktopPane.add(Analyst_Role_jComboBox, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Planner_Level_jLabel.setText("Level");
        Planning_Planner_Level_jLabel.setBounds(260, 240, 140, 20);
        Planning_Planner_info_jDesktopPane.add(Planning_Planner_Level_jLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Analyst_Level_jComboBox.setBackground(new java.awt.Color(255, 255, 204));
        Analyst_Level_jComboBox.setEditable(true);
        Analyst_Level_jComboBox.setModel(new DefaultComboBoxModel(this.analystLevel));
        Analyst_Level_jComboBox.setEnabled(false);
        Analyst_Level_jComboBox.setBounds(260, 260, 210, 20);
        Planning_Planner_info_jDesktopPane.add(Analyst_Level_jComboBox, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Planner_Role_jLabel.setText("Role");
        Planning_Planner_Role_jLabel.setBounds(20, 240, 150, 20);
        Planning_Planner_info_jDesktopPane.add(Planning_Planner_Role_jLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Planner_info_jDesktopPane.setBounds(430, 10, 500, 300);
        Planning_Planner_jDesktopPane.add(Planning_Planner_info_jDesktopPane, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Performer_edit_jButton.setText("Edit");
        Performer_edit_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Performer_edit_jButtonActionPerformed(evt);
            }
        });
        Performer_edit_jButton.setBounds(10, 280, 400, 23);
        Planning_Planner_jDesktopPane.add(Performer_edit_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Analysts_jList.setBorder(javax.swing.BorderFactory.createTitledBorder("Available Actors"));
        Analysts_jList.setModel(getAnalystsModel());
        Analysts_jList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                Analysts_jListValueChanged(evt);
            }
        });
        jScrollPane6.setViewportView(Analysts_jList);

        jScrollPane6.setBounds(10, 10, 400, 270);
        Planning_Planner_jDesktopPane.add(jScrollPane6, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Planner_jDesktopPane.setBounds(0, 0, 950, 320);
        jLayeredPane69.add(Planning_Planner_jDesktopPane, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_jTabbedPane.addTab("Planner", jLayeredPane69);

        Planning_jTabbedPane.setBounds(10, 10, 960, 360);
        Planning_Details_jDesktopPane.add(Planning_jTabbedPane, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Control_jDesktopPane.setBackground(new java.awt.Color(255, 255, 102));
        Planning_Control_jDesktopPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        Add_jButton.setText("Add+");
        Add_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Add_jButtonActionPerformed(evt);
            }
        });
        Add_jButton.setBounds(650, 7, 90, 25);
        Planning_Control_jDesktopPane.add(Add_jButton, javax.swing.JLayeredPane.MODAL_LAYER);

        Delete_jButton.setText("Delete");
        Delete_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Delete_jButtonActionPerformed(evt);
            }
        });
        Delete_jButton.setBounds(850, 7, 100, 25);
        Planning_Control_jDesktopPane.add(Delete_jButton, javax.swing.JLayeredPane.MODAL_LAYER);

        Save_jButton.setText("Save");
        Save_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Save_jButtonActionPerformed(evt);
            }
        });
        Save_jButton.setBounds(560, 7, 90, 25);
        Planning_Control_jDesktopPane.add(Save_jButton, javax.swing.JLayeredPane.MODAL_LAYER);

        Refresh_jButton.setText("Refresh");
        Refresh_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Refresh_jButtonActionPerformed(evt);
            }
        });
        Refresh_jButton.setBounds(440, 7, 100, 25);
        Planning_Control_jDesktopPane.add(Refresh_jButton, javax.swing.JLayeredPane.MODAL_LAYER);

        Last_jButton.setText("Last >>");
        Last_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Last_jButtonActionPerformed(evt);
            }
        });
        Last_jButton.setBounds(320, 7, 100, 25);
        Planning_Control_jDesktopPane.add(Last_jButton, javax.swing.JLayeredPane.MODAL_LAYER);

        Next_jButton.setText("Next >");
        Next_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Next_jButtonActionPerformed(evt);
            }
        });
        Next_jButton.setBounds(220, 7, 100, 25);
        Planning_Control_jDesktopPane.add(Next_jButton, javax.swing.JLayeredPane.MODAL_LAYER);

        Previous_jButton.setText("< Previous");
        Previous_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Previous_jButtonActionPerformed(evt);
            }
        });
        Previous_jButton.setBounds(110, 7, 110, 25);
        Planning_Control_jDesktopPane.add(Previous_jButton, javax.swing.JLayeredPane.MODAL_LAYER);

        First_jButton.setText("<< First");
        First_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                First_jButtonActionPerformed(evt);
            }
        });
        First_jButton.setBounds(10, 7, 100, 25);
        Planning_Control_jDesktopPane.add(First_jButton, javax.swing.JLayeredPane.MODAL_LAYER);

        New_jButton.setText("New");
        New_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                New_jButtonActionPerformed(evt);
            }
        });
        New_jButton.setBounds(770, 7, 80, 25);
        Planning_Control_jDesktopPane.add(New_jButton, javax.swing.JLayeredPane.MODAL_LAYER);

        Planning_Control_jDesktopPane.setBounds(10, 380, 960, 40);
        Planning_Details_jDesktopPane.add(Planning_Control_jDesktopPane, javax.swing.JLayeredPane.MODAL_LAYER);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(Planning_Details_jDesktopPane, javax.swing.GroupLayout.DEFAULT_SIZE, 966, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 266, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Planning_Details_jDesktopPane, javax.swing.GroupLayout.PREFERRED_SIZE, 428, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16))
        );

        jPanel1.setBounds(10, 10, 990, 720);
        Planning_tab_jDesktopPane.add(jPanel1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Planning_tab_jDesktopPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1010, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Planning_tab_jDesktopPane, javax.swing.GroupLayout.PREFERRED_SIZE, 740, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Add_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Add_jButtonActionPerformed
        this.save_plan();
        this.clear_plan();        // TODO add your handling code here:

}//GEN-LAST:event_Add_jButtonActionPerformed

    private void Save_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Save_jButtonActionPerformed
        this.save_plan();
}//GEN-LAST:event_Save_jButtonActionPerformed

    private void Refresh_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Refresh_jButtonActionPerformed
        this.refresh_plan();
        this.populate_plan();
}//GEN-LAST:event_Refresh_jButtonActionPerformed

    private void First_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_First_jButtonActionPerformed
        this.first_plan();
    }//GEN-LAST:event_First_jButtonActionPerformed

    private void Previous_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Previous_jButtonActionPerformed
        this.previous_plan();
    }//GEN-LAST:event_Previous_jButtonActionPerformed

    private void Next_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Next_jButtonActionPerformed
        this.next_plan();
    }//GEN-LAST:event_Next_jButtonActionPerformed

    private void Last_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Last_jButtonActionPerformed
        this.last_plan();
    }//GEN-LAST:event_Last_jButtonActionPerformed

    private void New_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_New_jButtonActionPerformed
        this.clear_plan();
    }//GEN-LAST:event_New_jButtonActionPerformed

    private void Delete_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Delete_jButtonActionPerformed
        this.delete_plan();
    }//GEN-LAST:event_Delete_jButtonActionPerformed

    private void Planning_Customised_SubPlanItem_Previous_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Planning_Customised_SubPlanItem_Previous_jButtonActionPerformed
        this.previous_customised_subPlan();
    }//GEN-LAST:event_Planning_Customised_SubPlanItem_Previous_jButtonActionPerformed

    private void Planning_Customised_SubPlanItem_Next_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Planning_Customised_SubPlanItem_Next_jButtonActionPerformed
        this.next_customised_subPlan();
    }//GEN-LAST:event_Planning_Customised_SubPlanItem_Next_jButtonActionPerformed

    private void Planning_Customised_SubPlanItem_Add_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Planning_Customised_SubPlanItem_Add_jButtonActionPerformed
        this.save_customised_subPlan();
        this.clear_customised_subPlan();
    }//GEN-LAST:event_Planning_Customised_SubPlanItem_Add_jButtonActionPerformed

    private void Planning_Customised_SubPlanItem_Delete_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Planning_Customised_SubPlanItem_Delete_jButtonActionPerformed
        this.delete_customised_subPlan();
    }//GEN-LAST:event_Planning_Customised_SubPlanItem_Delete_jButtonActionPerformed

    private void Planning_Objectives_Select_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Planning_Objectives_Select_jButtonActionPerformed
this.select_objective();
    }//GEN-LAST:event_Planning_Objectives_Select_jButtonActionPerformed



    private void Planning_Objectives_UnSelect_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Planning_Objectives_UnSelect_jButtonActionPerformed
    this.unSelect_objective();   
    }//GEN-LAST:event_Planning_Objectives_UnSelect_jButtonActionPerformed

    private void Planning_Resources_Select_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Planning_Resources_Select_jButtonActionPerformed
        try {
            if (this.resources == null) {
                this.resources = new Resources();
            }
            if (this.resource != null) {
                this.resources.save(resource);
            }
            if (this.resources != null) {
                this.plan.setResources(this.resources.clone());
            }
            this.save_plan();
            //------------------------------------------------------------------------
            this.Selected_Resources_jList.setModel(this.getPlannedResourcesModel());
            this.Selected_Resources_jList.setSelectedIndex(Selected_Resources_jList.getLastVisibleIndex());
            this.populate_resource();
            this.populateForm();
        } catch (Exception ex) {
            Logger.getLogger(PlanningForm.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_Planning_Resources_Select_jButtonActionPerformed

    private void Planning_Resources_UnSelect_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Planning_Resources_UnSelect_jButtonActionPerformed

 if (this.resources!=null && this.resources.getResourcesList().size()>0)
    {
        int result=this.resources.delete(this.resource);
        //System.out.print("Deleteion Result="+result);
     }    
    
   this.plan.setResources(this.resources.clone());
   
    this.save_plan();
    //------------------------------------------------------------------------
    this.Selected_Resources_jList.setModel(this.getPlannedResourcesModel());
    //this.Selected_Resources_jList.setSelectedIndex(this.plan.getResources().getResourcesList().indexOf(this.resource));
    this.Selected_Resources_jList.setSelectedIndex(Selected_Resources_jList.getLastVisibleIndex());
    this.populate_resource();
    this.populateForm();
    
    }//GEN-LAST:event_Planning_Resources_UnSelect_jButtonActionPerformed

    private void Planning_Customised_SubPlanItem_Save_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Planning_Customised_SubPlanItem_Save_jButtonActionPerformed
    this.save_customised_subPlan();
    }//GEN-LAST:event_Planning_Customised_SubPlanItem_Save_jButtonActionPerformed

    private void Objectives_jListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_Objectives_jListValueChanged
if (this.phase!=null && this.phase.getObjectives()!=null && this.phase.getObjectives().getObjectivesList().size()>0)
    if (this.Objectives_jList.getSelectedIndex()>=0)
        this.objective=this.phase.getObjectives().get(Objectives_jList.getSelectedIndex());

this.refresh_objectives();
this.populate_objective();  
this.populateForm();
 

    }//GEN-LAST:event_Objectives_jListValueChanged

    private void Analysts_jListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_Analysts_jListValueChanged
  if (Global.project!=null&&Global.project.getSupplements()!=null
          && Global.project.getSupplements().getHumanInteraction()!=null )
      if (this.Analysts_jList.getSelectedIndex()>=0)
            this.analyst=Global.project.getSupplements().getHumanInteraction().
                                    get(this.Analysts_jList.getSelectedIndex());
if (this.plan!=null && this.analyst!=null) 
{
    this.plan.setPlanner(this.analyst.clone());
    this.save_plan();
}
  this.populate_analyst();
  this.populateForm();
}//GEN-LAST:event_Analysts_jListValueChanged


    private void Planning_Planner_info_jDesktopPaneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Planning_Planner_info_jDesktopPaneMouseClicked
    HumanInteractionForm humanInteractionForm=null;
   humanInteractionForm=new HumanInteractionForm(this.analyst);
    }//GEN-LAST:event_Planning_Planner_info_jDesktopPaneMouseClicked

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
            this.Analysts_jList.setModel(this.getAnalystsModel());
            this.Resources_jList.setModel(this.getResourcesModel());
            this.Objectives_jList.setModel(this.getObjectivesModel());            
    }//GEN-LAST:event_formWindowActivated

    private void Resources_jListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_Resources_jListValueChanged

      if (Global.project!=null&&Global.project.getSupplements()!=null
          && Global.project.getSupplements().getManagement()!=null
          && Global.project.getSupplements().getManagement().getResources()!=null )
          if (this.Resources_jList.getSelectedIndex()>=0)
              this.resource=Global.project.getSupplements().getManagement().getResources().getResource(this.Resources_jList.getSelectedIndex());
  this.populate_resource();
  this.populateForm();

    }//GEN-LAST:event_Resources_jListValueChanged

    private void Resource_jDesktopPaneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Resource_jDesktopPaneMouseClicked
    ManagementForm projectManagementForm=null;
    projectManagementForm=new ManagementForm(this.resource);
    }//GEN-LAST:event_Resource_jDesktopPaneMouseClicked

    private void Selected_Resources_jListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_Selected_Resources_jListValueChanged
   if (this.plan!=null && this.plan.getResources()!=null &&
       this.plan.getResources().getResourcesList().size()>0)
            if (this.Selected_Resources_jList.getSelectedIndex()>=0)
                this.resource=this.plan.getResources().getResource(Selected_Resources_jList.getSelectedIndex());
   
   this.populate_resource();

    }//GEN-LAST:event_Selected_Resources_jListValueChanged

    private void Selected_Objectives_jListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_Selected_Objectives_jListValueChanged
if (this.objectives!=null &&
    this.objectives.getObjectivesList().size()>0 &&
    this.Selected_Objectives_jList.getSelectedIndex()>=0 &&
    this.objectives.get(Selected_Objectives_jList.getSelectedIndex())!=null)
          this.objective=this.objectives.get(Selected_Objectives_jList.getSelectedIndex());
  this.refresh_objectives();
  this.populate_objective();  
  this.populateForm();

    }//GEN-LAST:event_Selected_Objectives_jListValueChanged

    private void formWindowDeactivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowDeactivated
        
            if (this.phase != null) {
                this.phase.save();
            }
            Global.currentPhase = this.phase.clone(true);
            this.deactivationFlag = true;
        

    }//GEN-LAST:event_formWindowDeactivated

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed

//    System.runFinalization();
    System.gc();        
    
    }//GEN-LAST:event_formWindowClosed

    private void Performer_edit_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Performer_edit_jButtonActionPerformed
        HumanInteractionForm humanInteractionForm=null;
        humanInteractionForm=new HumanInteractionForm(this.analyst);
}//GEN-LAST:event_Performer_edit_jButtonActionPerformed

    private void Resources_Edit_jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Resources_Edit_jButton1ActionPerformed
    ManagementForm projectManagementForm=null;
    projectManagementForm=new ManagementForm(this.resource);
}//GEN-LAST:event_Resources_Edit_jButton1ActionPerformed

    private void storeCustomised_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_storeCustomised_jButtonActionPerformed

        this.store();
       
    }//GEN-LAST:event_storeCustomised_jButtonActionPerformed
 
    private void openCustomised_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openCustomised_jButtonActionPerformed

        this.open();
        
    }//GEN-LAST:event_openCustomised_jButtonActionPerformed

    private void loadCustomised_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadCustomised_jButtonActionPerformed

        this.load();
        
    }//GEN-LAST:event_loadCustomised_jButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
    if (this.phase != null) 
        this.phase.save();
    
    Global.currentPhase = this.phase.clone(true);
    this.deactivationFlag = true;

    }//GEN-LAST:event_formWindowClosing
            
//------------------------------------------------------------------------------
//---------------------------------( Store )------------------------------------
//------------------------------------------------------------------------------
private void store()
 {
   this.save_plan();      
   
    int decision=JOptionPane.showConfirmDialog(null, "Would you like to \n use the default customisation location?");
    if (decision==0)            
       this.phase.getPlanning().store(null, null);        
    else
    {
       File selectedFile=null;
       selectedFile=Tools.chooseFile("Choose the location", null, null, true);        
       String fileLocation=null;    
       if (selectedFile!=null)
           selectedFile.getPath();
       
       String fileName=null;
       if (Global.currentPhase!=null && Global.currentPhase.getName()!=null)           
           fileName=Global.currentPhase.getNumber()+"- "+Global.currentPhase.getName();
       
       this.phase.getPlanning().store(fileLocation, fileName);
    }         
}     

//------------------------------------------------------------------------------
//---------------------------------( Open )-------------------------------------
//------------------------------------------------------------------------------

private void open()
 {

  int decision=JOptionPane.showConfirmDialog(null, 
           "This will clear all the currunt customisation "
          + "\nAre you sure you want to continue?");
  if (decision==0)            
   {     
      Planning planning= new Planning();     
      planning=planning.open(null);      
       
       this.phase.setPlanning(planning.clone());
       this.phase.save();              
       
       this.refresh_plan();
       this.populate_plan();
    }
     
 }         


//------------------------------------------------------------------------------
//---------------------------------( Load )-------------------------------------
//------------------------------------------------------------------------------
private void load()
 {

  int decision=JOptionPane.showConfirmDialog(null, 
          "This will clear all the currunt customisation "
          + "\nAre you sure you want to continue?");
  if (decision==0)            
   {     
      Planning planning= new Planning();     
      planning=planning.load();      
      this.phase.setPlanning(planning.clone());
      
      this.phase.save();                     
      
      this.refresh_plan();
      this.populate_plan();
    }
     
 }             
    
    
    

//SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
//****************************************************************************
//                              Save Plan
//****************************************************************************
//SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS

 private void save_plan()
 {
     if (this.phase.getPlanning()==null)
        this.phase.setPlanning(new Planning());

     if (this.plan==null)
        this.plan=new Plan();

    if ( this.plan!=null)
     {

     if (this.objectives!=null)
         this.plan.setObjectives(this.objectives.clone());
    //*************************************************************************
    //*************************************************************************
    //*************************************************************************
     this.plan.setPerformed(this.Planning_Performed_jCheckBox.isSelected());
     this.plan.setCustomised(this.Planning_Customised_Optional_jCheckBox.isSelected());
    //-------------------------------------------------------------------------
    if (this.plan.getPresetPlanItem()==null)
        this.presetPlanItem=new PlanItem();
     /*
    else
        this.presetPlanItem=plan.getPresetPlanItem();
     */
    //----------------
    if (this.plan.getCustomisedPlanItem()==null)
        this.customisedPlanItem=new PlanItem();
     /*
    else
        this.customisedPlanItem=plan.getCustomisedPlanItem();
    */
    //-------------------------------------------------------------------------    
     if(this.Planning_Preset_Description_jTextPane.getText()!=null && !this.Planning_Preset_Description_jTextPane.getText().equals("")) 
         this.presetPlanItem.setDescription(this.Planning_Preset_Description_jTextPane.getText());

     this.presetPlanItem.setOptional(this.Planning_Preset_Optional_jCheckBox.isSelected());
     //------------------------------------------------------------------------
     if(this.Planning_Customised_Description_jTextPane.getText()!=null && !this.Planning_Customised_Description_jTextPane.getText().equals(""))
     {
         this.customisedPlanItem.setDescription(this.Planning_Customised_Description_jTextPane.getText());
         this.plan.setCustomised(true);
         this.Planning_Customised_jCheckBox.setSelected(true);
     }
     else
     {
      int decision=JOptionPane.showConfirmDialog(null, "Customised Plan is empty! Do you want to use the preset Plan as customised?");
      if (decision==0)
        {
          if (this.customisedPlanItem!=null)
               this.customisedPlanItem.setDescription(this.Planning_Preset_Description_jTextPane.getText());
           this.plan.setCustomised(true);
           this.Planning_Customised_jCheckBox.setSelected(true);           
           this.refresh_plan_details();
           this.populate_plan();
           this.populateForm();
        }
      else          
      {
         this.plan.setCustomised(false);
         this.Planning_Customised_jCheckBox.setSelected(false);
         this.customisedPlanItem.setDescription(null);
         this.Planning_Customised_Description_jTextPane.setText("");
      }


     }
    if ( this.customisedPlanItem!=null)
     this.customisedPlanItem.setOptional(this.Planning_Customised_Optional_jCheckBox.isSelected());
     //------------------------------------------------------------------------
     this.save_customised_subPlan();
     this.save_preset_subPlan();
     //---
     this.plan.setCustomisedPlanItem(customisedPlanItem.clone());
     this.plan.setPresetPlanItem(presetPlanItem.clone());
     //------------------------------------------------------------------------
     if(this.plan!=null)
        this.phase.getPlanning().save(this.plan);

    // this.populate_plan();
  }
 else
     JOptionPane.showMessageDialog(null, "Planned Item cannot be modified ... It is already performed delete it from performed and try again");
}
 //***************************************************************************
 private void save_customised_subPlan()
 {
     if (this.plan==null)
         this.plan=new Plan();

     if(this.customisedPlanItem==null)
            this.customisedPlanItem= new PlanItem();

        if(this.customisedSubPlanItem==null)
            this.customisedSubPlanItem= new PlanItem();

        this.customisedSubPlanItem.setDescription(this.Planning_Customised_SubPlanItem_jTextPane.getText());
        this.customisedSubPlanItem.setOptional(this.Planning_Customised_SubPlanItem_jCheckBox.isSelected());
        this.customisedPlanItem.saveSub(this.customisedSubPlanItem);
        this.plan.setCustomisedPlanItem(customisedPlanItem.clone());
        //-------------------------------------------------------------------------
        if (this.phase.getPlanning()==null)
             this.phase.setPlanning(new Planning());

        this.phase.getPlanning().save(plan);
        //-------------------------------------------------------------------------
        this.phase.save();
 }
 //***************************************************************************
 private void save_preset_subPlan()
 {
   if (this.plan==null)
         this.plan=new Plan();


  if(this.presetPlanItem==null)
         this.presetPlanItem= new PlanItem();

   if (this.plan!=null && this.presetPlanItem!=null)
    {

       if(this.presetSubPlanItem==null)
            this.presetSubPlanItem= new PlanItem();
        //
//        this.presetSubPlanItem.setDescription(this.Planning_Preset_SubPlanItem_jTextPane.getText());
  //      this.presetSubPlanItem.setOptional(this.Planning_Preset_SubPlanItem_jCheckBox.isSelected());
        //
        this.presetPlanItem.saveSub(this.presetSubPlanItem);
        this.plan.setCustomisedPlanItem(this.presetPlanItem.clone());
    }

     this.plan.setPresetPlanItem(customisedPlanItem.clone());
//-------------------------------------------------------------------------
     if (this.phase.getPlanning()==null)
         this.phase.setPlanning(new Planning());

     this.phase.getPlanning().save(plan);
//-------------------------------------------------------------------------

     this.phase.save();
 }


 //RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR
//****************************************************************************
//                              Refresh
//****************************************************************************
//RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR

 private void refresh_plan()
 {
    if (this.phase.getPlanning()!=null && this.phase.getPlanning().getPlanList().size()>0)
    {
        this.plan = this.phase.getPlanning().getFirst();
        this.refresh_plan_details();

        if (this.plan.getObjectives()!=null && this.plan.getObjectives().getFirst()!=null)
            this.objective=this.plan.getObjectives().getFirst();

        if (this.plan.getResources()!=null && this.plan.getResources().getFirst()!=null)
            this.resource=this.plan.getResources().getFirst();
        
        if (this.plan.getPlanner()!=null)
            this.analyst=this.plan.getPlanner();
        
        this.Resources_jList.setModel(this.getResourcesModel());
        this.Selected_Resources_jList.setModel(this.getPlannedResourcesModel());

        this.Objectives_jList.setModel(this.getObjectivesModel());
        this.Selected_Objectives_jList.setModel(this.getPlannedObjectivesModel());
    }
    else
    {
        //System.out.print(" No Plan is available");

    }
   // this.refresh_Resource(this.thisResource);
}


 //RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR
 //                         Refresh Plan Details
 //RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR
  private void refresh_plan_details()
 {
        if (this.plan!=null && this.plan.getCustomisedPlanItem()!=null)
            this.customisedPlanItem=this.plan.getCustomisedPlanItem();

        if ( this.customisedPlanItem!=null && this.customisedPlanItem.getSubPlanList().size()>0 && this.customisedPlanItem.getFirstSub()!=null)
               this.customisedSubPlanItem=this.customisedPlanItem.getFirstSub();

        //--------------------------------------------------------------------
        if (this.plan!=null && this.plan.getPresetPlanItem()!=null)
            this.presetPlanItem=this.plan.getPresetPlanItem();

        if ( this.presetPlanItem!=null &&
                this.presetPlanItem.getSubPlanList().size()>0 &&
                this.presetPlanItem.getFirstSub()!=null)
        this.presetSubPlanItem=this.presetPlanItem.getFirstSub();
        //
        this.refresh_analyst();
        //
        this.refresh_resources();
        //
        this.refresh_objectives();


 }

//DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
//****************************************************************************
//                              Delete Plan
//DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
//****************************************************************************
 private void delete_plan()
    {        
    if (this.plan!=null && this.phase.getPlanning()!=null)
    {
      int index= this.phase.getPlanning().getPlanList().indexOf(this.plan);
          if (this.phase.getPlanning().delete(this.plan));
        {
            if (this.phase.getPlanning().getPlanList().size()>0)
            {
                if (index==0 && this.phase.getPlanning().getPlan(index)!=null)
                    this.plan = this.phase.getPlanning().getPlan(index);
                else
                    this.plan = this.phase.getPlanning().getPlan(index-1);

                this.refresh_plan_details();
                this.populate_plan();
            }
            else
                this.clear_plan();
        }
     this.phase.save();
     //------------------------------------------------------------------------
     // to disable the details if the master is not there
     //------------------------------------------------------------------------
     if (this.phase.getPlanning().getPlanList().size()==0)
     {
         this.phase.setPlanning(null);
         this.populateForm();
      }
 }
 }


 //DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
//****************************************************************************
//                              Delete Preset Sub Plan
//DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
//****************************************************************************
 private void delete_preset_subPlan()
    {    
    if (this.plan!=null && this.phase.getPlanning()!=null)
    {        
        int planIndex= this.phase.getPlanning().getPlanList().indexOf(this.plan);
        Plan pi=(Plan) this.phase.getPlanning().getPlanList().get(planIndex);
        int index=pi.getPresetPlanItem().getSubPlanList().indexOf(this.presetSubPlanItem);        
        if (this.presetPlanItem.deleteSub(this.presetSubPlanItem));
        {
            if (this.presetPlanItem.getSubPlanList().size()>0)
            {
                if (index==0)
                    this.presetSubPlanItem = pi.getPresetPlanItem().getSubPlan(index);
                else
                    this.presetSubPlanItem = pi.getPresetPlanItem().getSubPlan(index-1);

                this.populate_plan();
            }
            else
                this.clear_preset_subPlan();
        }

     this.plan.setPresetPlanItem(presetPlanItem.clone());
     this.save_plan();
     }
     this.phase.save();     
 }
//FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
//****************************************************************************
//                            First & Last Plan
//****************************************************************************
//FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF

 private void clear_plan_details()
    {
         this.clear_customised_subPlan();
         this.clear_preset_subPlan();
         this.clear_analyst();
         this.clear_resource();
         this.clear_Objectives();
         this.clear_customised_subPlanForm();
         this.customisedPlanItem=null;
         this.presetPlanItem=null;
         //this.clear_preset_subPlanForm();
 }




 private void first_plan()
    {
     if (this.phase.getPlanning()!=null)
     {
        this.save_plan();
        this.clear_PlanForm();
        this.clear_plan_details();
        this.plan=this.phase.getPlanning().getFirst();
        this.refresh_plan_details();
        this.populate_plan();
      }               
 }

 //****************************************************************************
 private void last_plan()
 {
 if (this.phase.getPlanning()!=null)
 {

    this.save_plan();
    this.clear_PlanForm();
    this.clear_plan_details();
    this.plan=this.phase.getPlanning().getLast();
    this.refresh_plan_details();
    this.populate_plan();


     this.populate_plan();
  }
  
     //   this.refresh_Resource(this.thisResource);
 }


//NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
//****************************************************************************
//                                Next Plan
//****************************************************************************
//NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
 private void next_plan()
    {
      if(this.phase.getPlanning()!=null)
        {
            if (this.plan!=null)
            {
                if (this.phase.getPlanning().getNext(this.plan)!=null)
                {
                    this.save_plan();
                    this.clear_PlanForm();
                    clear_plan_details();                                        
                    this.plan=this.phase.getPlanning().getNext(this.plan);                    
                    this.refresh_plan_details();                                        
                    this.populate_plan();                   
                }
            }
        }
        //else
            //System.out.print("No Phase PreRequisits is found yet ");
    }

//PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
//****************************************************************************
//                     Previous Plan& Resource
//****************************************************************************
//PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP

 private void previous_plan()
    {
     if(this.phase.getPlanning()!=null)
        {
            if (this.plan!=null)
            {
                if (this.phase.getPlanning().getPrevious(this.plan)!=null)
                {

                    this.save_plan();
                    this.clear_PlanForm();
                    clear_plan_details();
                    this.plan=this.phase.getPlanning().getPrevious(this.plan);                    
                     this.refresh_plan_details();
                    this.populate_plan();
                }
            }
        }
        //else
            //System.out.print("No Phase PreRequisits is found yet ");
 }


/*
 //============================================================================
 private void populate_preset_subplan()
    {
       if (this.presetPlanItem!=null &&
                 this.presetSubPlanItem!=null &&
                 this.presetSubPlanItem.getDescription()!=null)
         {
             this.Planning_Preset_SubPlanItem_jTextPane.setText(this.presetSubPlanItem.getDescription());
             this.Planning_Preset_SubPlanItem_jCheckBox.setSelected(this.presetSubPlanItem.isOptional());
         }
         else
            this.Planning_Preset_SubPlanItem_jTextPane.setText("");
 }

*/

 //DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
//****************************************************************************
//                           Delete Customised Sub Plan
//DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
//****************************************************************************
 private void delete_customised_subPlan()
    {
    if (this.plan!=null && this.phase.getPlanning()!=null)
    {
        int planIndex= this.phase.getPlanning().getPlanList().indexOf(this.plan);
        Plan pi=(Plan) this.phase.getPlanning().getPlanList().get(planIndex);
        int index=pi.getCustomisedPlanItem().getSubPlanList().indexOf(this.customisedSubPlanItem);
        //
        if (this.customisedPlanItem.deleteSub(this.customisedSubPlanItem));
        {
            if (this.customisedPlanItem.getSubPlanList().size()>0)
            {
                if (index==0)
                    this.customisedSubPlanItem = pi.getCustomisedPlanItem().getSubPlan(index);
                else
                    this.customisedSubPlanItem = pi.getCustomisedPlanItem().getSubPlan(index-1);

              //  this.refresh_plan_details();
                this.populate_plan();
            }
            else
                this.clear_customised_subPlan();
        }

     this.plan.setCustomisedPlanItem(customisedPlanItem.clone());
     this.save_plan();
     }
     this.phase.save();
 }

//DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
//****************************************************************************
//                           Refresh Customised Sub Plan
//DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
//****************************************************************************
 private void refresh_customised_subPlan()
    {
    if (this.plan!=null && this.phase.getPlanning()!=null)
    {
        int planIndex= this.phase.getPlanning().getPlanList().indexOf(this.plan);
        Plan pi=(Plan) this.phase.getPlanning().getPlanList().get(planIndex);
        int index=pi.getCustomisedPlanItem().getSubPlanList().indexOf(this.customisedSubPlanItem);
        //
        if (this.customisedPlanItem.deleteSub(this.customisedSubPlanItem));
        {
            if (this.customisedPlanItem.getSubPlanList().size()>0)
            {
                this.customisedSubPlanItem = pi.getCustomisedPlanItem().getFirstSub();
                this.populate_plan();
            }
            else
                this.clear_customised_subPlan();
        }

     this.plan.setCustomisedPlanItem(customisedPlanItem.clone());
     this.save_plan();
     }
     this.phase.save();
 }


 //============================================================================
 private void populate_customised_subplan()
    {
      //--------------------------------------------------------------------
         if (this.customisedPlanItem!=null &&
                 this.customisedSubPlanItem!=null &&
                 this.customisedSubPlanItem.getDescription()!=null)
         {
            this.Planning_Customised_SubPlanItem_jCheckBox.setSelected(customisedSubPlanItem.isOptional());
            this.Planning_Customised_SubPlanItem_jTextPane.setText(this.customisedSubPlanItem.getDescription());
         }
         else
            this.Planning_Customised_SubPlanItem_jTextPane.setText("");
 }

  //CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
 //                         Clear sub Plan Form
 //CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
 //-----------------------------------------------------------------------------
/*
 private void clear_preset_subPlanForm()
{
      this.Planning_Preset_SubPlanItem_jTextPane.setText("");
      this.Planning_Preset_SubPlanItem_jCheckBox.setSelected(false);
}
*/
//-----------------------------------------------------------------------------
private void clear_customised_subPlanForm()
{
    this.Planning_Customised_SubPlanItem_jTextPane.setText("");
    this.Planning_Customised_SubPlanItem_jCheckBox.setSelected(false);
}
//-----------------------------------------------------------------------------
private void clear_customised_subPlan()
{
       this.customisedSubPlanItem=null;
       clear_customised_subPlanForm();
}

//NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
//****************************************************************************
//                     Next Customised SubPlan
//****************************************************************************
//NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
 private void next_customised_subPlan()
    {
      if(this.phase.getPlanning()!=null)
        {
            if (this.plan!=null)
            {
                if (this.customisedPlanItem!=null && this.customisedSubPlanItem!=null)
                {
                    this.save_customised_subPlan();
                    this.customisedSubPlanItem=this.customisedPlanItem.getNextSub(customisedSubPlanItem);                                                   
                }
                else
                    this.customisedSubPlanItem=this.plan.getCustomisedPlanItem().getLastSub();
                this.populate_customised_subplan();
            }
        }
        //else
            //System.out.print("No Phase PreRequisits is found yet ");
    }


 //NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
//****************************************************************************
//                          Previous Customised SubPlan
//****************************************************************************
//NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
 private void previous_customised_subPlan()
    {
      if(this.phase.getPlanning()!=null)
        {
            if (this.plan!=null)
            {
                if (this.customisedPlanItem!=null && this.customisedSubPlanItem!=null)
                {                   
                    this.save_customised_subPlan();
                    this.customisedSubPlanItem=this.customisedPlanItem.getPreviousSub(customisedSubPlanItem);                                                                
                }
                else
                    this.customisedSubPlanItem=this.plan.getCustomisedPlanItem().getFirstSub();
               this.populate_customised_subplan();
            }
        }
        //else
            //System.out.print("No Phase PreRequisits is found yet ");
    }

 //NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
//****************************************************************************
//                     Next Preset SubPlan
//****************************************************************************
//NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
 private void next_preset_subPlan()
    {
      if(this.phase.getPlanning()!=null)
        {
            if (this.plan!=null)
            {
                if (this.presetPlanItem!=null && this.customisedSubPlanItem!=null)
                {
                    this.save_preset_subPlan();                   
                    this.presetSubPlanItem=this.presetPlanItem.getNextSub(presetSubPlanItem);                   
                }
                else
                    this.presetSubPlanItem=this.plan.getPresetPlanItem().getLastSub();
                this.populate_plan();
            }
        }
        //else
            //System.out.print("No Phase PreRequisits is found yet ");
    }


 //NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
//****************************************************************************
//                     Previous Preset SubPlan
//****************************************************************************
//NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
 private void previous_preset_subPlan()
    {
      if(this.phase.getPlanning()!=null)
        {
            if (this.plan!=null)
            {
                if (this.presetPlanItem!=null && this.customisedSubPlanItem!=null)
                {                 
                    this.save_preset_subPlan();
                    this.presetSubPlanItem=this.presetPlanItem.getPreviousSub(presetSubPlanItem);                 
                }
                else
                    this.presetSubPlanItem=this.plan.getPresetPlanItem().getFirstSub();
                this.populate_plan();
            }
        }
        //else
            //System.out.print("No Phase PreRequisits is found yet ");
    }


//CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
//****************************************************************************
//                     Clear Resource Plan & Resource
//****************************************************************************
 //CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

 private void clear_plan()
{          
     //
     this.plan=new Plan();
     //
     this.customisedPlanItem=null;
     this.customisedSubPlanItem=null;
     //
     this.presetPlanItem=null;
     this.presetSubPlanItem=null;
     //
     this.clear_PlanForm();
     //
     this.clear_Objectives();
     this.clear_analyst();
     this.clear_resource();
     //
     this.populate_plan();
 }


//-----------------------------------------------------------------------------
private void clear_preset_subPlan()
{
        this.presetSubPlanItem=null;
//        clear_preset_subPlanForm();
}


 //CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
 //                              Clear thisResource
 //CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
 private void clear_resource( )
{
     this.clear_resourceForm();
     this.resource=null;
     this.resources=null;
 }

//CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
 //                         Clear Objectives
 //CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

 private void clear_Objectives()
{
     this.clear_ObjectivesForm();
     this.objective=null;
     this.objectives=null;
 }


 //CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
 //                              Clear Analyst
 //CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
 private void clear_analyst( )
{
     this.clear_analystForm();
     this.analyst=null;
     
     this.Analysts_jList.setModel(this.getAnalystsModel());
     this.Analysts_jList.setSelectedValue(null,false);
 }
 private void clear_analystForm()
{
     this.Analyst_Name_jTextField.setText("");
     this.Analyst_Contacts_jTextArea.setText("");
     this.Analyst_Role_jComboBox.setSelectedIndex(0);
     this.Analyst_Level_jComboBox.setSelectedIndex(0);
 }

//PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
//****************************************************************************
//                             Populate
//****************************************************************************
//PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP

private void populateForm()
{
           if (this.phase!=null)
               this.setTitle("Planning for:        "+this.phase.getTitle());

               Planning_jTabbedPane.setVisible(true);
            /*
            //-----------------------------------------------------------------------
            if (this.latestPhase.getPlanning()==null)
                Planning_jTabbedPane.setVisible(false);
            else
                Planning_jTabbedPane.setVisible(true);
            //-----------------------------------------------------------------------
             * 
             */
            this.repaint();
            this.pack();

 }


//PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
//                         Populate Plan Form
//PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
 private void populate_plan()
{
     this.clear_PlanForm();
     if (this.plan!=null)
     {
         if (this.customisedPlanItem!=null && this.customisedPlanItem.getDescription()!=null)
         {
            this.Planning_Customised_Description_jTextPane.setText(this.customisedPlanItem.getDescription());
            this.Planning_Customised_Optional_jCheckBox.setSelected(this.customisedPlanItem.isOptional());
         }
         else
           this.Planning_Customised_Description_jTextPane.setText("");

         //--------------------------------------------------------------------
         if (this.customisedPlanItem!=null && 
                 this.customisedSubPlanItem!=null &&
                 this.customisedSubPlanItem.getDescription()!=null)
         {
            this.Planning_Customised_SubPlanItem_jCheckBox.setSelected(customisedSubPlanItem.isOptional());
            this.Planning_Customised_SubPlanItem_jTextPane.setText(this.customisedSubPlanItem.getDescription());
         }
         else
            this.Planning_Customised_SubPlanItem_jTextPane.setText("");
         //--------------------------------------------------------------------
         //--------------------------------------------------------------------
         this.Planning_Customised_jCheckBox.setSelected(this.plan.isCustomised());
         this.Planning_Performed_jCheckBox.setSelected(this.plan.isPerformed());

         //--------------------------------------------------------------------
         //--------------------------------------------------------------------
         //--------------------------------------------------------------------
         if (this.presetPlanItem!=null &&
             this.presetPlanItem.getDescription()!=null)
         {
            this.Planning_Preset_Description_jTextPane.setText(this.presetPlanItem.getDescription());
            this.Planning_Preset_Optional_jCheckBox.setSelected(this.presetPlanItem.isOptional());
         }
         else
           this.Planning_Preset_Description_jTextPane.setText("");
         //--------------------------------------------------------------------
         /*
        if (this.presetPlanItem!=null &&
                 this.presetSubPlanItem!=null &&
                 this.presetSubPlanItem.getDescription()!=null)
         {
             this.Planning_Preset_SubPlanItem_jTextPane.setText(this.presetSubPlanItem.getDescription());
             this.Planning_Preset_SubPlanItem_jCheckBox.setSelected(this.presetSubPlanItem.isOptional());
         }
         else
            this.Planning_Preset_SubPlanItem_jTextPane.setText("");
*/
         this.populate_resource();
         this.populate_objective();
         this.populate_analyst();
         //--------------------------------------------------------------------
     }
    //else
      //System.out.print(" No Prereqiuiste found to populate");

  this.populateForm();
 }

 //============================================================================
 //============================================================================

 private void diasable_preset()
{
     /*
   this.Planning_Preset_Description_jTextPane.setEditable(false);
   this.Planning_Required_jCheckBox.setEnabled(false);
   this.Planning_Customised_jCheckBox.setEnabled(false);
      *
      */
}
//****************************************************************************
 private void enable_preset()
{
     /*
 this.Planning_Preset_Description_jTextPane.setEditable(true);
        this.Planning_Preset_Description_jTextPane.setBackground(Color.white);
        this.Planning_Required_jCheckBox.setEnabled(true);
        this.Planning_Customised_jCheckBox.setEnabled(true);
      *
      */
 }



//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
//                       Get Objectives Model
//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC

public  DefaultComboBoxModel getObjectivesModel()
{
  
  DefaultComboBoxModel dcm=null;
  ArrayList<PhaseObjective> objectivesList=new ArrayList<PhaseObjective>();
  String[] objectivesArrayNames = null;
  if (Global.project!=null&&Global.project.getProcess()!=null)
  {
    if ( this.phase!=null && this.phase.getObjectives()!=null
              && this.phase.getObjectives().getObjectivesList().size()>0)
      {
        objectivesList=this.phase.getObjectives().getObjectivesList();
        int size=objectivesList.size();
        objectivesArrayNames = new String[size];
        int i=0;
        for (Object o:objectivesList)
            {
              PhaseObjective phaseObjective=(PhaseObjective) o;
              objectivesArrayNames[i]=phaseObjective.getDescription();
              i=i+1;
             }
        dcm=new DefaultComboBoxModel(objectivesArrayNames);
        return dcm;
        }
     else
      {
        String names[] ={"<No Objectives are available>"};
        dcm=new DefaultComboBoxModel(names);
        return dcm;
      }
  }
 else
    {
    String names[] ={"<No Objectives are available>"};
    dcm=new DefaultComboBoxModel(names);
     return dcm;
    }
 }

//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
//                       Get Planned Objectives Model
//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
public  DefaultComboBoxModel getPlannedObjectivesModel()
{
  DefaultComboBoxModel dcm=null;
  ArrayList<PhaseObjective> objectivesList=new ArrayList<PhaseObjective>();
  String[] objectivesArrayNames = null;
  if (this.objectives!=null)
  {
    if ( this.objectives.getObjectivesList()!=null && this.objectives.getObjectivesList().size()>0)
      {
        objectivesList=this.objectives.getObjectivesList();
        int size=objectivesList.size();
        objectivesArrayNames = new String[size];
        int i=0;
        for (Object o:objectivesList)
            {
              PhaseObjective visitedObjective=(PhaseObjective) o;
              objectivesArrayNames[i]=visitedObjective.getDescription();
              i=i+1;
             }
        dcm=new DefaultComboBoxModel(objectivesArrayNames);
        return dcm;
        }
     else
      {
        String names[] ={"<No planned objectives yet>"};
        dcm=new DefaultComboBoxModel(names);
        return dcm;
      }
  }
 else
    {
    String names[] ={"<No planned objectives Yet>"};
    dcm=new DefaultComboBoxModel(names);
     return dcm;
    }
 }

/*

//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
//                       Get Planned Objectives Model
//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC

public  DefaultComboBoxModel getPlannedObjectivesModel()
{
  DefaultComboBoxModel dcm=null;
  ArrayList<PhaseObjective> objectivesList=new ArrayList<PhaseObjective>();
  String[] objectivesArrayNames = null;
  if (this.plan!=null&&this.plan.getObjectives()!=null)
  {
    if ( this.plan.getObjectives().getObjectivesList().size()>0)
      {
        objectivesList=this.plan.getObjectives().getObjectivesList();
        int size=objectivesList.size();
        objectivesArrayNames = new String[size];
        int i=0;
        for (Object o:objectivesList)
            {
              PhaseObjective phaseObjective=(PhaseObjective) o;
              objectivesArrayNames[i]=phaseObjective.getDescription();
              i=i+1;
             }
        dcm=new DefaultComboBoxModel(objectivesArrayNames);
        return dcm;
        }
     else
      {
        String names[] ={"<No planned objectives yet>"};
        dcm=new DefaultComboBoxModel(names);
        return dcm;
      }
  }
 else
    {
    String names[] ={"<No planned objectives Yet>"};
    dcm=new DefaultComboBoxModel(names);
     return dcm;
    }
 }
*/
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//                       Reusable in Performed
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
//                       Get Project Resources Model
//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
public  DefaultComboBoxModel getResourcesModel()
{
  DefaultComboBoxModel dcm=null;
  ArrayList<Resource> resourcesList=new ArrayList<Resource>();
  String[] resourcesArrayNames = null;
  if (Global.project!=null 
          && Global.project.getSupplements()!=null
          && Global.project.getSupplements().getManagement()!=null )
  {
      if (  Global.project.getSupplements().getManagement().getResources()!=null
              && Global.project.getSupplements().getManagement().getResources().getResourcesList().size()>0)
      {
        resourcesList=Global.project.getSupplements().getManagement().getResources().getResourcesList();
        int size=resourcesList.size();
        resourcesArrayNames = new String[size];
        int i=0;
        for (Object o:resourcesList)
            {
              Resource thisResource=(Resource) o;
              String result="";
              if (thisResource!=null &&  thisResource.getResourceType()!=null)
                  result=thisResource.getResourceType().toString()+"  ";
              if (thisResource !=null && thisResource.getDescription()!=null)
                   result=result+ thisResource.getDescription();
              resourcesArrayNames[i]=result;
              i=i+1;
             }
        dcm=new DefaultComboBoxModel(resourcesArrayNames);
        return dcm;
        }
     else
      {
        String names[] ={"<No resources are available>"};
        dcm=new DefaultComboBoxModel(names);
        return dcm;
      }
  }
 else
    {
    String names[] ={"<No resources are available>"};
    dcm=new DefaultComboBoxModel(names);
     return dcm;
    }
 }

//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
//                       Get Planned Objectives Model
//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
public  DefaultComboBoxModel getPlannedResourcesModel()
{
  DefaultComboBoxModel dcm=null;
  ArrayList<Resource> resourcesList=new ArrayList<Resource>();
  String[] resourcesArrayNames = null;
  if (this.resources!=null)
  {
    if ( this.resources.getResourcesList()!=null && this.resources.getResourcesList().size()>0)
      {
        resourcesList=this.resources.getResourcesList();
        int size=resourcesList.size();
        resourcesArrayNames = new String[size];
        int i=0;
        for (Object o:resourcesList)
            {
              Resource visitedResource=(Resource) o;
              resourcesArrayNames[i]=visitedResource.getDescription();
              i=i+1;
             }
        dcm=new DefaultComboBoxModel(resourcesArrayNames);
        return dcm;
        }
     else
      {
        String names[] ={"<No planned objectives yet>"};
        dcm=new DefaultComboBoxModel(names);
        return dcm;
      }
  }
 else
    {
    String names[] ={"<No planned objectives Yet>"};
    dcm=new DefaultComboBoxModel(names);
     return dcm;
    }
 }


//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
//                       Get Analyst Model
//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC

public  DefaultComboBoxModel getAnalystsModel()
{
  DefaultComboBoxModel dcm=null;
  ArrayList<Analyst> analystsList=new ArrayList<Analyst>();
  String[] analystArrayNames = null;
  if (Global.project!=null && Global.project.getSupplements()!=null
          && Global.project.getSupplements().getHumanInteraction()!=null )
  {
      if (  Global.project.getSupplements().getHumanInteraction().getAnalystsList().size()>0)
      {
        analystsList=Global.project.getSupplements().getHumanInteraction().getAnalystsList();
        int size=analystsList.size();
        analystArrayNames = new String[size];
        int i=0;
        for (Object o:analystsList)
            {
              Analyst visitedAnalyst=(Analyst) o;
              analystArrayNames[i]=
                      visitedAnalyst.getRole()+", " +visitedAnalyst.getLevel()+
                      "["+visitedAnalyst.getName()+", "+ visitedAnalyst.getContactDetails()+"]";
              i=i+1;
             }
        dcm=new DefaultComboBoxModel(analystArrayNames);
        return dcm;
        }
     else
      {
        String names[] ={"No analyst is available"};
        dcm=new DefaultComboBoxModel(names);
        return dcm;
      }
  }
 else
    {
    String names[] ={" No resource is available"};
    dcm=new DefaultComboBoxModel(names);
     return dcm;
    }
 }



//LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
//****************************************************************************
//                              Lists
//****************************************************************************
//LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
private void select_resource()
{
 if (this.plan!=null && this.resource!=null )
  {
     Resources tempResources=this.plan.getResources();
     //
     if (tempResources==null)
         tempResources=new Resources();  
     //
     tempResources.save(resource);
     //
     this.plan.setResources(tempResources.clone());
    }
  this.Selected_Resources_jList.setModel(this.getPlannedResourcesModel());
  //this.Selected_Objectives_jList.setSelectedIndex(0);
  this.populate_resource();
  //this.populateForm();
}
//UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU
private void unSelect_resource()
{
  if (this.plan!=null && this.plan.getResources()!=null )
    this.delete_resource();

  this.Selected_Resources_jList.setModel(this.getPlannedResourcesModel());

    this.populate_resource();
    this.populateForm();
}

private void save_objective()
{

  this.save_plan();

}



//SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
private void select_objective()
 {

   if (this.objectives==null)
   {   
       this.objectives=new Objectives();
       // the constructor of objectives is coded to load all the objectives from file
       this.objectives.setObjectivesList(new ArrayList<PhaseObjective>());
    }

  if (this.objective!=null)
      this.objectives.save(this.objective);
   
 this.save_plan();

 this.Selected_Objectives_jList.setModel(this.getPlannedObjectivesModel());
 this.refresh_objectives();
 this.populate_objective();
 this.populateForm();
 }
//UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU
private void unSelect_objective()
 {
  if (this.objectives!=null && this.objectives.getObjectivesList().size()>0)
    {
        int index= this.objectives.getObjectivesList().indexOf(this.objective);

        if (index>=0)
            this.objectives.delete(this.objective);

        this.Selected_Objectives_jList.setModel(this.getPlannedObjectivesModel());

        if (this.plan!=null)
            this.plan.setObjectives(this.objectives.clone());

        this.refresh_objectives();
    }


}


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Add_jButton;
    private javax.swing.JTextArea Analyst_Contacts_jTextArea;
    private javax.swing.JComboBox Analyst_Level_jComboBox;
    private javax.swing.JTextField Analyst_Name_jTextField;
    private javax.swing.JComboBox Analyst_Role_jComboBox;
    private javax.swing.JList Analysts_jList;
    private javax.swing.JButton Delete_jButton;
    private javax.swing.JButton First_jButton;
    private javax.swing.JButton Last_jButton;
    private javax.swing.JButton New_jButton;
    private javax.swing.JButton Next_jButton;
    private javax.swing.JCheckBox Objective_Customised_jCheckBox;
    private javax.swing.JTextPane Objective_Description_jTextPane;
    private javax.swing.JCheckBox Objective_Fulfilled_jCheckBox;
    private javax.swing.JComboBox Objective_Type_jComboBox;
    private javax.swing.JList Objectives_jList;
    private javax.swing.JButton Performer_edit_jButton;
    private javax.swing.JDesktopPane Planning_Control_jDesktopPane;
    private javax.swing.JLabel Planning_CustomisedPlanItem_jLabel;
    private javax.swing.JLabel Planning_CustomisedPlanItem_jLabel1;
    private javax.swing.JLabel Planning_CustomisedPlanSubItem_jLabel;
    private javax.swing.JDesktopPane Planning_CustomisedPlan_jDesktopPane;
    private javax.swing.JDesktopPane Planning_CustomisedPlan_jDesktopPane1;
    private javax.swing.JTextPane Planning_Customised_Description_jTextPane;
    private javax.swing.JCheckBox Planning_Customised_Optional_jCheckBox;
    private javax.swing.JButton Planning_Customised_SubPlanItem_Add_jButton;
    private javax.swing.JButton Planning_Customised_SubPlanItem_Delete_jButton;
    private javax.swing.JButton Planning_Customised_SubPlanItem_Next_jButton;
    private javax.swing.JButton Planning_Customised_SubPlanItem_Previous_jButton;
    private javax.swing.JButton Planning_Customised_SubPlanItem_Save_jButton;
    private javax.swing.JCheckBox Planning_Customised_SubPlanItem_jCheckBox;
    private javax.swing.JTextPane Planning_Customised_SubPlanItem_jTextPane;
    private javax.swing.JCheckBox Planning_Customised_jCheckBox;
    private javax.swing.JDesktopPane Planning_Details_jDesktopPane;
    private javax.swing.JLabel Planning_Objective_Type_jLabel;
    private javax.swing.JLayeredPane Planning_Objective_jLayeredPane;
    private javax.swing.JPanel Planning_Objective_view_jPanel;
    private javax.swing.JDesktopPane Planning_Objectives_Control_jDesktopPane;
    private javax.swing.JDesktopPane Planning_Objectives_Control_jDesktopPane1;
    private javax.swing.JButton Planning_Objectives_Select_jButton;
    private javax.swing.JButton Planning_Objectives_UnSelect_jButton;
    private javax.swing.JDesktopPane Planning_Objectives_jDesktopPane;
    private javax.swing.JCheckBox Planning_Performed_jCheckBox;
    private javax.swing.JLabel Planning_Planner_Contacts_jLabel;
    private javax.swing.JLabel Planning_Planner_Level_jLabel;
    private javax.swing.JLabel Planning_Planner_Name_jLabel;
    private javax.swing.JLabel Planning_Planner_Role_jLabel;
    private javax.swing.JDesktopPane Planning_Planner_info_jDesktopPane;
    private javax.swing.JDesktopPane Planning_Planner_jDesktopPane;
    private javax.swing.JTextPane Planning_Preset_Description_jTextPane;
    private javax.swing.JCheckBox Planning_Preset_Optional_jCheckBox;
    private javax.swing.JDesktopPane Planning_Resource_jDesktopPane;
    private javax.swing.JButton Planning_Resources_Select_jButton;
    private javax.swing.JButton Planning_Resources_UnSelect_jButton;
    private javax.swing.JTabbedPane Planning_jTabbedPane;
    private javax.swing.JLayeredPane Planning_tab_jDesktopPane;
    private javax.swing.JButton Previous_jButton;
    private javax.swing.JButton Refresh_jButton;
    private javax.swing.JLabel Resource_Cost_jLabel;
    private javax.swing.JTextField Resource_Cost_jTextField;
    private javax.swing.JTextArea Resource_Description_jTextArea;
    private javax.swing.JLabel Resource_Quantity_jLabel;
    private javax.swing.JTextField Resource_Quantity_jTextField;
    private javax.swing.JComboBox Resource_Type_jComboBox;
    private javax.swing.JLabel Resource_Type_jLabel;
    private javax.swing.JDesktopPane Resource_jDesktopPane;
    private javax.swing.JButton Resources_Edit_jButton1;
    private javax.swing.JList Resources_jList;
    private javax.swing.JButton Save_jButton;
    private javax.swing.JList Selected_Objectives_jList;
    private javax.swing.JList Selected_Resources_jList;
    private javax.swing.JLayeredPane jLayeredPane37;
    private javax.swing.JLayeredPane jLayeredPane69;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane47;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane62;
    private javax.swing.JScrollPane jScrollPane68;
    private javax.swing.JScrollPane jScrollPane69;
    private javax.swing.JScrollPane jScrollPane72;
    private javax.swing.JButton loadCustomised_jButton;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JButton openCustomised_jButton;
    private javax.swing.JButton storeCustomised_jButton;
    // End of variables declaration//GEN-END:variables


//SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
//****************************************************************************
//                              Save Resource
//****************************************************************************
//SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS

 private void save_analyst()
 {
   try
     {
    if (this.analyst==null)
        this.analyst=new Analyst();
     //
     if(this.Analyst_Name_jTextField!=null
     && !this.Analyst_Name_jTextField.getText().equals(""))
        this.analyst.setName(this.Analyst_Name_jTextField.getText());
     //
     if(this.Analyst_Contacts_jTextArea!=null
     && !this.Analyst_Contacts_jTextArea.getText().equals(""))
        this.analyst.setContactDetails(this.Analyst_Contacts_jTextArea.getText());
     //
     this.analyst.setRole(this.Analyst_Role_jComboBox.getSelectedIndex());

     this.analyst.setLevel(this.Analyst_Level_jComboBox.getSelectedIndex());

     Global.project.getSupplements().getHumanInteraction().save(analyst);

     } catch (Exception ex) {
            Logger.getLogger(ManagementForm.class.getName()).log(Level.SEVERE, null, ex);
     }
  }



 //RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR
//****************************************************************************
//                              Refresh
//****************************************************************************
//RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR

 private void refresh_analyst()
 {
     if (this.plan!=null && this.plan.getPlanner()!=null)
         this.analyst=this.plan.getPlanner();
/*    if (Global.project!=null &&
        Global.project.getSupplements().getHumanInteraction()!=null&&
        Global.project.getSupplements().getHumanInteraction()!=null &&
        Global.project.getSupplements().getHumanInteraction().getAnalystsList().size()>0
        )
    {
        this.analyst = Global.project.getSupplements().getHumanInteraction().getFirst();
        this.populate_analyst();
    }
    else
        //System.out.print(" No Resource is available");
 *
 */
}

//DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
//****************************************************************************
//                              Delete Resource
//DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
//****************************************************************************
 private void delete_analyst()
    {
    int index= Global.project.getSupplements().getHumanInteraction().getAnalystsList().indexOf(this.analyst);
    if (this.analyst!=null && Global.project.getSupplements().getHumanInteraction()!=null)
        if (Global.project.getSupplements().getHumanInteraction().delete(this.analyst)==0);
        {
            if (Global.project.getSupplements().getHumanInteraction().getAnalystsList().size()>0)
            {
                if (index==0)
                    this.analyst = Global.project.getSupplements().getHumanInteraction().get(index);
                else
                    this.analyst = Global.project.getSupplements().getHumanInteraction().get(index-1);

                this.populate_analyst();
            }
            else
            this.clear_analyst();
        }

     this.save_analyst();
 }

//PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
//                         Populate Resource Form
//PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
 private void populate_analyst()
{
     this.clear_analystForm();
     if (analyst!=null)
     {
         if (analyst.getName()!=null)
            this.Analyst_Name_jTextField.setText(analyst.getName());
         else
           this.Analyst_Name_jTextField.setText("");
         //--------------------------------------------------------------------
         if (analyst.getContactDetails()!=null)
            this.Analyst_Contacts_jTextArea.setText(analyst.getContactDetails());
         else
           this.Analyst_Contacts_jTextArea.setText("");
         //--------------------------------------------------------------------
         if (analyst.getLevel()!=null)
            this.Analyst_Level_jComboBox.setSelectedIndex(analyst.getLevel().ordinal()+1);
         //--------------------------------------------------------------------
         if (analyst.getRole()!=null)
            this.Analyst_Role_jComboBox.setSelectedIndex(analyst.getRole().ordinal()+1);

     }
    //else
    //  //System.out.print(" No Analyst found to populate");
     this.populateForm();
 }

 //RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR
//****************************************************************************
//                              Refresh Resource
//****************************************************************************
//RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR

 private void refresh_resources()
 {

  //
  if (this.plan!=null && this.plan.getResources()!=null)
      this.resources=this.plan.getResources();
  //
  this.Resources_jList.setModel(this.getResourcesModel());
  this.Selected_Resources_jList.setModel(this.getPlannedResourcesModel());

}

  //RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR
//****************************************************************************
//                              Refresh Resource
//****************************************************************************
//RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR

 private void refresh_objectives()
 {

  //
  if (this.plan!=null && this.plan.getObjectives()!=null)
      this.objectives=this.plan.getObjectives();
  //
  this.Objectives_jList.setModel(this.getObjectivesModel());
  this.Selected_Objectives_jList.setModel(this.getPlannedObjectivesModel());

}



//CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
//****************************************************************************
//                     Clear Resource Form
//****************************************************************************
 //CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

 private void clear_resourceForm()
{
     this.Resource_Cost_jTextField.setText("");
     this.Resource_Quantity_jTextField.setText("");
     this.Resource_Description_jTextArea.setText("");
     this.Resource_Type_jComboBox.setSelectedIndex(0);
     String names[] ={"<No planned resources yet>"};
     this.Selected_Resources_jList.setModel(new DefaultComboBoxModel(names));
     //this.Resources_jList.setSelectedIndex(-1);     
     this.Resources_jList.setSelectionBackground(Color.white);
     this.Selected_Resources_jList.setSelectionBackground(Color.white);     
     this.Resources_jList.setSelectedValue(null,false);
 }

 //DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
//****************************************************************************
//                              Delete Resource
//DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
//****************************************************************************
 private void delete_resource()
   {
    if (this.resource!=null && this.plan!=null  &&
        this.plan.getResources()!=null &&
        this.plan.getResources().getResourcesList().size()>0)
    {
        int index= this.plan.getResources().getResourcesList().indexOf(this.resource);
        if (this.plan.getResources().delete(this.resource)==0);
        {
            if (this.plan.getResources().getResourcesList().size()>0)
            {
                if (index==0)
                    this.resource = this.plan.getResources().getResource(index);
                else if(index>0)
                    this.resource = this.plan.getResources().getResource(index-1);

                this.populate_resource();
            }
            else
            this.clear_resource();
        }
    this.save_plan();
 }
}

//PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
//                         Populate Resource Form
//PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
 private void populate_resource()
{
     this.Selected_Resources_jList.setModel(this.getPlannedResourcesModel());

     if (resource!=null)
     {
         this.Resources_jList.setSelectionBackground(Color.white);
         this.Selected_Resources_jList.setSelectionBackground(Color.white);
         //--------------------------------------------------------------------
         if (resource.getDescription()!=null)
            this.Resource_Description_jTextArea.setText(resource.getDescription());
         else
           this.Resource_Description_jTextArea.setText("");
         //
         if (resource.getResourceType()!=null)
            this.Resource_Type_jComboBox.setSelectedIndex(resource.getResourceType().ordinal()+1);

         this.Resource_Cost_jTextField.setText(String.valueOf(resource.getCost()));

         this.Resource_Quantity_jTextField.setText(String.valueOf(resource.getQuantiy()));          

     }
  
    this.populateForm();
 }



 //PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
//                         Populate objective
//PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
 private void populate_objective()
{
     this.Selected_Objectives_jList.setModel(this.getPlannedObjectivesModel());

     if (objective!=null)
     {
         this.Objectives_jList.setSelectionBackground(Color.white);
         this.Selected_Objectives_jList.setSelectionBackground(Color.white);

         if (objective.getDescription()!=null)
            this.Objective_Description_jTextPane.setText(objective.getDescription());
         else
           this.Objective_Description_jTextPane.setText("");
         //
         this.Objective_Customised_jCheckBox.setSelected(objective.isCustomised());
         this.Objective_Fulfilled_jCheckBox.setSelected(objective.isFulfilled());
         //
         if (objective.getObjectiveType()!=null)
              this.Objective_Type_jComboBox.setSelectedIndex(objective.getObjectiveType().ordinal()+1);

     }

     this.populateForm();
 }



//CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
//****************************************************************************
//                     Clear Source Resource & Source
//****************************************************************************
//CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
 private void clear_PlanForm()
{
     this.Planning_Preset_Description_jTextPane.setText("");
     this.Planning_Preset_Optional_jCheckBox.setSelected(false);
    //------------------------------------------------------------------------
    this.Planning_Customised_Description_jTextPane.setText("");
    this.Planning_Customised_Optional_jCheckBox.setSelected(false);
    //------------------------------------------------------------------------
    this.Planning_Performed_jCheckBox.setSelected(false);
    this.Planning_Customised_jCheckBox.setSelected(false);
    //------------------------------------------------------------------------
    this.clear_ObjectivesForm();
    this.clear_resourceForm();
    this.clear_analystForm();
    //------------------------------------------------------------------------
    this.populateForm();
 }

 //CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
 //                         Clear Objectives Form
 //CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
 private void clear_ObjectivesForm()
{
     this.Objective_Description_jTextPane.setText("");
     this.Objective_Customised_jCheckBox.setSelected(false);
     this.Objective_Fulfilled_jCheckBox.setSelected(false);
     this.Objective_Type_jComboBox.setSelectedIndex(0);
     String names[] ={"<No planned objectives yet>"};
     this.Selected_Objectives_jList.setModel(new DefaultComboBoxModel(names));
     //this.Objectives_jList.setSelectedIndex(-1);
     this.Objectives_jList.setSelectedValue(null,false);
     this.Objectives_jList.setSelectionBackground(Color.white);
     this.Selected_Objectives_jList.setSelectionBackground(Color.white);
     this.Objectives_jList.setSelectedValue(null,false);
 }
}
