/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
/*
 * PreRequisiteForm.java
 *
 * Created on 04-Oct-2010, 11:52:33
 */

package gui.form.task;

import java.awt.Color;
import global.Global;
import gui.form.supplement.SourceForm;
import java.io.File;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import process_model.basic.util.ArrayList;
import process_model.issue.tracibility.ExternalSource;
import process_model.issue.tracibility.HumanSource;
import process_model.issue.tracibility.InternalSource;
import process_model.issue.tracibility.Source;
import process_model.issue.tracibility.Sources;
import process_model.phase.Phase;
import process_model.phase.prerequisite.PreRequisite;
import process_model.phase.prerequisite.PreRequisites;
import toolbox.Tools;


public class PreRequisiteForm extends javax.swing.JFrame
{
private PreRequisite preRequisite;
private Sources sources;
private Source source;
private Phase phase;

//AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
private String prerequisiteType[]={"","Study Related","Process Related",
"Human Related","Literature Related","Other"};
 
//CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
public PreRequisiteForm() {
  
  initComponents();

    if (this.phase==null)
    {
      if (Global.currentPhase!=null)
        {
         if (Global.currentPhase.getPreRequisites()==null)
             Global.currentPhase.setPreRequisites(new PreRequisites());

         this.phase = Global.currentPhase.clone(true);
       }
      else
          JOptionPane.showMessageDialog(null, "Phase Does Not exists");
     }

     //---------------------------------------------------------------------
      this.refresh_preRequisite();
      this.populateForm();
      this.populate_preRequisite();
      this.setTitle("Phase Prerequisites: "+phase.getTitle());
}

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Prerequisite_jLayeredPane = new javax.swing.JLayeredPane();
        jLayeredPane17 = new javax.swing.JLayeredPane();
        PreRequisite_jDesktopPane = new javax.swing.JDesktopPane();
        Prerequisite_Source_jDesktopPane = new javax.swing.JDesktopPane();
        jPanel3 = new javax.swing.JPanel();
        Justification_Source_jDesktopPane = new javax.swing.JDesktopPane();
        Justification_Sources_Control_jDesktopPane = new javax.swing.JDesktopPane();
        Justification_Sources_Select_jButton = new javax.swing.JButton();
        Justification_Sources_UnSelect_jButton = new javax.swing.JButton();
        Justification_Sources_Edit_jButton = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        Sources_jList = new javax.swing.JList();
        jScrollPane6 = new javax.swing.JScrollPane();
        Selected_Sources_jList = new javax.swing.JList();
        jPanel6 = new javax.swing.JPanel();
        storeCustomised_jButton = new javax.swing.JButton();
        openCustomised_jButton = new javax.swing.JButton();
        loadCustomised_jButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane37 = new javax.swing.JScrollPane();
        Preset_Description_jTextPane = new javax.swing.JTextPane();
        jPanel2 = new javax.swing.JPanel();
        Preset_Lock_jButton = new javax.swing.JButton();
        Preset_Edit_jButton = new javax.swing.JButton();
        jScrollPane44 = new javax.swing.JScrollPane();
        Customised_Description_jTextPane = new javax.swing.JTextPane();
        jPanel4 = new javax.swing.JPanel();
        First_jButton = new javax.swing.JButton();
        Previous_jButton = new javax.swing.JButton();
        Next_jButton = new javax.swing.JButton();
        Last_jButton = new javax.swing.JButton();
        Refresh_jButton = new javax.swing.JButton();
        Delete_jButton = new javax.swing.JButton();
        Save_jButton = new javax.swing.JButton();
        Add_jButton = new javax.swing.JButton();
        New_jButton = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        Required_jCheckBox = new javax.swing.JCheckBox();
        Customised_jCheckBox = new javax.swing.JCheckBox();
        Type_jComboBox = new javax.swing.JComboBox();
        Prerequisite_Type_jLabel = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowDeactivated(java.awt.event.WindowEvent evt) {
                formWindowDeactivated(evt);
            }
        });

        jLayeredPane17.setBounds(0, 0, 0, 0);
        Prerequisite_jLayeredPane.add(jLayeredPane17, javax.swing.JLayeredPane.DEFAULT_LAYER);

        PreRequisite_jDesktopPane.setBackground(new java.awt.Color(255, 255, 204));
        PreRequisite_jDesktopPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        Prerequisite_Source_jDesktopPane.setBackground(new java.awt.Color(255, 255, 153));
        Prerequisite_Source_jDesktopPane.setBorder(javax.swing.BorderFactory.createTitledBorder(null, " Source Details ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        jPanel3.setBackground(new java.awt.Color(255, 255, 153));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 720, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 50, Short.MAX_VALUE)
        );

        jPanel3.setBounds(0, 390, 720, 50);
        Prerequisite_Source_jDesktopPane.add(jPanel3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Justification_Source_jDesktopPane.setBackground(new java.awt.Color(255, 255, 204));
        Justification_Source_jDesktopPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        Justification_Sources_Control_jDesktopPane.setBackground(new java.awt.Color(255, 255, 204));

        Justification_Sources_Select_jButton.setText("+>");
        Justification_Sources_Select_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Justification_Sources_Select_jButtonActionPerformed(evt);
            }
        });
        Justification_Sources_Select_jButton.setBounds(0, 0, 60, 20);
        Justification_Sources_Control_jDesktopPane.add(Justification_Sources_Select_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Justification_Sources_UnSelect_jButton.setText("<-");
        Justification_Sources_UnSelect_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Justification_Sources_UnSelect_jButtonActionPerformed(evt);
            }
        });
        Justification_Sources_UnSelect_jButton.setBounds(0, 22, 60, 20);
        Justification_Sources_Control_jDesktopPane.add(Justification_Sources_UnSelect_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Justification_Sources_Edit_jButton.setText("Edit");
        Justification_Sources_Edit_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Justification_Sources_Edit_jButtonActionPerformed(evt);
            }
        });
        Justification_Sources_Edit_jButton.setBounds(0, 50, 60, 20);
        Justification_Sources_Control_jDesktopPane.add(Justification_Sources_Edit_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Justification_Sources_Control_jDesktopPane.setBounds(320, 10, 60, 110);
        Justification_Source_jDesktopPane.add(Justification_Sources_Control_jDesktopPane, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Sources_jList.setBackground(new java.awt.Color(255, 255, 153));
        Sources_jList.setBorder(javax.swing.BorderFactory.createTitledBorder("  Available Sources  "));
        Sources_jList.setModel(this.getSourcesModel());
        Sources_jList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        Sources_jList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                Sources_jListValueChanged(evt);
            }
        });
        jScrollPane5.setViewportView(Sources_jList);

        jScrollPane5.setBounds(10, 10, 310, 230);
        Justification_Source_jDesktopPane.add(jScrollPane5, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Selected_Sources_jList.setBackground(new java.awt.Color(255, 255, 153));
        Selected_Sources_jList.setBorder(javax.swing.BorderFactory.createTitledBorder("  Selected Sources  "));
        Selected_Sources_jList.setModel(this.getSelectedSourcesModel());
        Selected_Sources_jList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        Selected_Sources_jList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                Selected_Sources_jListValueChanged(evt);
            }
        });
        jScrollPane6.setViewportView(Selected_Sources_jList);

        jScrollPane6.setBounds(380, 10, 300, 230);
        Justification_Source_jDesktopPane.add(jScrollPane6, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Justification_Source_jDesktopPane.setBounds(20, 34, 690, 250);
        Prerequisite_Source_jDesktopPane.add(Justification_Source_jDesktopPane, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jPanel6.setBackground(new java.awt.Color(255, 255, 204));
        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Customisation File"));
        jPanel6.setLayout(null);

        storeCustomised_jButton.setText("Store");
        storeCustomised_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                storeCustomised_jButtonActionPerformed(evt);
            }
        });
        jPanel6.add(storeCustomised_jButton);
        storeCustomised_jButton.setBounds(10, 20, 110, 25);

        openCustomised_jButton.setText("open");
        openCustomised_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openCustomised_jButtonActionPerformed(evt);
            }
        });
        jPanel6.add(openCustomised_jButton);
        openCustomised_jButton.setBounds(120, 20, 90, 25);

        loadCustomised_jButton.setText("Load");
        loadCustomised_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadCustomised_jButtonActionPerformed(evt);
            }
        });
        jPanel6.add(loadCustomised_jButton);
        loadCustomised_jButton.setBounds(210, 20, 100, 25);

        jPanel6.setBounds(20, 290, 320, 60);
        Prerequisite_Source_jDesktopPane.add(jPanel6, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Prerequisite_Source_jDesktopPane.setBounds(10, 220, 740, 360);
        PreRequisite_jDesktopPane.add(Prerequisite_Source_jDesktopPane, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jPanel1.setBackground(new java.awt.Color(255, 255, 153));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "PreRequisite Preset Description", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        Preset_Description_jTextPane.setBackground(new java.awt.Color(255, 255, 204));
        Preset_Description_jTextPane.setEditable(false);
        Preset_Description_jTextPane.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                Preset_Description_jTextPanePropertyChange(evt);
            }
        });
        jScrollPane37.setViewportView(Preset_Description_jTextPane);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane37, javax.swing.GroupLayout.DEFAULT_SIZE, 394, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane37, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel1.setBounds(10, 10, 430, 150);
        PreRequisite_jDesktopPane.add(jPanel1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jPanel2.setBackground(new java.awt.Color(255, 255, 153));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "PreRequisite Customised Description", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N
        jPanel2.setLayout(null);

        Preset_Lock_jButton.setText("Lock Preset");
        Preset_Lock_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Preset_Lock_jButtonActionPerformed(evt);
            }
        });
        jPanel2.add(Preset_Lock_jButton);
        Preset_Lock_jButton.setBounds(160, 110, 130, 25);

        Preset_Edit_jButton.setText("Edit Preset");
        Preset_Edit_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Preset_Edit_jButtonActionPerformed(evt);
            }
        });
        jPanel2.add(Preset_Edit_jButton);
        Preset_Edit_jButton.setBounds(20, 110, 130, 25);

        Customised_Description_jTextPane.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                Customised_Description_jTextPanePropertyChange(evt);
            }
        });
        jScrollPane44.setViewportView(Customised_Description_jTextPane);

        jPanel2.add(jScrollPane44);
        jScrollPane44.setBounds(18, 16, 270, 90);

        jPanel2.setBounds(450, 10, 300, 150);
        PreRequisite_jDesktopPane.add(jPanel2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jPanel4.setBackground(new java.awt.Color(255, 255, 153));
        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        First_jButton.setText("<< First");
        First_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                First_jButtonActionPerformed(evt);
            }
        });

        Previous_jButton.setText("< Previous");
        Previous_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Previous_jButtonActionPerformed(evt);
            }
        });

        Next_jButton.setText("Next >");
        Next_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Next_jButtonActionPerformed(evt);
            }
        });

        Last_jButton.setText("Last >>");
        Last_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Last_jButtonActionPerformed(evt);
            }
        });

        Refresh_jButton.setText("Refresh");
        Refresh_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Refresh_jButtonActionPerformed(evt);
            }
        });

        Delete_jButton.setText("Delete");
        Delete_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Delete_jButtonActionPerformed(evt);
            }
        });

        Save_jButton.setText("Save");
        Save_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Save_jButtonActionPerformed(evt);
            }
        });

        Add_jButton.setText("Add+");
        Add_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Add_jButtonActionPerformed(evt);
            }
        });

        New_jButton.setText("New");
        New_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                New_jButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(First_jButton, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Previous_jButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(Next_jButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(Last_jButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(Refresh_jButton, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(New_jButton, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(Save_jButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Add_jButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Delete_jButton, javax.swing.GroupLayout.PREFERRED_SIZE, 68, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(First_jButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 23, Short.MAX_VALUE)
                    .addComponent(Delete_jButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 23, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(Previous_jButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, Short.MAX_VALUE)
                        .addComponent(Next_jButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, Short.MAX_VALUE)
                        .addComponent(Last_jButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, Short.MAX_VALUE)
                        .addComponent(New_jButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, Short.MAX_VALUE)
                        .addComponent(Save_jButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, Short.MAX_VALUE)
                        .addComponent(Add_jButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, Short.MAX_VALUE)
                        .addComponent(Refresh_jButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, Short.MAX_VALUE)))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        jPanel4.setBounds(10, 590, 740, 50);
        PreRequisite_jDesktopPane.add(jPanel4, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jPanel5.setBackground(new java.awt.Color(255, 255, 153));
        jPanel5.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel5.setLayout(null);

        Required_jCheckBox.setBackground(new java.awt.Color(255, 255, 153));
        Required_jCheckBox.setText("Required");
        jPanel5.add(Required_jCheckBox);
        Required_jCheckBox.setBounds(225, 8, 96, 26);

        Customised_jCheckBox.setBackground(new java.awt.Color(255, 255, 153));
        Customised_jCheckBox.setText("Customised");
        Customised_jCheckBox.setEnabled(false);
        jPanel5.add(Customised_jCheckBox);
        Customised_jCheckBox.setBounds(321, 11, 103, 23);

        Type_jComboBox.setMaximumRowCount(7);
        Type_jComboBox.setModel(new DefaultComboBoxModel(this.prerequisiteType));
        jPanel5.add(Type_jComboBox);
        Type_jComboBox.setBounds(65, 8, 154, 26);

        Prerequisite_Type_jLabel.setText("Type");
        jPanel5.add(Prerequisite_Type_jLabel);
        Prerequisite_Type_jLabel.setBounds(14, 8, 46, 26);

        jPanel5.setBounds(10, 170, 740, 40);
        PreRequisite_jDesktopPane.add(jPanel5, javax.swing.JLayeredPane.DEFAULT_LAYER);

        PreRequisite_jDesktopPane.setBounds(10, 10, 760, 650);
        Prerequisite_jLayeredPane.add(PreRequisite_jDesktopPane, javax.swing.JLayeredPane.DEFAULT_LAYER);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Prerequisite_jLayeredPane, javax.swing.GroupLayout.DEFAULT_SIZE, 779, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(Prerequisite_jLayeredPane, javax.swing.GroupLayout.DEFAULT_SIZE, 661, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Preset_Description_jTextPanePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_Preset_Description_jTextPanePropertyChange
        if (this.preRequisite!=null)
            this.preRequisite.setPresetDescription(this.Preset_Description_jTextPane.getText());
    }//GEN-LAST:event_Preset_Description_jTextPanePropertyChange

    private void Preset_Lock_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Preset_Lock_jButtonActionPerformed
        
    this.disable_preset();
}//GEN-LAST:event_Preset_Lock_jButtonActionPerformed

    private void Preset_Edit_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Preset_Edit_jButtonActionPerformed
      this.enable_preset();

    }//GEN-LAST:event_Preset_Edit_jButtonActionPerformed

    private void Customised_Description_jTextPanePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_Customised_Description_jTextPanePropertyChange
        
        if (this.preRequisite!=null)
            this.preRequisite.setCustomisedDescription(this.Customised_Description_jTextPane.getText());
}//GEN-LAST:event_Customised_Description_jTextPanePropertyChange

    private void Add_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Add_jButtonActionPerformed
    this.save_preRequisite();
    this.clear_PreRequisite();
    First_jButton.setEnabled(false);
    Last_jButton.setEnabled(false);
    Next_jButton.setEnabled(false);
    Previous_jButton.setEnabled(false);
    New_jButton.setEnabled(false);
    Save_jButton.setEnabled(false);
    Delete_jButton.setEnabled(false);
    Refresh_jButton.setEnabled(true);

}//GEN-LAST:event_Add_jButtonActionPerformed

    private void Refresh_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Refresh_jButtonActionPerformed
    this.refresh_preRequisite();
    First_jButton.setEnabled(true);
    Last_jButton.setEnabled(true);
    Next_jButton.setEnabled(true);
    Previous_jButton.setEnabled(true);
    New_jButton.setEnabled(true);
    Save_jButton.setEnabled(true);
    Delete_jButton.setEnabled(true);
    //Refresh_jButton.setEnabled(false);
}//GEN-LAST:event_Refresh_jButtonActionPerformed

    private void Save_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Save_jButtonActionPerformed
    this.save_preRequisite();
}//GEN-LAST:event_Save_jButtonActionPerformed

    private void New_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_New_jButtonActionPerformed
    this.clear_PreRequisite();
    }//GEN-LAST:event_New_jButtonActionPerformed

    private void Next_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Next_jButtonActionPerformed
      this.next_preRequisite();
    }//GEN-LAST:event_Next_jButtonActionPerformed

    private void Previous_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Previous_jButtonActionPerformed
        this.previous_preRequisite();
    }//GEN-LAST:event_Previous_jButtonActionPerformed

    private void First_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_First_jButtonActionPerformed
    this.first_preRequisite();
    }//GEN-LAST:event_First_jButtonActionPerformed

    private void Last_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Last_jButtonActionPerformed
    this.last_preRequisite();
    }//GEN-LAST:event_Last_jButtonActionPerformed

    private void Delete_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Delete_jButtonActionPerformed
    this.delete_preRequisite();
    }//GEN-LAST:event_Delete_jButtonActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated

        this.Sources_jList.setModel(this.getSourcesModel());
        
    }//GEN-LAST:event_formWindowActivated

    private void formWindowDeactivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowDeactivated

         if (this.phase != null) {
               this.phase.save();
        }
         Global.currentPhase = this.phase.clone(true);

    }//GEN-LAST:event_formWindowDeactivated

    private void Justification_Sources_Select_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Justification_Sources_Select_jButtonActionPerformed
/*
 if (this.preRequisite!=null && source !=null)
 {
        if (preRequisite.getSources()!=null)
            this.preRequisite.setSources(new Sources());
 
    preRequisite.getSources().save(source);
    this.Selected_Sources_jList.setModel(this.getSelectedSourcesModel());
    this.populateForm();
  }

*/

if (this.sources==null)
    this.sources=new Sources();

 if (this.preRequisite!=null && source !=null && sources!=null)
   {
     this.sources.save(source);          
     this.preRequisite.setSources(sources);                
   }

this.Selected_Sources_jList.setModel(this.getSelectedSourcesModel());
this.populateForm();

    }//GEN-LAST:event_Justification_Sources_Select_jButtonActionPerformed


    private void Justification_Sources_UnSelect_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Justification_Sources_UnSelect_jButtonActionPerformed

        if (this.preRequisite!=null && this.sources!=null )
            this.delete_slected_source();

        this.Selected_Sources_jList.setModel(this.getSelectedSourcesModel());        
        this.populateForm();
    }//GEN-LAST:event_Justification_Sources_UnSelect_jButtonActionPerformed

    private void Justification_Sources_Edit_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Justification_Sources_Edit_jButtonActionPerformed
        SourceForm projectSourceForm=null;
        projectSourceForm=new SourceForm((process_model.issue.tracibility.Source) this.source);
    }//GEN-LAST:event_Justification_Sources_Edit_jButtonActionPerformed

    private void Sources_jListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_Sources_jListValueChanged
        if (Global.project !=null &&  Global.project.getSources()!=null &&
                Global.project.getSources().getSourcesList().size()>0)
            if (this.Sources_jList.getSelectedIndex()>=0)

this.source=(Source) Global.project.getSources().getSourcesList().get(this.Sources_jList.getSelectedIndex());

    }//GEN-LAST:event_Sources_jListValueChanged

    private void Selected_Sources_jListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_Selected_Sources_jListValueChanged
        if (this.preRequisite!=null && this.preRequisite.getSources()!=null)
            if (this.Selected_Sources_jList.getSelectedIndex()>=0)
                
                this.source= (Source) this.preRequisite.getSources().getSourcesList().
                        get(this.Selected_Sources_jList.getSelectedIndex());
    }//GEN-LAST:event_Selected_Sources_jListValueChanged

    private void storeCustomised_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_storeCustomised_jButtonActionPerformed
    this.store();
  
    }//GEN-LAST:event_storeCustomised_jButtonActionPerformed

    private void openCustomised_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openCustomised_jButtonActionPerformed
    this.open();
    }//GEN-LAST:event_openCustomised_jButtonActionPerformed

    private void loadCustomised_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadCustomised_jButtonActionPerformed
    this.load();
    }//GEN-LAST:event_loadCustomised_jButtonActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
//    System.runFinalization();
    System.gc();        
    }//GEN-LAST:event_formWindowClosed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
    this.save_preRequisite();
    }//GEN-LAST:event_formWindowClosing

//------------------------------------------------------------------------------
//---------------------------------( Store )------------------------------------
//------------------------------------------------------------------------------
private void store()
 {
   this.save_preRequisite();      
   
    int decision=JOptionPane.showConfirmDialog(null, "Would you like to \n use the default customisation location?");
    if (decision==0)            
       this.phase.getPreRequisites().store(null, null);        
    else
    {
       File selectedFile=null;
       selectedFile=Tools.chooseFile("Choose the location", null, null, true);        
       String fileLocation=null;    
       if (selectedFile!=null)
           selectedFile.getPath();
       
       String fileName=null;
       if (Global.currentPhase!=null && Global.currentPhase.getName()!=null)           
           fileName=Global.currentPhase.getNumber()+"- "+Global.currentPhase.getName();
       
       this.phase.getPreRequisites().store(fileLocation, fileName);
    }         
}     

//------------------------------------------------------------------------------
//---------------------------------( Open )-------------------------------------
//------------------------------------------------------------------------------

private void open()
 {

  int decision=JOptionPane.showConfirmDialog(null, 
           "This will clear all the currunt customisation "
          + "\nAre you sure you want to continue?");
  if (decision==0)            
   {     
      PreRequisites preRequisites= new PreRequisites();
       preRequisites=preRequisites.open(null);          
       this.phase.setPreRequisites(preRequisites.clone());
       this.phase.save();       
       this.refresh_preRequisite();
    }
     
 }         


//------------------------------------------------------------------------------
//---------------------------------( Load )-------------------------------------
//------------------------------------------------------------------------------
private void load()
 {
  int decision=JOptionPane.showConfirmDialog(null, 
          "This will clear all the currunt customisation "
          + "\nAre you sure you want to continue?");
  if (decision==0)            
   {     
      PreRequisites preRequisites= new PreRequisites();     
      preRequisites=preRequisites.load();
      this.phase.setPreRequisites(preRequisites.clone());
      this.phase.save();
      this.refresh_preRequisite();
    }     
 }         


//SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
//****************************************************************************
//                              Save Prerequisite
//****************************************************************************
//SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS

 private void save_preRequisite()
 {
   try
     {
    if (this.preRequisite==null)
        this.preRequisite=new PreRequisite();
     //
     if(this.Customised_Description_jTextPane.getText()!=null
     && !this.Customised_Description_jTextPane.getText().equals(""))
     {
        this.preRequisite.setCustomisedDescription(this.Customised_Description_jTextPane.getText());
        this.preRequisite.setCustomised(true);
        Customised_jCheckBox.setSelected(true);
     }
     else
     {
      int decision=JOptionPane.showConfirmDialog(null, "Customised Pre-Requiites are empty.. do you want to copy the preset Pre-Requisites");
      if (decision==0)
        {
           this.preRequisite.setCustomisedDescription(this.Preset_Description_jTextPane.getText());
           this.preRequisite.setCustomised(true);
           Customised_jCheckBox.setSelected(true);
        }
      else
      {
           this.preRequisite.setCustomised(false);
           this.Customised_jCheckBox.setSelected(false);
           this.preRequisite.setCustomisedDescription(null);
           this.Customised_Description_jTextPane.setText("");
      }
       }
     

     //
     if(this.Preset_Description_jTextPane.getText()!=null
     && !this.Preset_Description_jTextPane.getText().equals(""))
        this.preRequisite.setPresetDescription(this.Preset_Description_jTextPane.getText());
     //
     this.preRequisite.setRequired(this.Required_jCheckBox.isSelected());
     
     this.preRequisite.setPreRequisiteTypeIndex(this.Type_jComboBox.getSelectedIndex());

     // make sure the PreRequisites exists in the phase
     if (this.phase.getPreRequisites()==null)
         this.phase.setPreRequisites(new PreRequisites());

      this.phase.getPreRequisites().save(preRequisite);
      this.phase.save();
      this.populate_preRequisite();
     } catch (Exception ex) {
            Logger.getLogger(PreRequisiteForm.class.getName()).log(Level.SEVERE, null, ex);
     }
  }

 
 //DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
//****************************************************************************
//                           Delete Solution Evidence
//DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
//****************************************************************************
 private void delete_slected_source()
   {
    if (this.preRequisite!=null &&this.sources!=null && this.source!=null &&
            this.sources.getSourcesList().size()>0)
    {
        int index= this.preRequisite.getSources().getSourcesList().indexOf(this.source);
        if (this.preRequisite.getSources().delete(this.source)==0);
        {
            if (this.preRequisite.getSources().getSourcesList().size()>0)
            {
                if (index==0)
                    this.source = (Source) this.preRequisite.getSources().getSourcesList().get(index);
                else if (index>0)
                    this.source = (Source) this.preRequisite.getSources().getSourcesList().get(index-1);
            }
        }
     this.save_preRequisite();
     this.Selected_Sources_jList.setModel(this.getSelectedSourcesModel());
 }
}


//RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR
//****************************************************************************
//                              Refresh
//****************************************************************************
//RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR

 private void refresh_preRequisite()
 {
    if (this.phase.getPreRequisites()!=null && this.phase.getPreRequisites().getPreRequisitesList().size()>0)
    {
        this.preRequisite = this.phase.getPreRequisites().getPreRequisite(0);                
    }
    //else
        //System.out.print(" No PreRequisite is available");
    
    this.refresh_source();
    this.populate_preRequisite();
    this.populateForm();
}

//****************************************************************************
//                              Refresh Source
//****************************************************************************
private void refresh_source()
 {
    if (this.preRequisite!=null && this.preRequisite.getSources()!=null)
    {
        this.sources=this.preRequisite.getSources();
        this.Selected_Sources_jList.setModel(this.getSelectedSourcesModel());
    }
    //else
        //System.out.print(" No sources available");
}

//DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
//****************************************************************************
//                              Delete PrePrequisite
//****************************************************************************
//DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD

 private void delete_preRequisite()
    {    
    if (this.preRequisite!=null && this.phase.getPreRequisites()!=null)
    {
        int index= this.phase.getPreRequisites().getPreRequisitesList().indexOf(this.preRequisite);
        if (this.phase.getPreRequisites().delete(this.preRequisite));
        {
            if (this.phase.getPreRequisites().getPreRequisitesList().size()>0)
            {
                if (index==0)
                    this.preRequisite = this.phase.getPreRequisites().getPreRequisite(index);
                else
                    this.preRequisite = this.phase.getPreRequisites().getPreRequisite(index-1);
                
                this.populate_preRequisite();
            }
            else
            this.clear_PreRequisite();
        }
     this.phase.save();
     
     //------------------------------------------------------------------------
     if (this.phase.getPreRequisites().getPreRequisitesList().size()==0)
     {
         this.phase.setPreRequisites(null);
         this.populateForm();
     }
 }
}

//FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
//****************************************************************************
//                     First Prerequisite
//****************************************************************************
//FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
 private void first_preRequisite()
    {
      if(this.phase.getPreRequisites()!=null)
        {
                if (this.phase.getPreRequisites().getFirst()!=null)
                {
                    this.save_preRequisite();
                    this.preRequisite=this.phase.getPreRequisites().getFirst();
                    this.clear_source();
                    this.refresh_source();
                    this.populate_preRequisite();
                    this.populateForm();
                }
        }
        //else
            //System.out.print("No Phase PreRequisits is found yet ");
 }

//NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
//****************************************************************************
//                     Last Prerequisite & Source
//****************************************************************************
//NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
 private void last_preRequisite()
    {
      if(this.phase.getPreRequisites()!=null)
        {
                if (this.phase.getPreRequisites().getLast()!=null)
                {
                    this.save_preRequisite();
                    this.preRequisite=this.phase.getPreRequisites().getLast();
                    this.clear_source();
                    this.refresh_source();
                    this.populate_preRequisite();
                    this.populateForm();
                }
        }
        //else
            //System.out.print("No Phase PreRequisits is found yet ");

 }

//NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
//****************************************************************************
//                     Next Prerequisite & Source
//****************************************************************************
//NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
 private void next_preRequisite()
    {
      if(this.phase.getPreRequisites()!=null)
        {
            if (this.preRequisite!=null)
            {
                if (this.phase.getPreRequisites().getNext(this.preRequisite)!=null)
                {
                    this.save_preRequisite();
                    this.preRequisite=this.phase.getPreRequisites().getNext(this.preRequisite);
                    this.clear_source();
                    this.refresh_source();
                    this.populate_preRequisite();
                    this.populateForm();
                }
            }
        }
        //else
            //System.out.print("No Phase PreRequisits is found yet ");
    }


 //NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
//****************************************************************************
//                     Next Prerequisite & Source
//****************************************************************************
//NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
 private void previous_preRequisite()
    {
      if(this.phase.getPreRequisites()!=null)
        {
            if (this.preRequisite!=null)
            {
                if (this.phase.getPreRequisites().getPrevious(this.preRequisite)!=null)
                {
                    this.save_preRequisite();
                    this.preRequisite=this.phase.getPreRequisites().getPrevious(this.preRequisite);
                    this.clear_source();
                    this.refresh_source();
                    this.populate_preRequisite();
                    this.populateForm();
                }
            }
        }
        //else
            //System.out.print("No Phase PreRequisits is found yet ");
    }

//CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
//****************************************************************************
//                     Clear Source Prerequisite & Source
//****************************************************************************
//CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

 private void clear_PreRequisite()
{
     this.clear_PreRequisiteForm();
     this.clear_source();     
     this.preRequisite=new PreRequisite();
 }

 //CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
 //                         Clear Prerequisite Form
 //CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
 private void clear_PreRequisiteForm()
{
     this.Customised_Description_jTextPane.setText("");
     this.Preset_Description_jTextPane.setText("");
     this.Customised_jCheckBox.setSelected(false);
     this.Required_jCheckBox.setSelected(false);
     this.Type_jComboBox.setSelectedIndex(0);
 }


 //CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
 //                              Clear Source
 //CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
 private void clear_source( )
{
     this.sources=null;
     this.source=null;
 }

//PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
//                         Populate Prerequisite Form
//PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP

 private void populate_preRequisite()
{
     if (preRequisite!=null)
     {
         if (preRequisite.getCustomisedDescription()!=null)
            this.Customised_Description_jTextPane.setText(preRequisite.getCustomisedDescription());
         else
           this.Customised_Description_jTextPane.setText("");
         //
         if (preRequisite.getPresetDescription()!=null)
            this.Preset_Description_jTextPane.setText(preRequisite.getPresetDescription());
         else
             this.Preset_Description_jTextPane.setText("");
         //
         this.Customised_jCheckBox.setSelected(preRequisite.isCustomised());
         this.Required_jCheckBox.setSelected(preRequisite.isRequired());
         //
         if (preRequisite.getType()!=null)
             this.Type_jComboBox.setSelectedIndex(preRequisite.getType().ordinal()+1);
         else
             this.Type_jComboBox.setSelectedIndex(0);

//----------------------------------------------------------------------------
         this.Selected_Sources_jList.setModel(this.getSelectedSourcesModel());
         this.Selected_Sources_jList.setSelectedIndex(-1);
         //
         this.Sources_jList.setModel(this.getSourcesModel());
         this.Sources_jList.setSelectedIndex(-1);
     }    
this.populateForm();
 }

//PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
//                              Populate Form
//PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
private void populateForm()
{
    if (this.phase!=null)
        this.setTitle("PrePequisites for:        "+this.phase.getTitle());
    //-----------------------------------------------------------------------
    this.repaint();
    this.pack();
 }
 //============================================================================
 //============================================================================
 private void disable_preset()
{
   this.Preset_Description_jTextPane.setEditable(false);
   this.Preset_Lock_jButton.setEnabled(false);
   this.Preset_Edit_jButton.setEnabled(true);
   this.Preset_Description_jTextPane.setBackground(PreRequisite_jDesktopPane.getBackground());
}
//============================================================================
//============================================================================
 private void enable_preset()
{
    this.Preset_Description_jTextPane.setEditable(true);
    this.Preset_Description_jTextPane.setBackground(Color.white);
    this.Preset_Lock_jButton.setEnabled(true);
    this.Preset_Edit_jButton.setEnabled(false);
 }
//============================================================================
//============================================================================

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Add_jButton;
    private javax.swing.JTextPane Customised_Description_jTextPane;
    private javax.swing.JCheckBox Customised_jCheckBox;
    private javax.swing.JButton Delete_jButton;
    private javax.swing.JButton First_jButton;
    private javax.swing.JDesktopPane Justification_Source_jDesktopPane;
    private javax.swing.JDesktopPane Justification_Sources_Control_jDesktopPane;
    private javax.swing.JButton Justification_Sources_Edit_jButton;
    private javax.swing.JButton Justification_Sources_Select_jButton;
    private javax.swing.JButton Justification_Sources_UnSelect_jButton;
    private javax.swing.JButton Last_jButton;
    private javax.swing.JButton New_jButton;
    private javax.swing.JButton Next_jButton;
    private javax.swing.JDesktopPane PreRequisite_jDesktopPane;
    private javax.swing.JDesktopPane Prerequisite_Source_jDesktopPane;
    private javax.swing.JLabel Prerequisite_Type_jLabel;
    private javax.swing.JLayeredPane Prerequisite_jLayeredPane;
    private javax.swing.JTextPane Preset_Description_jTextPane;
    private javax.swing.JButton Preset_Edit_jButton;
    private javax.swing.JButton Preset_Lock_jButton;
    private javax.swing.JButton Previous_jButton;
    private javax.swing.JButton Refresh_jButton;
    private javax.swing.JCheckBox Required_jCheckBox;
    private javax.swing.JButton Save_jButton;
    private javax.swing.JList Selected_Sources_jList;
    private javax.swing.JList Sources_jList;
    private javax.swing.JComboBox Type_jComboBox;
    private javax.swing.JLayeredPane jLayeredPane17;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane37;
    private javax.swing.JScrollPane jScrollPane44;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JButton loadCustomised_jButton;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JButton openCustomised_jButton;
    private javax.swing.JButton storeCustomised_jButton;
    // End of variables declaration//GEN-END:variables


//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
//                       Get Project Resources Model
//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
public  DefaultComboBoxModel getSourcesModel()
{
  DefaultComboBoxModel dcm=null;
  ArrayList<Source> sourcesList=new ArrayList<Source>();
  String[] sourcesArrayNames = null;
  if (Global.project!=null && Global.project.getSources()!=null)
  {
      if ( Global.project.getSources().getSourcesList().size()>0)
      {
        sourcesList=Global.project.getSources().getSourcesList();
        int size=sourcesList.size();
        sourcesArrayNames = new String[size];
        int i=0;
        for (Object o:sourcesList)
            {
              //--------------------------------------------------------------
              //Source thisSource=(Source) o;
              String result="";
             if (o.getClass().getSimpleName().equals("InternalSource"))
              {
                  InternalSource thisSource=(InternalSource) o;
                  result=thisSource.toString();
              }
              else if (o.getClass().getSimpleName().equals("ExternalSource"))
              {
                  ExternalSource thisSource=(ExternalSource) o;
                  result=thisSource.toString();
              }
              else if (o.getClass().getSimpleName().equals("HumanSource"))
              {
                  HumanSource thisSource=(HumanSource) o;
                  result=thisSource.toString();
              }
              //--------------------------------------------------------------
              sourcesArrayNames[i]=result;
              i=i+1;
              //--------------------------------------------------------------
             }
        dcm=new DefaultComboBoxModel(sourcesArrayNames);
        return dcm;
        }
     else
      {
        String names[] ={"<No sources available>"};
        dcm=new DefaultComboBoxModel(names);
        return dcm;
      }
  }
 else
    {
    String names[] ={"<No sources available>"};
    dcm=new DefaultComboBoxModel(names);
     return dcm;
    }
 }



//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
//                       Get Project Resources Model
//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
public  DefaultComboBoxModel getSelectedSourcesModel()
{
  DefaultComboBoxModel dcm=null;
  ArrayList<Source> selectedJustificationEvidencesList=new ArrayList<Source>();
  String[] justificationArrayNames = null;
  if (this.preRequisite!=null)
  {
      if (this.preRequisite.getSources().getSourcesList().size()>0)
      {
        selectedJustificationEvidencesList=this.preRequisite.getSources().getSourcesList();
        int size=selectedJustificationEvidencesList.size();
        justificationArrayNames = new String[size];
        int i=0;
        for (Object o:selectedJustificationEvidencesList)
            {
            //--------------------------------------------------------------
              String result="";
              if (o.getClass().getSimpleName().equals("InternalSource"))
              {
                  InternalSource thisSource=(InternalSource) o;
                  result=thisSource.toString();
              }
              else if (o.getClass().getSimpleName().equals("ExternalSource"))
              {
                  ExternalSource thisSource=(ExternalSource) o;
                  result=thisSource.toString();
              }
              else if (o.getClass().getSimpleName().equals("HumanSource"))
              {
                  HumanSource thisSource=(HumanSource) o;
                  result=thisSource.toString();
              }
              //--------------------------------------------------------------
              justificationArrayNames[i]=result;
              i=i+1;
             }
        dcm=new DefaultComboBoxModel(justificationArrayNames);
        return dcm;
        }
     else
      {
        String names[] ={"<No causes traced yest>"};
        dcm=new DefaultComboBoxModel(names);
        return dcm;
      }
  }
 else
    {
    String names[] ={"<No reasons recorded yet>"};
    dcm=new DefaultComboBoxModel(names);
     return dcm;
    }
 }
}
