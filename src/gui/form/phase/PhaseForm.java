package gui.form.phase;

import global.Config;
import global.Global;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PhaseForm.java
 *
 * Created on 02-Sep-2010, 08:16:09
 */

/**
 *
 * @author amb04
 */
//import javax.persistence.Persistence;
//import Process_model.issue.persistence;
import gui.form.MainMenu;
import gui.form.task.ObjectivesForm;
import gui.form.task.PerformingForm;
import gui.form.task.PlanningForm;
import gui.form.task.PreRequisiteForm;
import gui.form.task.ValidatingForm;
import java.awt.event.KeyEvent;
import java.io.File;

import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;
import process_model.basic.enums.Status;
import process_model.basic.util.ArrayList;
import process_model.phase.Phase;
import process_model.phase.delivery.Delivery;
import process_model.phase.delivery.data.PreProcessedData;
import process_model.phase.objective.Objectives;
import process_model.phase.prerequisite.PreRequisites;
import process_model.phase.stage.planning.Planning;
import toolbox.Tools;
import toolbox.Tree;
import weka.gui.ComponentHelper;
//
/**
 *
 * @author amb04
 */
public class PhaseForm extends javax.swing.JFrame {
private Phase phase=null;
private boolean successfullFeedback=false;
    /** Creates new form PhaseForm */
//----------------------------------------------------------------------------
public PhaseForm()
{
initComponents();
enhance_menu();
if (this.phase==null)
{
    if (Global.currentPhase!=null)
        this.phase = Global.currentPhase.clone(true);
    else
        JOptionPane.showMessageDialog(null, "Phase Does Not exists");
}
this.populateForm();
this.setVisible(true);
}


   private void enhance_menu()
    {
    Phase_Save_jMenuItem.setIcon(ComponentHelper.getImageIcon(Config.iconsLocation+"save.gif"));
    Phase_Save_jMenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, KeyEvent.CTRL_MASK));
    //
    Phase_SaveAs_jMenuItem.setIcon(ComponentHelper.getImageIcon(Config.iconsLocation+"saveAs.png"));
    Phase_SaveAs_jMenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, KeyEvent.CTRL_MASK + KeyEvent.SHIFT_MASK));
    //
    Phase_Load_jMenuItem.setIcon(ComponentHelper.getImageIcon(Config.iconsLocation+"open.gif"));
    Phase_Load_jMenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_L, KeyEvent.CTRL_MASK));
    //
    Phase_Iterate_jMenuItem.setIcon(ComponentHelper.getImageIcon(Config.iconsLocation+"iterate.png"));
    Phase_Iterate_jMenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_I, KeyEvent.CTRL_MASK));
    //
    Phase_Close_jMenuItem.setIcon(ComponentHelper.getImageIcon(Config.iconsLocation+"exit.gif"));
    Phase_Close_jMenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_X, KeyEvent.CTRL_MASK));
    
    this.PreRequisite_MenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_R, KeyEvent.CTRL_MASK));
    this.Objectives_MenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O, KeyEvent.CTRL_MASK));
    this.Planning_MenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_P, KeyEvent.CTRL_MASK));
    this.Performing_MenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_A, KeyEvent.CTRL_MASK));
    this.Validating_MenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_V, KeyEvent.CTRL_MASK));
    this.Reporting_MenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_D, KeyEvent.CTRL_MASK));


    this.repaint();
    }


    /** This method is called from within the constructor to
     * initialise the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the PhaseForm Editor.
     */
    //@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        preRequisite1 = new process_model.phase.prerequisite.PreRequisite();
        source1 = new process_model.issue.tracibility.Source();
        source2 = new process_model.issue.tracibility.Source();
        Phase_jPanel = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        Phase_Iterate_jButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        Phase_Feedback_Phase_jComboBox = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        Phase_Rollback_Version_jComboBox = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        Image_jDesktopPane = new javax.swing.JDesktopPane();
        jLabel4 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        Phase_Close_jButton = new javax.swing.JButton();
        Phase_Load_jButton = new javax.swing.JButton();
        Phase_SaveAs_jButton = new javax.swing.JButton();
        Phase_Save_jButton = new javax.swing.JButton();
        Customise_jButton = new javax.swing.JButton();
        canvas1 = new java.awt.Canvas();
        menuBar = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        Phase_Load_jMenuItem = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        Phase_Save_jMenuItem = new javax.swing.JMenuItem();
        Phase_SaveAs_jMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        Phase_Iterate_jMenuItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        Phase_Close_jMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        PreRequisite_MenuItem = new javax.swing.JMenuItem();
        Objectives_MenuItem = new javax.swing.JMenuItem();
        Planning_MenuItem = new javax.swing.JMenuItem();
        Performing_MenuItem = new javax.swing.JMenuItem();
        Validating_MenuItem = new javax.swing.JMenuItem();
        Reporting_MenuItem = new javax.swing.JMenuItem();

        setTitle("Phase Execution");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        Phase_jPanel.setBackground(new java.awt.Color(255, 255, 255));
        Phase_jPanel.setPreferredSize(new java.awt.Dimension(515, 700));
        Phase_jPanel.setLayout(null);

        jPanel4.setBackground(new java.awt.Color(255, 255, 204));
        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel4.setLayout(null);

        jPanel1.setBackground(new java.awt.Color(255, 255, 153));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(null);

        jLabel1.setBackground(new java.awt.Color(255, 255, 204));
        jLabel1.setText("Select phase to feedback to:");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(20, 80, 300, 20);

        Phase_Iterate_jButton.setFont(new java.awt.Font("Tahoma", 1, 11));
        Phase_Iterate_jButton.setText("Iterate");
        Phase_Iterate_jButton.setToolTipText("Iterate will reset all the successive phases which are based on this phase");
        Phase_Iterate_jButton.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        Phase_Iterate_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Phase_Iterate_jButtonActionPerformed(evt);
            }
        });
        jPanel1.add(Phase_Iterate_jButton);
        Phase_Iterate_jButton.setBounds(20, 20, 160, 40);

        jButton1.setText("Feedback Tree");
        jButton1.setToolTipText("You need to iterate to change/update the phase!, then you need to close the form to apply the change on the process");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1);
        jButton1.setBounds(280, 100, 140, 30);

        Phase_Feedback_Phase_jComboBox.setMaximumRowCount(12);
        Phase_Feedback_Phase_jComboBox.setModel(this.getFedbackPhaseNames());
        Phase_Feedback_Phase_jComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Phase_Feedback_Phase_jComboBoxActionPerformed(evt);
            }
        });
        jPanel1.add(Phase_Feedback_Phase_jComboBox);
        Phase_Feedback_Phase_jComboBox.setBounds(20, 100, 250, 30);

        jLabel3.setBackground(new java.awt.Color(255, 255, 204));
        jLabel3.setText("Select version to rollback to:");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(190, 10, 230, 20);

        Phase_Rollback_Version_jComboBox.setMaximumRowCount(100);
        Phase_Rollback_Version_jComboBox.setModel(this.getPhaseVersions());
        Phase_Rollback_Version_jComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Phase_Rollback_Version_jComboBoxActionPerformed(evt);
            }
        });
        jPanel1.add(Phase_Rollback_Version_jComboBox);
        Phase_Rollback_Version_jComboBox.setBounds(190, 30, 230, 30);

        jPanel4.add(jPanel1);
        jPanel1.setBounds(20, 20, 440, 150);

        jPanel2.setBackground(new java.awt.Color(255, 255, 153));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setMinimumSize(new java.awt.Dimension(505, 425));
        jPanel2.setLayout(null);

        Image_jDesktopPane.setBackground(new java.awt.Color(204, 204, 204));
        Image_jDesktopPane.setInheritsPopupMenu(true);
        Image_jDesktopPane.setMinimumSize(new java.awt.Dimension(410, 640));

        jLabel4.setBackground(new java.awt.Color(255, 255, 255));
        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/form/phase/phase.jpg"))); // NOI18N
        jLabel4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel4MouseClicked(evt);
            }
        });
        jLabel4.setBounds(10, 10, 380, 340);
        Image_jDesktopPane.add(jLabel4, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jPanel2.add(Image_jDesktopPane);
        Image_jDesktopPane.setBounds(20, 20, 400, 360);
        Image_jDesktopPane.getAccessibleContext().setAccessibleParent(this);

        jPanel4.add(jPanel2);
        jPanel2.setBounds(20, 190, 440, 390);

        jPanel3.setBackground(new java.awt.Color(255, 255, 153));
        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.setLayout(null);

        Phase_Close_jButton.setText("Close");
        Phase_Close_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Phase_Close_jButtonActionPerformed(evt);
            }
        });
        jPanel3.add(Phase_Close_jButton);
        Phase_Close_jButton.setBounds(330, 35, 90, 27);

        Phase_Load_jButton.setText("Load");
        Phase_Load_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Phase_Load_jButtonActionPerformed(evt);
            }
        });
        jPanel3.add(Phase_Load_jButton);
        Phase_Load_jButton.setBounds(230, 35, 100, 27);

        Phase_SaveAs_jButton.setText("Save As");
        Phase_SaveAs_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Phase_SaveAs_jButtonActionPerformed(evt);
            }
        });
        jPanel3.add(Phase_SaveAs_jButton);
        Phase_SaveAs_jButton.setBounds(100, 35, 130, 27);

        Phase_Save_jButton.setText("Save");
        Phase_Save_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Phase_Save_jButtonActionPerformed(evt);
            }
        });
        jPanel3.add(Phase_Save_jButton);
        Phase_Save_jButton.setBounds(20, 35, 80, 27);

        Customise_jButton.setText("Load Phase Tasks Customisation");
        Customise_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Customise_jButtonActionPerformed(evt);
            }
        });
        jPanel3.add(Customise_jButton);
        Customise_jButton.setBounds(19, 7, 400, 28);

        jPanel4.add(jPanel3);
        jPanel3.setBounds(20, 590, 440, 70);

        Phase_jPanel.add(jPanel4);
        jPanel4.setBounds(10, 10, 480, 670);

        getContentPane().add(Phase_jPanel, java.awt.BorderLayout.CENTER);
        getContentPane().add(canvas1, java.awt.BorderLayout.PAGE_START);

        menuBar.setBackground(new java.awt.Color(255, 255, 204));

        jMenu3.setText("Phase ");
        jMenu3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu3ActionPerformed(evt);
            }
        });

        Phase_Load_jMenuItem.setText("Load Phase");
        Phase_Load_jMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Phase_Load_jMenuItemActionPerformed(evt);
            }
        });
        jMenu3.add(Phase_Load_jMenuItem);
        jMenu3.add(jSeparator3);

        Phase_Save_jMenuItem.setText("Save");
        Phase_Save_jMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Phase_Save_jMenuItemActionPerformed(evt);
            }
        });
        jMenu3.add(Phase_Save_jMenuItem);

        Phase_SaveAs_jMenuItem.setText("Sava As");
        Phase_SaveAs_jMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Phase_SaveAs_jMenuItemActionPerformed(evt);
            }
        });
        jMenu3.add(Phase_SaveAs_jMenuItem);
        jMenu3.add(jSeparator1);

        Phase_Iterate_jMenuItem.setText("Iterate");
        Phase_Iterate_jMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Phase_Iterate_jMenuItemActionPerformed(evt);
            }
        });
        jMenu3.add(Phase_Iterate_jMenuItem);
        jMenu3.add(jSeparator2);

        Phase_Close_jMenuItem.setText("Close");
        Phase_Close_jMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Phase_Close_jMenuItemActionPerformed(evt);
            }
        });
        jMenu3.add(Phase_Close_jMenuItem);

        menuBar.add(jMenu3);

        editMenu.setText("Tasks");

        PreRequisite_MenuItem.setText("Phase PreRequisite");
        PreRequisite_MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PreRequisite_MenuItemActionPerformed(evt);
            }
        });
        editMenu.add(PreRequisite_MenuItem);

        Objectives_MenuItem.setText("Phase Objectives");
        Objectives_MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Objectives_MenuItemActionPerformed(evt);
            }
        });
        editMenu.add(Objectives_MenuItem);

        Planning_MenuItem.setText("Phase Plan");
        Planning_MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Planning_MenuItemActionPerformed(evt);
            }
        });
        editMenu.add(Planning_MenuItem);

        Performing_MenuItem.setText("Performed Activities");
        Performing_MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Performing_MenuItemActionPerformed(evt);
            }
        });
        editMenu.add(Performing_MenuItem);

        Validating_MenuItem.setText("Phase Validation");
        Validating_MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Validating_MenuItemActionPerformed(evt);
            }
        });
        editMenu.add(Validating_MenuItem);

        Reporting_MenuItem.setText("Phase Deliveries");
        Reporting_MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Reporting_MenuItemActionPerformed(evt);
            }
        });
        editMenu.add(Reporting_MenuItem);

        menuBar.add(editMenu);

        setJMenuBar(menuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

  private void File_newPhase_jMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_File_newPhase_jMenuItemActionPerformed
    // TODO add your handling code here:
  }//GEN-LAST:event_File_newPhase_jMenuItemActionPerformed

    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed

    }//GEN-LAST:event_saveMenuItemActionPerformed

    private void Phase_Exit_jMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Phase_Exit_jMenuItem1ActionPerformed
    //phase.store(null);
    phase.save();
    phase.setStatus(Status.SUSPENDED);
    this.dispose();

    }//GEN-LAST:event_Phase_Exit_jMenuItem1ActionPerformed

    private void Phase_Save_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Phase_Save_jButtonActionPerformed
      phase.store(null);
    }//GEN-LAST:event_Phase_Save_jButtonActionPerformed

    private void Phase_SaveAs_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Phase_SaveAs_jButtonActionPerformed

    if (Global.project !=null && Global.project.getLocation()!=null)
    {
        File selectedFile =Tools.chooseFile("Choose Phase location", null, Global.project.getLocation()+"/process/phase", true);
        String selectedFileString = (selectedFile != null) ? selectedFile.getPath() : null;
        if (selectedFileString!=null)
            phase.store(selectedFileString);

    }
    }//GEN-LAST:event_Phase_SaveAs_jButtonActionPerformed

    private void Phase_Load_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Phase_Load_jButtonActionPerformed

    //------------------------------------------------------------------------
       try {
        Phase p=new Phase();
        p=(Phase) p.open();
        if (p!=null)
        {
            this.phase=p;
        this.setTitle( phase.getId()+"   " +phase.getName()+"    "+ "Version= "+phase.getVersion());
        this.setVisible(true);
            this.repaint();
        }
        //else
          //System.out.print("Cannot open Phase... Phase not found");

        } catch (Exception ex) {
            Logger.getLogger(PhaseForm.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_Phase_Load_jButtonActionPerformed

    private void Phase_Close_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Phase_Close_jButtonActionPerformed
    this.phase.setStatus(Status.SUSPENDED);
    this.phase.save();
    this.dispose();
    }//GEN-LAST:event_Phase_Close_jButtonActionPerformed

    private void Phase_Iterate_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Phase_Iterate_jButtonActionPerformed
     
int decision=JOptionPane.showConfirmDialog(null, "Iterating the phase will reset all successive phases!\n"
                                                   + "Do you want to continue?");
    if (decision==0)
    {        
        this.phase.iterate();    
        if (Global.project!=null && Global.project.getProcess()!=null)
        this.phase.save();
        this.populateForm();
        JOptionPane.showMessageDialog(null, "Phase was iterated successfully!\n"
                                      + "You can always undo changes by rollback to an earlier iteration!");    
    }         
     
     
    }//GEN-LAST:event_Phase_Iterate_jButtonActionPerformed

    private void Phase_Rollback_Version_jComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Phase_Rollback_Version_jComboBoxActionPerformed
        // TODO add your handling code here:
        Phase_Rollback_Version_jComboBox= this.selectPhaseVersion(Phase_Rollback_Version_jComboBox);
        
        
if (this.phase.getNumber()==2 &&
        Global.project!=null && 
        Global.project.getProcess() !=null && 
        Global.project.getProcess().getPhases()!=null &&
        Global.project.getProcess().getPhases().getDataPreProcessing()!=null &&        
        Global.project.getProcess().getPhases().getDataPreProcessing().getResult()!=null &&
        Global.project.getProcess().getPhases().getDataPreProcessing().getResult().getMainDelivery()!=null &&
        Global.project.getProcess().getPhases().getDataPreProcessing().getLocation()!=null)        
{       
        PreProcessedData preProcessedData= new PreProcessedData();                
        preProcessedData=(PreProcessedData) Global.project.getProcess().getPhases().getDataPreProcessing().getResult().getMainDelivery();
        if (preProcessedData!=null && preProcessedData.getOutcomeURL()!=null)
        {
            if (Global.project.getInputs()!=null && 
                Global.project.getInputs().getMetabolomicsData()!=null && 
                Global.project.getInputs().getMetabolomicsData().getDataSet()!=null)
            {
                Global.project.getInputs().getMetabolomicsData().getDataSet().setOutcomeURL(preProcessedData.getOutcomeURL());
            }
            
            Global.activeDataSetFile= Tools.toFile(preProcessedData.getOutcomeURL());        
        }
}                
        
    }//GEN-LAST:event_Phase_Rollback_Version_jComboBoxActionPerformed

    private void Phase_Feedback_Phase_jComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Phase_Feedback_Phase_jComboBoxActionPerformed

        this.Phase_Feedback_Phase_jComboBox=this.selectFedbackPhaseName(Phase_Feedback_Phase_jComboBox);
        
        //abm:20-05-2011 this is added to to do an autamic iteration       
       int decision=JOptionPane.showConfirmDialog(null, "Feedback was successfull!\n"
                                                      + "Would you like to iterate the phase?");
       if (decision==0 && this.successfullFeedback==true)
       {
          Phase_Iterate_jButtonActionPerformed(evt);        
          this.dispose();
       }
      else       
           JOptionPane.showMessageDialog(null, "No change was made to the rolledback phase,\n"
                                             + "You can always iterate to make and apply any changes to the successive phases!");

    }//GEN-LAST:event_Phase_Feedback_Phase_jComboBoxActionPerformed

    //************************************************************************
    //                            Edit Menu
    //************************************************************************
    private void PreRequisite_MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PreRequisite_MenuItemActionPerformed
        new PreRequisiteForm().setVisible(true);
    }//GEN-LAST:event_PreRequisite_MenuItemActionPerformed

    private void Objectives_MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Objectives_MenuItemActionPerformed
        new ObjectivesForm().setVisible(true);
    }//GEN-LAST:event_Objectives_MenuItemActionPerformed

    private void Planning_MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Planning_MenuItemActionPerformed
         new PlanningForm().setVisible(true);

    }//GEN-LAST:event_Planning_MenuItemActionPerformed

    private void Performing_MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Performing_MenuItemActionPerformed
        new PerformingForm().setVisible(true);
    }//GEN-LAST:event_Performing_MenuItemActionPerformed

    private void Validating_MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Validating_MenuItemActionPerformed
        new ValidatingForm().setVisible(true);
    }//GEN-LAST:event_Validating_MenuItemActionPerformed

    private void Reporting_MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Reporting_MenuItemActionPerformed
        this.show_delivery();
    }//GEN-LAST:event_Reporting_MenuItemActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
       if (Tree.getSelectedObject()!=null &&
           Tree.getSelectedObject().getClass().getSimpleName().equals("Phase"))
        {
           this.phase = (Phase) Tree.getSelectedObject();
           this.phase.save();
           JOptionPane.showMessageDialog(null, "Feedback was successfull!\n"
                                             + "You can either iterate to make and apply any changes or\n"
                                             + "rollback to undo changes?");
        }
       this.phase=Global.currentPhase;
       this.populateForm();
       Tree.clearSelectedObject();
    }//GEN-LAST:event_formWindowActivated

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
 int decision=JOptionPane.showConfirmDialog(null, 
         "This will feedback to a selected phase in the tree.\n"
         + " The trgeted phase need to iterate to make and apply any changes.\n"
         + " Alternatively, You can do all of this using the list!\n"
         + " Do you want to continue?");
       if (decision==0)       
        Tree.creatPhaseFedbacksTree(this.phase);         
       

    }//GEN-LAST:event_jButton1ActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        this.phase.save();
    }//GEN-LAST:event_formWindowClosed

    private void jLabel4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel4MouseClicked

        int x=evt.getX();
        int y=evt.getY();
       //System.out.print("("+x+","+y+")");

       if (x>108 && x<266 && y>13 && y<70)
            new PreRequisiteForm().setVisible(true);

       else if(x > 8 && x < 148 && y > 95 && y < 154)
            new ObjectivesForm().setVisible(true);

       else if(x > 8 && x < 142 && y > 194 && y < 254)
           new PlanningForm().setVisible(true);

       else if(x > 120 && x < 257 && y > 276 && y < 335)
            new PerformingForm().setVisible(true);

       else if(x > 240 && x < 370 && y > 194 && y < 254)
       {
            ValidatingForm validatingForm= new ValidatingForm();
            this.setTitle("Phase Validating         "+Global.currentPhase.getTitle());
            validatingForm.setVisible(true);
       }
       
       else if(x > 240 && x < 370 && y > 94 && y < 154)
       {
          this.show_delivery();
        }

    }//GEN-LAST:event_jLabel4MouseClicked

    private void jMenu3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu3ActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_jMenu3ActionPerformed

    private void Phase_Close_jMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Phase_Close_jMenuItemActionPerformed
        this.phase.setStatus(Status.SUSPENDED);
        //this.phase.store(null);
        this.phase.save();
        this.dispose();
}//GEN-LAST:event_Phase_Close_jMenuItemActionPerformed

    private void Phase_Iterate_jMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Phase_Iterate_jMenuItemActionPerformed
        // TODO add your handling code here:
        this.Phase_Iterate_jButtonActionPerformed(evt);
}//GEN-LAST:event_Phase_Iterate_jMenuItemActionPerformed

    private void Phase_SaveAs_jMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Phase_SaveAs_jMenuItemActionPerformed
        this.Phase_SaveAs_jButtonActionPerformed(evt);
}//GEN-LAST:event_Phase_SaveAs_jMenuItemActionPerformed

    private void Phase_Save_jMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Phase_Save_jMenuItemActionPerformed
        this.Phase_Save_jButtonActionPerformed(evt);
}//GEN-LAST:event_Phase_Save_jMenuItemActionPerformed

    private void Phase_Load_jMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Phase_Load_jMenuItemActionPerformed
        this.Phase_Load_jButtonActionPerformed(evt);
}//GEN-LAST:event_Phase_Load_jMenuItemActionPerformed

    private void Customise_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Customise_jButtonActionPerformed
     this.customise();
    }//GEN-LAST:event_Customise_jButtonActionPerformed

       
private void customise()
{    
if (Global.project!=null && Global.project.getLocation()!=null)        
{
    // project location information
    //-----------------------------------------------------------------
    String projectName=Global.project.getName();
    String projectLocation=Global.project.getLocation();     
    boolean preRequisitesCustimisationPossible=true;
    boolean objectivesCustimisationPossible=true;
    boolean planningCustimisationPossible=true;
    boolean custimisationPossible= true;    
    
    //-------------------------------------------------------------------------    
    String custimisationLocation=projectLocation+ "/" + projectName+ "/Customisation/";    
    File custimisationFolder= new File(custimisationLocation);    
    if (!custimisationFolder.exists())
    {
            File allPhasesCustomisationFolder= new File(Config.defaultLocation+"/Customisation");            
            if  (allPhasesCustomisationFolder.exists() && allPhasesCustomisationFolder.isDirectory())   
            {
                int decision=JOptionPane.showConfirmDialog(null, 
                "Would  you like to import would all phases customisation from utilities (Prerequisites, Objecives and Planning) "
                + "\nAre you sure you want to continue?");
                if (decision==0)
                     Tools.copyDirectoryForce(allPhasesCustomisationFolder,custimisationFolder);
                else
                     custimisationPossible=false;
            }
            else
                 custimisationPossible=false;        
    }

        
    //-------------------------------------------------------------------------    
    String preRequisitesCustimisationLocation=projectLocation+ "/" + projectName+ "/Customisation/"+"PreRequisites";    
    File preRequisitesCustimisationFolder=new File(preRequisitesCustimisationLocation);
    if (!preRequisitesCustimisationFolder.exists())
    {
            File utilitiesCustomisationSubFolder= new File(Config.defaultLocation+"/Customisation/"+"PreRequisites");
            
            if  (utilitiesCustomisationSubFolder.exists() && utilitiesCustomisationSubFolder.isDirectory())   
            {
                int decision=JOptionPane.showConfirmDialog(null, 
                " Would you like to import would customised PreRequisites from utilities"
                + "\nAre you sure you want to continue?");
                if (decision==0)
                     Tools.copyDirectoryForce(utilitiesCustomisationSubFolder,preRequisitesCustimisationFolder);
                else
                     preRequisitesCustimisationPossible=false;
            }
            else
                 preRequisitesCustimisationPossible=false;        
    }
    
    //-------------------------------------------------------------------------    
    String objectivesCustimisationLocation=projectLocation+ "/" + projectName+ "/Customisation/"+"Objectives";
    File objectivesCustimisationFolder=new File(objectivesCustimisationLocation);
    if (!objectivesCustimisationFolder.exists())
    {
            File utilitiesCustomisationSubFolder= new File(Config.defaultLocation+"/Customisation/"+"Objectives");
            
            if  (utilitiesCustomisationSubFolder.exists() && utilitiesCustomisationSubFolder.isDirectory())   
            {
                int decision=JOptionPane.showConfirmDialog(null, 
                " Would you like to import would customised objectives from utilities"
                + "\nAre you sure you want to continue?");
                if (decision==0)
                     Tools.copyDirectoryForce(utilitiesCustomisationSubFolder,objectivesCustimisationFolder);
                else
                     objectivesCustimisationPossible=false;
            }
            else
                 objectivesCustimisationPossible=false;        
    }


    //-------------------------------------------------------------------------    
    String planningCustimisationLocation=projectLocation+ "/" + projectName+ "/Customisation/"+"Planning";
    File planningCustimisationFolder=new File(planningCustimisationLocation);
    if (!planningCustimisationFolder.exists())
    {
            File utilitiesCustomisationSubFolder= new File(Config.defaultLocation+"/Customisation/"+"Planning");
            
            if  (utilitiesCustomisationSubFolder.exists() && utilitiesCustomisationSubFolder.isDirectory())   
            {
                int decision=JOptionPane.showConfirmDialog(null, 
                "Would you like to import would customised planning from utilities"
                + "\nAre you sure you want to continue?");
                if (decision==0)
                     Tools.copyDirectoryForce(utilitiesCustomisationSubFolder,planningCustimisationFolder);
                else
                     planningCustimisationPossible=false;
            }
            else
                 planningCustimisationPossible=false;        
    }
                   

    

    
if (custimisationPossible)
{
    
  int decision=JOptionPane.showConfirmDialog(null, 
          "This will clear all the phase currunt customisation (Prerequisites, Objecives and Planning) "
          + "\nAre you sure you want to continue?");
  if (decision==0)            
   {
       if (this.phase!=null)
       {
           
           //------------------------------------------------------------------           
           if (this.phase.getPreRequisites()==null)
               this.phase.setPreRequisites( new PreRequisites());       

           if (preRequisitesCustimisationPossible)
           {
              PreRequisites preRequisites= new PreRequisites();     
              preRequisites=preRequisites.load();
              if(preRequisites!=null)
                this.phase.setPreRequisites(preRequisites.clone());               
           }
            else
                JOptionPane.showMessageDialog(null, " No preRequisites customisation file was found to load! "
                + "\nMake sure the source files are stored in customisations "
                + "in the project or in utilities!");
           
           //------------------------------------------------------------------           
            if (this.phase.getObjectives()==null)
               this.phase.setObjectives( new Objectives());       

            if (objectivesCustimisationPossible)
            {
               Objectives objectives= new Objectives();     
               objectives=objectives.load();
               if(objectives!=null)
                  this.phase.setObjectives(objectives.clone());
            }
            else
                JOptionPane.showMessageDialog(null, " No objectives customisation file was found to load! "
                + "\nMake sure the source files are stored in customisations "
                + "in the project or in utilities!");
            
       
           //------------------------------------------------------------------             
            if (this.phase.getPlanning()==null)
               this.phase.setPlanning( new Planning());       

            if(planningCustimisationPossible)
            {
               Planning planning= new Planning();     
               planning=planning.load();
               if(planning!=null)
                  this.phase.setPlanning(planning.clone());
            }            
            else 
                JOptionPane.showMessageDialog(null, " No Planning customisation file was found to load! "
                + "\nMake sure the source files are stored in customisations "
                + "in the project or in utilities!");
                      
           this.phase.save();
           
           if (custimisationPossible && preRequisitesCustimisationPossible && 
               objectivesCustimisationPossible && planningCustimisationPossible)
               JOptionPane.showMessageDialog(null, "Phase tasks Customisation was successful!");
           
       }
   }

} 
else 
    JOptionPane.showMessageDialog(null, " No customisation file was found to load! "
            + "\nMake sure the source files are stored in customisations "
            + "in the project or in utilities!");
     
}
}
    


//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
private void show_delivery()
    {
          Global.currentPhase.store(null);
           Delivery delivery=null;
           String location=null;
           if (Global.currentPhase!=null &&
               Global.currentPhase.getResult()!=null &&
               Global.currentPhase.getResult().getMainDelivery()!=null)
           {
               delivery=(Delivery) Global.currentPhase.getResult().getMainDelivery();
               if (delivery.getLocation()!=null)
                   location=delivery.getLocation();
           }
           else if (Global.currentPhase!=null &&
                   Global.currentPhase.getResult()!=null &&
                   Global.currentPhase.getResult().getSupplementDeliveries()!=null &&
                   Global.currentPhase.getResult().getSupplementDeliveries().getLast()!=null &&
                   Global.currentPhase.getResult().getSupplementDeliveries().getLast().getLocation()!=null)
           {
               delivery=Global.currentPhase.getResult().getSupplementDeliveries().getLast();
               location=Global.currentPhase.getResult().getSupplementDeliveries().getLast().getLocation();
           }

           if (location !=null && delivery!=null)
            {
                String fileName=location+"/"+delivery.getClass().getSimpleName();
                if (new File(fileName+".xml").exists())
                    Tools.viewAnyFile(new File(fileName+".xml"));
                else
                    JOptionPane.showMessageDialog(null, "No delivery was Found!");
            }
           else
             JOptionPane.showMessageDialog(null, "No delivery has been generated yet!");

           /*
           if (location !=null)
            {
                Tools.viewAnyFile(new File(location+"/"+delivery.getClass().getSimpleName()));
            this.populateForm();
            }
           else
             JOptionPane.showMessageDialog(null, "No Delivery was found!");
           */

    }

//****************************************************************************
//                   Phase Feed back JComboBox
//****************************************************************************
private JComboBox selectFedbackPhaseName(JComboBox jComboBox)
{

    if (Global.currentPhase.getNumber()>1 || !jComboBox.getSelectedItem().toString().equalsIgnoreCase("No Phases"))
    {
    try {
            String selectedPhaseName = (String)jComboBox.getSelectedItem(); //e.g. index 0 ==> version 1
            //System.out.print(selectedPhaseName);
            ArrayList<Phase> phasesList=(ArrayList<Phase>) Global.project.getProcess().getPhases().get().clone();
            //-------------------------------------------------------------------------
            Phase fedbackPhase=(Phase) phase.feedback(selectedPhaseName,phasesList);// already cloned by the feedback method
            //save to Global project
            //----------------------------------------------------------------
            //System.out.print(fedbackPhase.toString());
            if (fedbackPhase!=null)
            {
                this.phase=fedbackPhase.clone(true);
                Global.currentPhase=this.phase;
                this.phase.save();
                // this.phase.store(null);
                //JOptionPane.showMessageDialog(null, "Feedback was successfull");
                successfullFeedback=true;
            }
            else
                JOptionPane.showMessageDialog(null, "Feedback was unsuccessfull ...No phase was fedback to!");
            jComboBox.setSelectedItem(selectedPhaseName);         
        }
         catch (Exception ex) {
            Logger.getLogger(MainMenu.class.getName()).log(Level.SEVERE, null, ex);
           }
    this.populateForm();
    return jComboBox;
    }
    else
    {      
        String noNames[] = {"No Phases Yet"};
        DefaultComboBoxModel dcm=new DefaultComboBoxModel(noNames);
        this.populateForm();
        return new JComboBox(dcm);
    }
    }
 /**
    * @param args the command line arguments
    */
//*****************************************************************************
    private ComboBoxModel getFedbackPhaseNames()
    {
    if (Global.currentPhase!=null && Global.currentPhase.getNumber()>1)
    {        
    ArrayList<Phase> processPhases=Global.project.getProcess().getPhases().get();
    String[] names=new String[Global.currentPhase.getNumber()-1];
    //--------------------------------------------------------------------------
    int i=0;
    for (Object o:processPhases)
     {
       if (o!=null)
         {
         Phase p=(Phase) o;
         if (p.getNumber()<Global.currentPhase.getNumber())
         {
             names[i]=p.getName();
             i=i+1;
         }
      }
    }
     return new DefaultComboBoxModel(names);
    }
    else
    {
    String noNames[] = {"No Phases"};
    //System.out.print("names[0]====>"+noNames[0]);
    return new DefaultComboBoxModel(noNames);
    }
 }

//****************************************************************************
//                   Phase Version JComboBox
//****************************************************************************
 private JComboBox selectPhaseVersion(JComboBox jComboBox)
{
    try {
            Phase rolledbackPhase =new Phase();
            rolledbackPhase=this.phase;
            //int version = jComboBox.getSelectedIndex() + 1; //e.g. index 0 ==> version 1
            //int version = jComboBox.getSelectedIndex() + 1; //e.g. index 0 ==> version 1
            String versionString=jComboBox.getSelectedItem().toString();
            int version=
                    Integer.valueOf(versionString.substring(
                    versionString.indexOf("n")+2, versionString.length()));
            //-------------------------------------------------------------------------

            rolledbackPhase=rolledbackPhase.rollback(version);
            //save to Global project
            //----------------------------------------------------------------
            if (rolledbackPhase!=null)
            {
//               process.store(null);
                this.phase=rolledbackPhase;
//                Global.project.store(null);
            }
            else
                JOptionPane.showMessageDialog(null, "Message 2: Oops...No version is avilable...");

            this.populateForm();            
            
            //jComboBox.setSelectedIndex(version - 1); // e.g. version 1 ==> index 0
            jComboBox.setSelectedItem("Version"+" "+version); // e.g. version 1 ==> index 0
            
        }
    
         catch (Exception ex) {
            Logger.getLogger(MainMenu.class.getName()).log(Level.SEVERE, null, ex);
           }
    return jComboBox;
    }

//*****************************************************************************
 private ComboBoxModel getPhaseVersions()
{
   String[] noVersions = {"no versions"};
   DefaultComboBoxModel dcm= new DefaultComboBoxModel(noVersions);
   if (this.phase !=null && phase.getIteration()!=null)
   {
   ArrayList<Phase> currentPhaseIterataions=new ArrayList<Phase>();
   //
   for(Object o:phase.getIteration())
   {
       Phase p= (Phase) o;
       int phaseProcessVersion=Integer.valueOf(p.getId().substring(0, p.getId().indexOf(".")));
       if (phaseProcessVersion==Global.project.getProcess().getVersion()) // just showing the phases version of the same process
           currentPhaseIterataions.add(p);
   }
   //   
   String[] versions = new String[currentPhaseIterataions.size()];
   for (int i=0;i<currentPhaseIterataions.size();i++)
   {
       Phase thisPhase= (Phase) currentPhaseIterataions.get(i);
       versions[i]="Version " +Integer.toString( thisPhase.getVersion());
   }
   //
   dcm=new DefaultComboBoxModel(versions);

    }
    return dcm;
    
    } /**
    * @param args the command line arguments
    */

//****************************************************************************
//                   Populate form
//****************************************************************************

 private boolean populateForm()
{
     
     this.Phase_Rollback_Version_jComboBox.setModel(this.getPhaseVersions());
     this.Phase_Feedback_Phase_jComboBox.setModel(this.getFedbackPhaseNames());
     
     this.setTitle(this.phase.getTitle());

     if (Global.project != null) {                     
           if (this.phase!=null && this.phase.getPreRequisites()!=null)
            this.repaint();
            this.pack();
            return true;
        }
     else{            
            this.repaint();
            this.pack();
            return false;
        }
    }

 //----------------------------------------------------------------------------
 /**
  *
  * @param args
  */
 public static void main(String args[]) {

        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new PhaseForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Customise_jButton;
    private javax.swing.JDesktopPane Image_jDesktopPane;
    private javax.swing.JMenuItem Objectives_MenuItem;
    private javax.swing.JMenuItem Performing_MenuItem;
    private javax.swing.JButton Phase_Close_jButton;
    private javax.swing.JMenuItem Phase_Close_jMenuItem;
    private javax.swing.JComboBox Phase_Feedback_Phase_jComboBox;
    private javax.swing.JButton Phase_Iterate_jButton;
    private javax.swing.JMenuItem Phase_Iterate_jMenuItem;
    private javax.swing.JButton Phase_Load_jButton;
    private javax.swing.JMenuItem Phase_Load_jMenuItem;
    private javax.swing.JComboBox Phase_Rollback_Version_jComboBox;
    private javax.swing.JButton Phase_SaveAs_jButton;
    private javax.swing.JMenuItem Phase_SaveAs_jMenuItem;
    private javax.swing.JButton Phase_Save_jButton;
    private javax.swing.JMenuItem Phase_Save_jMenuItem;
    private javax.swing.JPanel Phase_jPanel;
    private javax.swing.JMenuItem Planning_MenuItem;
    private javax.swing.JMenuItem PreRequisite_MenuItem;
    private javax.swing.JMenuItem Reporting_MenuItem;
    private javax.swing.JMenuItem Validating_MenuItem;
    private java.awt.Canvas canvas1;
    private javax.swing.JMenu editMenu;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JMenuBar menuBar;
    private process_model.phase.prerequisite.PreRequisite preRequisite1;
    private process_model.issue.tracibility.Source source1;
    private process_model.issue.tracibility.Source source2;
    // End of variables declaration//GEN-END:variables

}
