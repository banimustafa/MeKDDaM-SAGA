/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DataForm.java
 *
 * Created on 06-Nov-2010, 21:56:39
 */

package gui.form.input;

import global.Config;
import global.Global;
import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import process_model.process.input.data.MetabolomicsData;
import process_model.process.input.data.dataset.DataSet;
import process_model.process.input.data.metadata.MetaData;
import process_model.process.input.data.utility.Attribute;
import process_model.process.input.data.utility.DataRow;
import project.Project;
import toolbox.datatools.DBTools;
import toolbox.Tools;
import toolbox.filetools.FileTools;
import weka.core.Instances;
import weka.gui.ComponentHelper;

/**
 *
 * @author amb04
 */
public class DataForm extends javax.swing.JFrame {
MetabolomicsData metabolomicsData=null;
boolean confirmDataSaving=false;
String xDBAttributes="";
String yDBAttributes="";
    /** Creates new form DataForm */
public DataForm() {
 initComponents();
this.refresh();
this.populate();
 if (Global.project!=null && Global.project.getProcess()!=null && Global.project.getProcess().getTitle()!=null)
     this.setTitle("Metabolomics Data                           "+Global.project.getProcess().getTitle());
 }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        desktopPane = new javax.swing.JDesktopPane();
        Planning_Planner_info_jDesktopPane9 = new javax.swing.JDesktopPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        MetaData_jList = new javax.swing.JList();
        Planning_Planner_Name_jLabel32 = new javax.swing.JLabel();
        MetaData_jTextField = new javax.swing.JTextField();
        Load_MetaDataSet_jButton = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        Planning_Planner_info_jDesktopPane11 = new javax.swing.JDesktopPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        DataSet_jList = new javax.swing.JList();
        Planning_Planner_Name_jLabel31 = new javax.swing.JLabel();
        DataSet_jTextField = new javax.swing.JTextField();
        Load_DataSet_jButton = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        MetaData_Browse_jButton = new javax.swing.JButton();
        External_MetaData_jTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        View_External_MetaData_jButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        Help_jButton = new javax.swing.JButton();
        AimsOfStudy_jButton = new javax.swing.JButton();
        Delete_jButton = new javax.swing.JButton();
        Save_jButton = new javax.swing.JButton();
        Delete_DataSet_jButton = new javax.swing.JButton();
        Delete_MetaData_jButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        DataSet_Browse_jButton = new javax.swing.JButton();
        External_DataSet_jTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        View_External_DataSet_jButton = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowDeactivated(java.awt.event.WindowEvent evt) {
                formWindowDeactivated(evt);
            }
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        desktopPane.setBackground(new java.awt.Color(255, 255, 204));
        desktopPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        Planning_Planner_info_jDesktopPane9.setBackground(new java.awt.Color(255, 255, 153));
        Planning_Planner_info_jDesktopPane9.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Imported Meta Data", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N
        Planning_Planner_info_jDesktopPane9.setName("Planning_Planner_info_jDesktopPane9"); // NOI18N
        Planning_Planner_info_jDesktopPane9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Planning_Planner_info_jDesktopPane9MouseClicked(evt);
            }
        });

        jScrollPane3.setName("jScrollPane3"); // NOI18N

        MetaData_jList.setBorder(javax.swing.BorderFactory.createTitledBorder("Meta-Data Attribute"));
        MetaData_jList.setModel(this.getDataSettAttributesModel());
        MetaData_jList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        MetaData_jList.setName("MetaData_jList"); // NOI18N
        MetaData_jList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                MetaData_jListValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(MetaData_jList);

        jScrollPane3.setBounds(10, 110, 480, 300);
        Planning_Planner_info_jDesktopPane9.add(jScrollPane3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Planner_Name_jLabel32.setText("MetaData File");
        Planning_Planner_Name_jLabel32.setName("Planning_Planner_Name_jLabel32"); // NOI18N
        Planning_Planner_Name_jLabel32.setBounds(10, 20, 100, 20);
        Planning_Planner_info_jDesktopPane9.add(Planning_Planner_Name_jLabel32, javax.swing.JLayeredPane.DEFAULT_LAYER);

        MetaData_jTextField.setBackground(new java.awt.Color(255, 255, 204));
        MetaData_jTextField.setName("MetaData_jTextField"); // NOI18N
        MetaData_jTextField.setBounds(10, 40, 380, 25);
        Planning_Planner_info_jDesktopPane9.add(MetaData_jTextField, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Load_MetaDataSet_jButton.setText("Load");
        Load_MetaDataSet_jButton.setName("Load_MetaDataSet_jButton"); // NOI18N
        Load_MetaDataSet_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Load_MetaDataSet_jButtonActionPerformed(evt);
            }
        });
        Load_MetaDataSet_jButton.setBounds(390, 40, 100, 25);
        Planning_Planner_info_jDesktopPane9.add(Load_MetaDataSet_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jButton3.setText("View Meta-Data");
        jButton3.setName("jButton3"); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jButton3.setBounds(10, 80, 130, 25);
        Planning_Planner_info_jDesktopPane9.add(jButton3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jButton2.setText("Refresh Data");
        jButton2.setName("jButton2"); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jButton2.setBounds(140, 80, 120, 25);
        Planning_Planner_info_jDesktopPane9.add(jButton2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Planner_info_jDesktopPane9.setBounds(520, 110, 500, 420);
        desktopPane.add(Planning_Planner_info_jDesktopPane9, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Planner_info_jDesktopPane11.setBackground(new java.awt.Color(255, 255, 153));
        Planning_Planner_info_jDesktopPane11.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Imported Data Set", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N
        Planning_Planner_info_jDesktopPane11.setName("Planning_Planner_info_jDesktopPane11"); // NOI18N
        Planning_Planner_info_jDesktopPane11.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Planning_Planner_info_jDesktopPane11MouseClicked(evt);
            }
        });

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        DataSet_jList.setBorder(javax.swing.BorderFactory.createTitledBorder("Data Set Attributes"));
        DataSet_jList.setModel(this.getDataSettAttributesModel());
        DataSet_jList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        DataSet_jList.setName("DataSet_jList"); // NOI18N
        DataSet_jList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                DataSet_jListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(DataSet_jList);

        jScrollPane2.setBounds(10, 110, 470, 300);
        Planning_Planner_info_jDesktopPane11.add(jScrollPane2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Planner_Name_jLabel31.setText("Dataset  File");
        Planning_Planner_Name_jLabel31.setName("Planning_Planner_Name_jLabel31"); // NOI18N
        Planning_Planner_Name_jLabel31.setBounds(10, 20, 90, 20);
        Planning_Planner_info_jDesktopPane11.add(Planning_Planner_Name_jLabel31, javax.swing.JLayeredPane.DEFAULT_LAYER);

        DataSet_jTextField.setBackground(new java.awt.Color(255, 255, 204));
        DataSet_jTextField.setName("DataSet_jTextField"); // NOI18N
        DataSet_jTextField.setBounds(10, 40, 380, 25);
        Planning_Planner_info_jDesktopPane11.add(DataSet_jTextField, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Load_DataSet_jButton.setText("Load");
        Load_DataSet_jButton.setName("Load_DataSet_jButton"); // NOI18N
        Load_DataSet_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Load_DataSet_jButtonActionPerformed(evt);
            }
        });
        Load_DataSet_jButton.setBounds(390, 40, 90, 25);
        Planning_Planner_info_jDesktopPane11.add(Load_DataSet_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jButton4.setText("View DataSet");
        jButton4.setName("jButton4"); // NOI18N
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jButton4.setBounds(10, 80, 130, 25);
        Planning_Planner_info_jDesktopPane11.add(jButton4, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jButton1.setText("Refresh Data");
        jButton1.setName("jButton1"); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jButton1.setBounds(140, 80, 120, 25);
        Planning_Planner_info_jDesktopPane11.add(jButton1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Planner_info_jDesktopPane11.setBounds(10, 110, 490, 420);
        desktopPane.add(Planning_Planner_info_jDesktopPane11, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jPanel1.setBackground(new java.awt.Color(255, 255, 153));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "External Data", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N
        jPanel1.setName("jPanel1"); // NOI18N
        jPanel1.setLayout(null);

        MetaData_Browse_jButton.setText("Browse");
        MetaData_Browse_jButton.setName("MetaData_Browse_jButton"); // NOI18N
        MetaData_Browse_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MetaData_Browse_jButtonActionPerformed(evt);
            }
        });
        jPanel1.add(MetaData_Browse_jButton);
        MetaData_Browse_jButton.setBounds(320, 50, 90, 25);

        External_MetaData_jTextField.setName("External_MetaData_jTextField"); // NOI18N
        jPanel1.add(External_MetaData_jTextField);
        External_MetaData_jTextField.setBounds(20, 50, 300, 25);

        jLabel2.setText("Met-Data URL");
        jLabel2.setName("jLabel2"); // NOI18N
        jPanel1.add(jLabel2);
        jLabel2.setBounds(20, 30, 100, 16);

        View_External_MetaData_jButton.setText("View");
        View_External_MetaData_jButton.setName("View_External_MetaData_jButton"); // NOI18N
        View_External_MetaData_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                View_External_MetaData_jButtonActionPerformed(evt);
            }
        });
        jPanel1.add(View_External_MetaData_jButton);
        View_External_MetaData_jButton.setBounds(410, 50, 80, 25);

        jPanel1.setBounds(520, 10, 500, 90);
        desktopPane.add(jPanel1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jPanel2.setBackground(new java.awt.Color(255, 255, 153));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setName("jPanel2"); // NOI18N
        jPanel2.setLayout(null);

        Help_jButton.setText("Help");
        Help_jButton.setName("Help_jButton"); // NOI18N
        Help_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Help_jButtonActionPerformed(evt);
            }
        });
        jPanel2.add(Help_jButton);
        Help_jButton.setBounds(860, 10, 140, 30);

        AimsOfStudy_jButton.setText("Aims of Study");
        AimsOfStudy_jButton.setName("AimsOfStudy_jButton"); // NOI18N
        AimsOfStudy_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AimsOfStudy_jButtonActionPerformed(evt);
            }
        });
        jPanel2.add(AimsOfStudy_jButton);
        AimsOfStudy_jButton.setBounds(700, 10, 160, 30);

        Delete_jButton.setText("Delete All");
        Delete_jButton.setName("Delete_jButton"); // NOI18N
        Delete_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Delete_jButtonActionPerformed(evt);
            }
        });
        jPanel2.add(Delete_jButton);
        Delete_jButton.setBounds(220, 10, 140, 30);

        Save_jButton.setText("Save All");
        Save_jButton.setName("Save_jButton"); // NOI18N
        Save_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Save_jButtonActionPerformed(evt);
            }
        });
        jPanel2.add(Save_jButton);
        Save_jButton.setBounds(10, 10, 150, 30);

        Delete_DataSet_jButton.setText("Delete Dataset");
        Delete_DataSet_jButton.setName("Delete_DataSet_jButton"); // NOI18N
        Delete_DataSet_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Delete_DataSet_jButtonActionPerformed(evt);
            }
        });
        jPanel2.add(Delete_DataSet_jButton);
        Delete_DataSet_jButton.setBounds(370, 10, 150, 30);

        Delete_MetaData_jButton.setText("Delete Meta-Data");
        Delete_MetaData_jButton.setName("Delete_MetaData_jButton"); // NOI18N
        Delete_MetaData_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Delete_MetaData_jButtonActionPerformed(evt);
            }
        });
        jPanel2.add(Delete_MetaData_jButton);
        Delete_MetaData_jButton.setBounds(520, 10, 140, 30);

        jPanel2.setBounds(10, 540, 1010, 50);
        desktopPane.add(jPanel2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jPanel3.setBackground(new java.awt.Color(255, 255, 153));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "External Data", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N
        jPanel3.setName("jPanel3"); // NOI18N
        jPanel3.setLayout(null);

        DataSet_Browse_jButton.setText("Browse");
        DataSet_Browse_jButton.setName("DataSet_Browse_jButton"); // NOI18N
        DataSet_Browse_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DataSet_Browse_jButtonActionPerformed(evt);
            }
        });
        jPanel3.add(DataSet_Browse_jButton);
        DataSet_Browse_jButton.setBounds(310, 50, 90, 25);

        External_DataSet_jTextField.setName("External_DataSet_jTextField"); // NOI18N
        jPanel3.add(External_DataSet_jTextField);
        External_DataSet_jTextField.setBounds(10, 50, 300, 25);

        jLabel3.setText("Dataset URL");
        jLabel3.setName("jLabel3"); // NOI18N
        jPanel3.add(jLabel3);
        jLabel3.setBounds(10, 30, 110, 16);

        View_External_DataSet_jButton.setText("View");
        View_External_DataSet_jButton.setName("View_External_DataSet_jButton"); // NOI18N
        View_External_DataSet_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                View_External_DataSet_jButtonActionPerformed(evt);
            }
        });
        jPanel3.add(View_External_DataSet_jButton);
        View_External_DataSet_jButton.setBounds(400, 50, 80, 25);

        jPanel3.setBounds(10, 10, 490, 90);
        desktopPane.add(jPanel3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(desktopPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1031, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(desktopPane, javax.swing.GroupLayout.DEFAULT_SIZE, 598, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents




    private void Planning_Planner_info_jDesktopPane9MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Planning_Planner_info_jDesktopPane9MouseClicked
        // TODO add your handling code here:
}//GEN-LAST:event_Planning_Planner_info_jDesktopPane9MouseClicked

    private void DataSet_jListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_DataSet_jListValueChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_DataSet_jListValueChanged


    private void Planning_Planner_info_jDesktopPane11MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Planning_Planner_info_jDesktopPane11MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_Planning_Planner_info_jDesktopPane11MouseClicked

    private void MetaData_jListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_MetaData_jListValueChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_MetaData_jListValueChanged

    private void formWindowDeactivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowDeactivated
/*
 if (this.metabolomicsData!=null)
        this.metabolomicsData.save();

   if (Global.project!=null && Global.project.getInputs()!=null)
       Global.project.getInputs().store();
*/
 //this.save();

    }//GEN-LAST:event_formWindowDeactivated

    private void Help_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Help_jButtonActionPerformed
        
    Tools.viewAnyFile(new File(Config.helpLocation + "data.pdf"));                
        
    }//GEN-LAST:event_Help_jButtonActionPerformed

    private void Save_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Save_jButtonActionPerformed
this.save();
this.confirmDataSaving=true;
    }//GEN-LAST:event_Save_jButtonActionPerformed

    private void AimsOfStudy_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AimsOfStudy_jButtonActionPerformed
 new StudyForm().setVisible(true);
    }//GEN-LAST:event_AimsOfStudy_jButtonActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
//         System.runFinalization();
         System.gc();
    }//GEN-LAST:event_formWindowClosed

    private void Delete_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Delete_jButtonActionPerformed
this.Delete_DataSet_jButtonActionPerformed(evt);
this.Delete_MetaData_jButtonActionPerformed(evt);
}//GEN-LAST:event_Delete_jButtonActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
//this.refresh();
//this.populate();
//this.save();
    }//GEN-LAST:event_formWindowActivated

    private void MetaData_Browse_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MetaData_Browse_jButtonActionPerformed
 try
    {     
      
    File selectedFile =null;    
    if (!this.External_MetaData_jTextField.getText().equals("")) 
    {        
        try {            
            URL thisURL=new URL(this.External_MetaData_jTextField.getText());        
            String homeDirectory=Tools.toFile(thisURL).getParent();
            selectedFile= Tools.chooseFile("Choose Dataset File", null, homeDirectory, false);
            } 
                
        catch (MalformedURLException ex) 
        {              
              selectedFile = Tools.chooseFile("Choose Dataset File",null, Global.project.getLocation(), false);
        }
    }
    else       
        selectedFile = Tools.chooseFile("Choose Dataset File",null, Global.project.getLocation(), false);            

   //--------------------------------------------------------------------------    
   if (selectedFile!=null)
        {
            //-----------------------------------------------------------------
            if(!MetaData_jTextField.getText().equals(""))
            {
                this.delete_metaData();
                MetaData_jTextField.setText("");
            }

            //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            URL localizedDataFileURL =Tools.copyFileToInputs(Tools.toURL(selectedFile));
            File LocalizedMetaDataFile= Tools.toFile(localizedDataFileURL);
            
            String fileParentPath= LocalizedMetaDataFile.getParent();
            String fileName=Tools.getFileNameOnly(LocalizedMetaDataFile);
            String fileExtention=Tools.getFileExtentionOnly(LocalizedMetaDataFile);

            //-------------------------------------------------------------------
            File newFileName=new File(fileParentPath + "/" + "MetaData" + "." + fileExtention);

            //-----------------------------------------------------------------
            if (newFileName.exists())
            {
                newFileName.delete();                
            }

            //-----------------------------------------------------------------
            if (LocalizedMetaDataFile.exists())
            {
                LocalizedMetaDataFile.renameTo(newFileName);
            }

            URL renamedLocalizedDataFileURL=null;            
            renamedLocalizedDataFileURL=Tools.toURL(newFileName);
            Global.activeMetaDataFile=Tools.toFile(renamedLocalizedDataFileURL);
            //-----------------------------------------------------------------
            if (renamedLocalizedDataFileURL!=null)
             {
                External_MetaData_jTextField.setText(renamedLocalizedDataFileURL.toString());

                if (this.metabolomicsData==null)
                    this.metabolomicsData=new MetabolomicsData();

                this.metabolomicsData.setMetaData(new MetaData());
                this.metabolomicsData.getMetaData().setOutcomeURL(renamedLocalizedDataFileURL);
                this.metabolomicsData.getMetaData().setIsExternal(true);

                if (this.metabolomicsData!=null)
                    this.metabolomicsData.save();

                 if (Global.project!=null && Global.project.getInputs()!=null)
                     Global.project.getInputs().store();

             }
            //-----------------------------------------------------------------
            this.save();
        }
    }
    catch(Exception ex)
    {
         Logger.getLogger(DataForm.class.getName()).log(Level.SEVERE, null, ex);
    }

    }//GEN-LAST:event_MetaData_Browse_jButtonActionPerformed

    private void Load_DataSet_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Load_DataSet_jButtonActionPerformed
    try {
        //this.save();
        String[] fileExtentionsArray=Tools.stringToArray(
                                                           "arff "
                                                           +"xrff "
                                                           +"json "
                                                           +"libsvm "
                                                           +"m "
                                                           +"bsi "
                                                           +"arff.gz "
                                                           +"json.gz "
                                                           +"xrff.gz "
                                                           +"xlsx "
                                                           +"xls "
                                                           +"csv "
                                                           );

        String[] fileExtentionsMessagesArray=Tools.stringToArray(
                                                              "*.arff "
                                                            + "*.xrff "
                                                            + "*.json "
                                                            + "*.libsvm "
                                                            + "*.m "
                                                            + "*.bsi "
                                                            + "*.arff.gz "
                                                            + "*.json.gz "
                                                            + "*.xrff.gz "
                                                            + "*.xlsx "
                                                            + "*.xls "
                                                            + "*.csv "
                                                            );

        String selectedFileString = Tools.chooseFile("Choose data file",fileExtentionsArray,fileExtentionsMessagesArray, null, false);        
        File selectedFile = (selectedFileString != null) ? new File(selectedFileString) : null;        
        //*********************************************************************
        if (selectedFile!=null)
        {

          //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
          if(!External_DataSet_jTextField.getText().equals(""))
          {
             this.delete_dataSet();
             External_DataSet_jTextField.setText("");
          }
          
          //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
          URL localizedDataFileURL =Tools.copyFileToInputs(Tools.toURL(selectedFile));          
          File LocalizedDataSetFile=Tools.toFile(localizedDataFileURL);
          String fileParentPath= LocalizedDataSetFile.getParent();
                    
          //String fileName=Tools.getFileNameOnly(LocalizedDataSetFile);
          String fileExtention=Tools.getFileExtentionOnly(LocalizedDataSetFile);

          //-------------------------------------------------------------------
          String newFileName=fileParentPath + "/" + "DataSet" + "." + fileExtention;
          File newLocalizedDataSetFile=null;
          File newFile=null;
          // this suppose to handle all file supported by weka
          //DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
          if (!fileExtention.toLowerCase().equals("csv"))
          {
              File newCSVFile=null;

              newCSVFile=FileTools.LoadData(LocalizedDataSetFile);
              if (newCSVFile!=null)
              {                  
                  newLocalizedDataSetFile= newCSVFile;
                  newFileName=fileParentPath + "/" + "DataSet" + "." + "csv";
              }
           }
          else
               newLocalizedDataSetFile=LocalizedDataSetFile;
                              
          //DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
          //newLocalizedDataSetFile.renameTo(newFile);
          if (newFileName!=null && newLocalizedDataSetFile!=null)
             newFile=Tools.renameFileTo(newLocalizedDataSetFile.getPath(),newFileName);
          
          if (newFile!=null)
                localizedDataFileURL =Tools.toURL(newFile);

          //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
          if (localizedDataFileURL!=null)
            {
            try {

                //-------------------------------------------------------------
                 DataSet_jTextField.setText(localizedDataFileURL.toString());
                 if (!DataSet_jTextField.getText().equals(""))
                 {
                    if (this.metabolomicsData==null)
                        this.metabolomicsData=new MetabolomicsData();

                    this.metabolomicsData.setDataSet(new DataSet(localizedDataFileURL));
                 }

                 //-------------------------------------------------------------
                File localizedDataFile =Tools.toFile(localizedDataFileURL);
                Global.activeDataSetFile=localizedDataFile;

                //-------------------------------------------------------------
                FileTools.viewData(localizedDataFile.getPath());
                this.updatDataSet();
                
                } catch (Exception ex) {
                    Logger.getLogger(DataForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
          
          // delete orginal localized file if it has been converted to .csv
          //-------------------------------------------------------------------
          if (LocalizedDataSetFile.exists())
              LocalizedDataSetFile.delete();
          
         }
       }
  catch(Exception ex){
      Logger.getLogger(DataForm.class.getName()).log(Level.SEVERE, null, ex);}

DataSet_jList.setModel(this.getDataSettAttributesModel());
    }//GEN-LAST:event_Load_DataSet_jButtonActionPerformed


//************************************************************************
private void updatDataSet()
{
  try
  {
    if (Global.activeDataSetFile!=null)
     {
        File selectedFile=Global.activeDataSetFile;        
        //*********************************************************************
        if (selectedFile!=null)
        {
          if(!External_DataSet_jTextField.getText().equals(""))
          {
             this.delete_dataSet();
             External_DataSet_jTextField.setText("");
          }
          URL localizedDataFileURL =Tools.copyFileToInputs(Tools.toURL(selectedFile));          
          //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
          if (localizedDataFileURL!=null)
            {
            try {                
               //-------------------------------------------------------------
                DataSet_jTextField.setText(localizedDataFileURL.toString());                
                if (!DataSet_jTextField.getText().equals(""))
                {                   
                   this.metabolomicsData.setDataSet(new DataSet(new URL(DataSet_jTextField.getText())));
                }
                   //-------------------------------------------------------------
                if (this.metabolomicsData!=null)
                    this.metabolomicsData.save();

                if (Global.project!=null && Global.project.getInputs()!=null)
                    Global.project.getInputs().store();

                DataSet_jList.setModel(this.getDataSettAttributesModel());
                
                } catch (Exception ex) {
                    Logger.getLogger(DataForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
         }
      }
   }
   catch(Exception ex){
   Logger.getLogger(DataForm.class.getName()).log(Level.SEVERE, null, ex);}
 }


//************************************************************************
private void updatMetaData()
{
  try
  {
    if (Global.activeMetaDataFile!=null)
     {
        File selectedFile=Global.activeMetaDataFile;        
        //*********************************************************************
        if (selectedFile!=null)
        {
          if(!External_MetaData_jTextField.getText().equals(""))
          {
             this.delete_metaData();
             External_MetaData_jTextField.setText("");
          }
          URL localizedDataFileURL =Tools.copyFileToInputs(Tools.toURL(selectedFile));          
          //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
          if (localizedDataFileURL!=null)
            {
            try {                
               //-------------------------------------------------------------
                MetaData_jTextField.setText(localizedDataFileURL.toString());                
                if (!MetaData_jTextField.getText().equals(""))
                {                   
                   this.metabolomicsData.setMetaData(new MetaData(new URL(MetaData_jTextField.getText())));
                }
                   //-------------------------------------------------------------
                if (this.metabolomicsData!=null)
                    this.metabolomicsData.save();

                if (Global.project!=null && Global.project.getInputs()!=null)
                    Global.project.getInputs().store();

                MetaData_jList.setModel(this.getMetaDatatAttributesModel());
                
                } catch (Exception ex) {
                    Logger.getLogger(DataForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
         }
      }
   }
   catch(Exception ex){
   Logger.getLogger(DataForm.class.getName()).log(Level.SEVERE, null, ex);}
 }


    private void Load_MetaDataSet_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Load_MetaDataSet_jButtonActionPerformed
   try {
        //this.save();
        String[] fileExtentionsArray=Tools.stringToArray(
                                                           "arff "
                                                           +"xrff "
                                                           +"json "
                                                           +"libsvm "
                                                           +"m "
                                                           +"bsi "
                                                           +"arff.gz "
                                                           +"json.gz "
                                                           +"xrff.gz "
                                                           +"xlsx "
                                                           +"xls "
                                                           +"csv "
                                                           );

        String[] fileExtentionsMessagesArray=Tools.stringToArray(
                                                              "*.arff "
                                                            + "*.xrff "
                                                            + "*.json "
                                                            + "*.libsvm "
                                                            + "*.m "
                                                            + "*.bsi "
                                                            + "*.arff.gz "
                                                            + "*.json.gz "
                                                            + "*.xrff.gz "
                                                            + "*.xlsx "
                                                            + "*.xls "
                                                            + "*.csv "
                                                            );

        String selectedFileString = Tools.chooseFile("Choose data file",fileExtentionsArray,fileExtentionsMessagesArray, null, false);        
        File selectedFile = (selectedFileString != null) ? new File(selectedFileString) : null;        
        //*********************************************************************
        if (selectedFile!=null)
        {

          //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
          if(!External_MetaData_jTextField.getText().equals(""))
          {
             this.delete_metaData();
             External_MetaData_jTextField.setText("");
          }
          
          //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
          URL localizedDataFileURL =Tools.copyFileToInputs(Tools.toURL(selectedFile));          
          File LocalizedMetaDataFile=Tools.toFile(localizedDataFileURL);
          String fileParentPath= LocalizedMetaDataFile.getParent();
                    
          //String fileName=Tools.getFileNameOnly(LocalizedMetaDataFile);
          String fileExtention=Tools.getFileExtentionOnly(LocalizedMetaDataFile);

          //-------------------------------------------------------------------
          String newFileName=fileParentPath + "/" + "MetaData" + "." + fileExtention;
          File newLocalizedMetaDataFile=null;
          File newFile=null;
          // this suppose to handle all file supported by weka
          //DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
          if (!fileExtention.toLowerCase().equals("csv"))
          {
              File newCSVFile=null;

              newCSVFile=FileTools.LoadData(LocalizedMetaDataFile);
              if (newCSVFile!=null)
              {                  
                  newLocalizedMetaDataFile= newCSVFile;
                  newFileName=fileParentPath + "/" + "MetaData" + "." + "csv";
              }
           }
          else
               newLocalizedMetaDataFile=LocalizedMetaDataFile;
                              
          //DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
          //newLocalizedMetaDataFile.renameTo(newFile);
          if (newFileName!=null && newLocalizedMetaDataFile!=null)
             newFile=Tools.renameFileTo(newLocalizedMetaDataFile.getPath(),newFileName);
          
          if (newFile!=null)
                localizedDataFileURL =Tools.toURL(newFile);

          //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
          if (localizedDataFileURL!=null)
            {
            try {

                //-------------------------------------------------------------
                 MetaData_jTextField.setText(localizedDataFileURL.toString());
                 if (!MetaData_jTextField.getText().equals(""))
                 {
                    if (this.metabolomicsData==null)
                        this.metabolomicsData=new MetabolomicsData();

                    this.metabolomicsData.setMetaData(new MetaData(localizedDataFileURL));
                 }

                 //-------------------------------------------------------------
                File localizedDataFile =Tools.toFile(localizedDataFileURL);
                Global.activeMetaDataFile=localizedDataFile;

                //-------------------------------------------------------------
                Global.isMetaData=true;
                FileTools.viewData(localizedDataFile.getPath());
                this.updatMetaData();
                Global.isMetaData=false;
                } catch (Exception ex) {
                    Logger.getLogger(DataForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
          
          // delete orginal localized file if it has been converted to .csv
          //-------------------------------------------------------------------
          if (LocalizedMetaDataFile.exists())
              LocalizedMetaDataFile.delete();
          
         }
       }
  catch(Exception ex){
      Logger.getLogger(DataForm.class.getName()).log(Level.SEVERE, null, ex);}

MetaData_jList.setModel(this.getMetaDatatAttributesModel());
    }//GEN-LAST:event_Load_MetaDataSet_jButtonActionPerformed

    private void DataSet_Browse_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DataSet_Browse_jButtonActionPerformed
    try
    {
        
    File selectedFile =null;    
    if (!this.External_DataSet_jTextField.getText().equals("")) 
    {        
        try {            
            URL thisURL=new URL(this.External_DataSet_jTextField.getText());        
            String homeDirectory=Tools.toFile(thisURL).getParent();
            selectedFile= Tools.chooseFile("Choose Dataset File", null, homeDirectory, false);
            } 
                
        catch (MalformedURLException ex) 
        {              
              selectedFile = Tools.chooseFile("Choose Dataset File",null, Global.project.getLocation(), false);
        }
    }
    else       
        selectedFile = Tools.chooseFile("Choose Dataset File",null, Global.project.getLocation(), false);
      
      
      if (selectedFile!=null)
        {
//            System.out.println("1- Selected File++> "+selectedFile.getPath());
            //-----------------------------------------------------------------
            if(!DataSet_jTextField.getText().equals(""))
            {
                this.delete_dataSet();
                DataSet_jTextField.setText("");
            }

//            System.out.println("2- Selected File++> "+selectedFile.getPath());
            
            //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
            URL localizedDataFileURL =Tools.copyFileToInputs(Tools.toURL(selectedFile));
//            System.out.println("3- Localized File URL++> "+selectedFile.getPath());
            
            File LocalizedDataSetFile=Tools.toFile(localizedDataFileURL);
//            System.out.println("4- Localized File++> "+selectedFile.getPath());
            
            String fileParentPath= LocalizedDataSetFile.getParent();
            String fileName=Tools.getFileNameOnly(LocalizedDataSetFile);
            String fileExtention=Tools.getFileExtentionOnly(LocalizedDataSetFile);

            //-------------------------------------------------------------------
            File newFileName=new File(fileParentPath + "/" + "DataSet" + "." + fileExtention);

            //-----------------------------------------------------------------
            if (newFileName.exists())            
                newFileName.delete();           
                        
            //-----------------------------------------------------------------
            if (LocalizedDataSetFile.exists())
            {
                LocalizedDataSetFile.renameTo(newFileName);                
            }
            
            URL renamedLocalizedDataFileURL=null;
            renamedLocalizedDataFileURL=Tools.toURL(newFileName);
            Global.activeDataSetFile=new File(renamedLocalizedDataFileURL.getFile().substring(1));
            //-----------------------------------------------------------------
            if (renamedLocalizedDataFileURL!=null)
             {
                External_DataSet_jTextField.setText(renamedLocalizedDataFileURL.toString());                                

                if (this.metabolomicsData==null)
                    this.metabolomicsData=new MetabolomicsData();

                this.metabolomicsData.setDataSet(new DataSet());
                this.metabolomicsData.getDataSet().setOutcomeURL(renamedLocalizedDataFileURL);
                this.metabolomicsData.getDataSet().setIsExternal(true);
                
                if (this.metabolomicsData!=null)
                    this.metabolomicsData.save();

                 if (Global.project!=null && Global.project.getInputs()!=null)
                     Global.project.getInputs().store();

             }            
            //-----------------------------------------------------------------
            this.save();
        }
    }
    catch(Exception ex)
    {
         Logger.getLogger(DataForm.class.getName()).log(Level.SEVERE, null, ex);
    }

    }//GEN-LAST:event_DataSet_Browse_jButtonActionPerformed

    private void Delete_DataSet_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Delete_DataSet_jButtonActionPerformed
    delete_dataSet();
    this.refresh();
    this.populate();
   
    }//GEN-LAST:event_Delete_DataSet_jButtonActionPerformed

    //*************************************************************************
    private void delete_dataSet()
    {
         if (this.metabolomicsData!=null && this.metabolomicsData.getDataSet()!=null)
    {
        if (this.metabolomicsData.getDataSet()!=null && this.metabolomicsData.getDataSet().getOutcomeURL()!=null)
        {
           if (new File(this.metabolomicsData.getDataSet().getOutcomeURL().getFile().substring(1)).exists())
               new File(this.metabolomicsData.getDataSet().getOutcomeURL().getFile().substring(1)).delete();
        }

        if (this.metabolomicsData.getDataSet().isExternal())
            this.External_DataSet_jTextField.setText("");
        else
            this.DataSet_jTextField.setText("");

        this.metabolomicsData.setDataSet(null);

        if (this.metabolomicsData!=null)
            this.metabolomicsData.save();

         if (Global.project!=null && Global.project.getInputs()!=null)
             Global.project.getInputs().store();

        Global.activeDataSetFile=null;
        DataSet_jList.setModel(this.getDataSettAttributesModel());
     }

    }

    //************************************************************************
   private void delete_metaData()
    {
      if (this.metabolomicsData!=null && this.metabolomicsData.getMetaData()!=null)
        {
        if (this.metabolomicsData.getMetaData()!=null && this.metabolomicsData.getMetaData().getOutcomeURL()!=null)
           if (new File(this.metabolomicsData.getMetaData().getOutcomeURL().getFile().substring(1)).exists())
               new File(this.metabolomicsData.getMetaData().getOutcomeURL().getFile().substring(1)).delete();
        
        if (this.metabolomicsData.getMetaData().isExternal())
            this.External_MetaData_jTextField.setText("");
        else
            this.MetaData_jTextField.setText("");

        this.metabolomicsData.setMetaData(null);

        if (this.metabolomicsData!=null)
            this.metabolomicsData.save();

         if (Global.project!=null && Global.project.getInputs()!=null)
             Global.project.getInputs().store();

        this.refresh();
        this.populate();
     }

    }





    private void Delete_MetaData_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Delete_MetaData_jButtonActionPerformed
    delete_metaData();
    
    }//GEN-LAST:event_Delete_MetaData_jButtonActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        if (metabolomicsData !=null &&
            metabolomicsData.getDataSet()!=null &&
            metabolomicsData.getDataSet().getOutcomeURL()!=null) 
        {
            FileTools.viewData(metabolomicsData.getDataSet().getOutcomeURL().getFile());
        }
}//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        if (metabolomicsData !=null &&
            metabolomicsData.getMetaData()!=null &&
            metabolomicsData.getMetaData().getInstances()!=null) {
            FileTools.viewData(metabolomicsData.getMetaData().getOutcomeURL().getFile());
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
this.updatDataSet();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
this.updatMetaData();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void View_External_DataSet_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_View_External_DataSet_jButtonActionPerformed

    if (!External_DataSet_jTextField.getText().equals(""))
    {     
            try {
                Tools.viewAnyFile(Tools.toFile(new URL(External_DataSet_jTextField.getText())));
            } catch (MalformedURLException ex) {
                Logger.getLogger(DataForm.class.getName()).log(Level.SEVERE, null, ex);
            }
    }
    }//GEN-LAST:event_View_External_DataSet_jButtonActionPerformed

    private void View_External_MetaData_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_View_External_MetaData_jButtonActionPerformed

    if (!External_MetaData_jTextField.getText().equals(""))
    {
            try {
                Tools.viewAnyFile(Tools.toFile(new URL (External_MetaData_jTextField.getText())));
            } catch (MalformedURLException ex) {
                Logger.getLogger(DataForm.class.getName()).log(Level.SEVERE, null, ex);
            }
    }
    }//GEN-LAST:event_View_External_MetaData_jButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing

if (confirmDataSaving==false)        
{
    int decision = JOptionPane.showConfirmDialog(null, "Reload metabolmics data !!??"
            + "\nWarning: This will reset the active data in the process, Are you sure you want to do this ?");
    if (decision == 0)    
        this.save();    
}
else
   this.save();
        
    }//GEN-LAST:event_formWindowClosing

    /**
    * @param args the command row arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    if (Global.project == null) {
                        Global.project = new Project();
                    }
                    new DataForm().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(StudyForm.class.getName()).log(Level.SEVERE, null, ex);
                } catch (Exception ex) {
                    Logger.getLogger(StudyForm.class.getName()).log(Level.SEVERE, null, ex);
                }
                
            }
        });
    }

//RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR
//****************************************************************************
//                             Data Set Rows
//****************************************************************************
//RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR

    private void refresh() {
    if (Global.project!=null && Global.project.getInputs()!=null && Global.project.getInputs().getMetabolomicsData()!=null)
        {
            this.metabolomicsData=Global.project.getInputs().getMetabolomicsData().clone();
        }

    this.populate();
    }


//DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
//****************************************************************************
//                             Data Set Rows
//****************************************************************************
//DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD

    private void delete_from_db()
    {
        if (Global.project!=null && Global.project.getInputs()!=null &&
                Global.project.getInputs().getMetabolomicsData()!=null &&
                this.metabolomicsData!=null)
        {
            int decision=JOptionPane.showConfirmDialog(null, "Are you sure You want to delete the study Information");
            if (decision==0)
            {
                try {
                    Global.project.getInputs().setMetabolomicsData(null);
                    ResultSet resultSet = DBTools.executeSQL("" + "SELECT table_name " + "FROM USER_TABLES " + "WHERE table_name = 'XDATA'");
                    String tableName = null;
                    while (resultSet.next()) {
                        tableName = resultSet.getString("table_name"); // to be changed according to expected data type
                    }
                    if (tableName!=null && tableName.equals("XDATA"))
                        DBTools.executeDDL("drop table XDATA");

                    resultSet = DBTools.executeSQL("" + "SELECT table_name " + "FROM USER_TABLES " + "WHERE table_name = 'YDATA'");
                    tableName = null;
                    while (resultSet.next()) {
                        tableName = resultSet.getString("table_name"); // to be changed according to expected data type
                    }
                    if (tableName!=null && tableName.equals("YDATA"))
                        DBTools.executeDDL("drop table YDATA");

                    this.clear();

                } catch (SQLException ex) {
                    Logger.getLogger(DataForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }



//DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
//****************************************************************************
//                             Data Set Rows
//****************************************************************************
//DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
 private void Load_dataSet_rows()
    {
       try {
           File file= Tools.chooseFile(Config.defaultLocation,null,null,false);
           if (file!=null)
            {
           Tools.viewAnyFile(file);
            ArrayList<DataRow> dataRowsList=Tools.fileToTokenisedArrayList(file.getPath());
            if (metabolomicsData==null)
                metabolomicsData=new MetabolomicsData();
            if (metabolomicsData.getDataSet()==null)
                metabolomicsData.setDataSet(new DataSet());
            ArrayList<Attribute> attributesList=new ArrayList<Attribute>();
            attributesList=metabolomicsData.getDataSet().getAttributesList();
            for(int index=0;index<attributesList.size();index++)
            {
                Attribute attribute=(Attribute) attributesList.get(index);

                if (attribute.getValues()==null)
                    attribute.setValues(new ArrayList<Object>());

                for(Object rowObject:dataRowsList )
                {
                    DataRow row=(DataRow) rowObject;
                    attribute.getValues().add(row.get(index));
                    //---------------------------------------------------------------
                    //DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
                    String DBValues="";
                    //DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
                    for (Object o:row.getValuesList())
                    {
                        String value=(String) o;
                   //DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
                        if (row.getValuesList().indexOf(o)==0)
                            DBValues=DBValues+"'"+value.toString()+"'";
                        else
                            DBValues=DBValues+","+"'"+value.toString()+"'";
                    //DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
                    }
                    //DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
                    String statement="INSERT INTO "+"XData("+this.xDBAttributes+ ") VALUES("+DBValues+")";
                    //System.out.print(statement);
                    DBTools.executeDML(statement);
                    //DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
                }             
            }
           metabolomicsData.getDataSet().setAttributesList((ArrayList<Attribute>) attributesList.clone());
         }
        } catch (SQLException ex) {
            Logger.getLogger(DataForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(DataForm.class.getName()).log(Level.SEVERE, null, ex);
        }
this.DataSet_jList.setModel(this.getDataSettAttributesModel());
this.save();

    }


//DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
//****************************************************************************
//                             Data Set Attributes
//****************************************************************************
//DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD

    private void Load_dataSet_attributes()
    {
         try {
            File file = Tools.chooseFile(Config.defaultLocation, null, null, false);
            if (file!=null)
            {
            Tools.viewAnyFile(file);

            if (metabolomicsData == null) {
                metabolomicsData = new MetabolomicsData();
            }
            if (metabolomicsData.getDataSet() == null) {
                metabolomicsData.setDataSet(new DataSet());
            }
            ArrayList<String> attributesList = Tools.fileToArrayList(file.getPath());
            ArrayList<Attribute> dataAttributesList = new ArrayList<Attribute>();
            //DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
            String DBAttributesAndType="";
            //DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
            for (Object o : attributesList)
            {
                String attributeName=  (String) o;
                // dealing with white spaces
                attributeName=attributeName.trim();
                if (attributeName.contains("	"))
                    attributeName=attributeName.substring(0, attributeName.indexOf("	"));
                else if(attributeName.contains(" "))
                    attributeName=attributeName.substring(0, attributeName.indexOf(" "));
               Attribute attribute=new Attribute();
               attribute.setName(attributeName.toString());
               dataAttributesList.add(attribute);
               //DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
               if (attributesList.indexOf(o)==0)
               {
                  xDBAttributes=xDBAttributes+" "+attributeName.toString();
                  DBAttributesAndType=DBAttributesAndType+" "+attributeName.toString()+" varchar2(50)";
                }
               else
               {
                 xDBAttributes=xDBAttributes+", "+attributeName.toString();
                 DBAttributesAndType=DBAttributesAndType+", "+attributeName.toString()+" varchar2(50)";
               }
               //DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
            }            
            metabolomicsData.getDataSet().setAttributesList((ArrayList<Attribute>) dataAttributesList.clone());
            
            //-----------------------------------------------------------------
            ResultSet resultSet=DBTools.executeSQL(""
                    + "SELECT table_name "
                    + "FROM USER_TABLES "
                    + "WHERE table_name = 'XDATA'"
                    );
            String tableName=null;
            while ( resultSet.next() ) {
                tableName=resultSet.getString("table_name");// to be changed according to expected data type
            }
            if ( tableName!=null && tableName.equals("XDATA"))
                DBTools.executeDDL("drop table XDATA");
            //-----------------------------------------------------------------            
            String statement="create table "+"XDATA"+"( "+DBAttributesAndType+" )";
            //System.out.print(statement);
            DBTools.executeDDL(statement);
            //-----------------------
          }
        } catch (SQLException ex) {
            Logger.getLogger(DataForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(DataForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.DataSet_jList.setModel(this.getDataSettAttributesModel());
        this.save();
   }

//DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
//****************************************************************************
//                             Data Information
//****************************************************************************
//DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD


private void populate()
{
if (this.metabolomicsData!=null)
{

    if (metabolomicsData.getDataSet()!=null && metabolomicsData.getDataSet().getOutcomeURL()!=null)
    {
        if ( metabolomicsData.getDataSet().getAttributesList()!=null && metabolomicsData.getDataSet().getAttributesList().size()>0)                            
        {
          DataSet_jTextField.setText(metabolomicsData.getDataSet().getOutcomeURL().toString());
          this.DataSet_jList.setModel(this.getDataSettAttributesModel());
          External_DataSet_jTextField.setText("");           
        }
        else
        {
          External_DataSet_jTextField.setText(metabolomicsData.getDataSet().getOutcomeURL().toString());
          DataSet_jTextField.setText("");
        }
        
    }
    else          
    {
       DataSet_jTextField.setText("");
       External_DataSet_jTextField.setText("");           
    }       
    
    //*************************************************************************
    if (metabolomicsData.getMetaData()!=null && metabolomicsData.getMetaData().getOutcomeURL()!=null)
    {
        if ( metabolomicsData.getMetaData().getAttributesList()!=null && metabolomicsData.getMetaData().getAttributesList().size()>0)
        {
          MetaData_jTextField.setText(metabolomicsData.getMetaData().getOutcomeURL().toString());
          this.MetaData_jList.setModel(this.getMetaDatatAttributesModel());
          External_MetaData_jTextField.setText("");
        }
        else
        {
          External_MetaData_jTextField.setText(metabolomicsData.getMetaData().getOutcomeURL().toString());
          MetaData_jTextField.setText("");
        }
    }
    else
    {
       MetaData_jTextField.setText("");
       External_MetaData_jTextField.setText("");
    }
}
this.DataSet_jList.setModel(this.getDataSettAttributesModel());
this.MetaData_jList.setModel(this.getMetaDatatAttributesModel());
 this.populateForm();
}

//----------------------------------------------------------------------------
//
//-----------------------------------------------------------------------------

    private void clear()
    {
        this.metabolomicsData=null;
        this.DataSet_jList.setModel(this.getDataSettAttributesModel());
        this.MetaData_jList.setModel(this.getMetaDatatAttributesModel());
    }



//DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
//****************************************************************************
//                             Meta Data Rows
//****************************************************************************
//DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
    private void Load_metaData_rows()
    {
         try {
           File file= Tools.chooseFile(Config.defaultLocation,null,null,false);
           if (file!=null)
            {
           Tools.viewAnyFile(file);
            ArrayList<DataRow> dataRowsList=Tools.fileToTokenisedArrayList(file.getPath());
            if (metabolomicsData==null)
                metabolomicsData=new MetabolomicsData();
            if (metabolomicsData.getMetaData()==null)
                metabolomicsData.setMetaData(new MetaData());
            ArrayList<Attribute> attributesList=new ArrayList<Attribute>();
            attributesList=metabolomicsData.getMetaData().getAttributesList();

            for(int index=0;index<attributesList.size();index++)
            {
                Attribute attribute=(Attribute) attributesList.get(index);

                if (attribute.getValues()==null)
                    attribute.setValues(new ArrayList<Object>());

                for(Object rowObject:dataRowsList )
                {
                    DataRow row=(DataRow) rowObject;
                    if (row.get(index)!=null)
                        attribute.getValues().add(row.get(index));

                  //DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
                    String DBValues="";
                    //DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
                    for (Object o:row.getValuesList())
                    {
                        String value=(String) o;
                   //DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
                        if (row.getValuesList().indexOf(o)==0)
                            DBValues=DBValues+"'"+value.toString()+"'";
                        else
                            DBValues=DBValues+","+"'"+value.toString()+"'";
                    //DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
                    }
                    //DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
                    String statement="INSERT INTO "+"yData("+this.yDBAttributes+ ") VALUES("+DBValues+")";
                    //System.out.print(statement);
                    DBTools.executeDML(statement);
                    //DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
                }
             //System.out.print("Name= "+attribute.getName()+" Values= "+attribute.getValues());
            }
           metabolomicsData.getMetaData().setAttributesList((ArrayList<Attribute>) attributesList.clone());
          }
        } catch (SQLException ex) {
            Logger.getLogger(DataForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(DataForm.class.getName()).log(Level.SEVERE, null, ex);
        }
      this.MetaData_jList.setModel(this.getMetaDatatAttributesModel());
      this.save();
    }

//DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
//****************************************************************************
//                             Meta Data Attributes
//****************************************************************************
//DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
    private void Load_metaData_attributes()
    {
        try {
            File file = Tools.chooseFile(Config.defaultLocation, null, null, false);
           if (file!=null)
            {
            Tools.viewAnyFile(file);
            if (metabolomicsData == null) {
                metabolomicsData = new MetabolomicsData();
            }
            if (metabolomicsData.getMetaData() == null) {
                metabolomicsData.setMetaData(new MetaData());
            }
            ArrayList<String> attributesList = Tools.fileToArrayList(file.getPath());
            ArrayList<Attribute> dataAttributesList = new ArrayList<Attribute>();            
            //DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
            String DBAttributesAndType="";
            //DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD            
            for (Object o : attributesList) {
                String attributeName=  (String) o;

                // dealing with white spaces
                attributeName=attributeName.trim();
                  if (attributeName.contains("	"))
                    attributeName=attributeName.substring(0, attributeName.indexOf("	"));
                  else if(attributeName.contains(" "))
                     attributeName=attributeName.substring(0, attributeName.indexOf(" "));
                 Attribute attribute=new Attribute();
                 attribute.setName(attributeName.toString());
                dataAttributesList.add(attribute);                
            //DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
               if (attributesList.indexOf(o)==0)
               {
                  yDBAttributes=yDBAttributes+" "+attributeName.toString();
                  DBAttributesAndType=DBAttributesAndType+" "+attributeName.toString()+" varchar2(1000)";
                }
               else
               {
                 yDBAttributes=yDBAttributes+", "+attributeName.toString();
                 DBAttributesAndType=DBAttributesAndType+", "+attributeName.toString()+" varchar2(1000)";
               }
            //DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
            }            
            metabolomicsData.getMetaData().setAttributesList((ArrayList<Attribute>) dataAttributesList.clone());

            //-----------------------------------------------------------------
            ResultSet resultSet=DBTools.executeSQL(""
                    + "SELECT table_name "
                    + "FROM USER_TABLES "
                    + "WHERE table_name = 'YDATA'"
                    );
            String tableName=null;
            while ( resultSet.next() ) {
                tableName=resultSet.getString("table_name");// to be changed according to expected data type
            }
            if (tableName!=null && tableName.equals("YDATA"))
                DBTools.executeDDL("drop table YDATA");
            //-----------------------------------------------------------------
            DBTools.executeDDL("create table "+"YDATA"+"( "+DBAttributesAndType+" )");
            }
        } catch (SQLException ex) {
            Logger.getLogger(DataForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(DataForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.MetaData_jList.setModel(this.getMetaDatatAttributesModel());
        this.save();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AimsOfStudy_jButton;
    private javax.swing.JButton DataSet_Browse_jButton;
    private javax.swing.JList DataSet_jList;
    private javax.swing.JTextField DataSet_jTextField;
    private javax.swing.JButton Delete_DataSet_jButton;
    private javax.swing.JButton Delete_MetaData_jButton;
    private javax.swing.JButton Delete_jButton;
    private javax.swing.JTextField External_DataSet_jTextField;
    private javax.swing.JTextField External_MetaData_jTextField;
    private javax.swing.JButton Help_jButton;
    private javax.swing.JButton Load_DataSet_jButton;
    private javax.swing.JButton Load_MetaDataSet_jButton;
    private javax.swing.JButton MetaData_Browse_jButton;
    private javax.swing.JList MetaData_jList;
    private javax.swing.JTextField MetaData_jTextField;
    private javax.swing.JLabel Planning_Planner_Name_jLabel31;
    private javax.swing.JLabel Planning_Planner_Name_jLabel32;
    private javax.swing.JDesktopPane Planning_Planner_info_jDesktopPane11;
    private javax.swing.JDesktopPane Planning_Planner_info_jDesktopPane9;
    private javax.swing.JButton Save_jButton;
    private javax.swing.JButton View_External_DataSet_jButton;
    private javax.swing.JButton View_External_MetaData_jButton;
    private javax.swing.JDesktopPane desktopPane;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JMenuBar menuBar;
    // End of variables declaration//GEN-END:variables



//PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
//****************************************************************************
//                             Populate
//****************************************************************************
//PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP

private void populateForm()
{
    this.setTitle("Metabolomics Data");
    this.repaint();
    this.pack();
 }

//****************************************************************************
private void save()
{
if (this.metabolomicsData==null)
    this.metabolomicsData=new MetabolomicsData();

String location=null;
if (Global.project.getLocation()!=null && Global.project.getName()!=null)
{

    location = (Global.project.getLocation() + "/" + Global.project.getName() + "/" + "inputs").toLowerCase();

 }
if (this.metabolomicsData!=null)
{   
    //--------------------------------------------------------------------
    if (this.metabolomicsData.getDataSet()!=null && this.metabolomicsData.getDataSet().getOutcomeURL()!=null &&
        ! Tools.toFile(this.metabolomicsData.getDataSet().getOutcomeURL()).getPath().toLowerCase().
        equals(location+"/"+Tools.toFile(this.metabolomicsData.getDataSet().getOutcomeURL()).getName().toLowerCase()))
        {              
                try {
                    if (!DataSet_jTextField.getText().equals(""))
                        this.metabolomicsData.setDataSet(new DataSet(new URL(DataSet_jTextField.getText())));
                    else
                        if (!External_DataSet_jTextField.getText().equals(""))
                           {
                              this.metabolomicsData.setDataSet(new DataSet());
                              this.metabolomicsData.getDataSet().setOutcomeURL(new URL(External_DataSet_jTextField.getText()));
                              this.metabolomicsData.getDataSet().setIsExternal(true);
                           }

                    if (this.metabolomicsData!=null)
                        this.metabolomicsData.save();

                     if (Global.project!=null && Global.project.getInputs()!=null)
                         Global.project.getInputs().store();
                } catch (MalformedURLException ex) {
                    Logger.getLogger(DataForm.class.getName()).log(Level.SEVERE, null, ex);
                }
        }
    //--------------------------------------------------------------------
    if (this.metabolomicsData.getMetaData()!=null && this.metabolomicsData.getMetaData().getOutcomeURL()!=null &&
        ! Tools.toFile(this.metabolomicsData.getMetaData().getOutcomeURL()).getPath().toLowerCase().
        equals(location+"/"+Tools.toFile(this.metabolomicsData.getMetaData().getOutcomeURL()).getName().toLowerCase()))
        {
                try {
                    if (!MetaData_jTextField.getText().equals(""))
                        this.metabolomicsData.setMetaData(new MetaData(new URL(MetaData_jTextField.getText())));
                    else
                        if (!External_MetaData_jTextField.getText().equals(""))
                           {
                              this.metabolomicsData.setMetaData(new MetaData());
                              this.metabolomicsData.getMetaData().setOutcomeURL(new URL(External_MetaData_jTextField.getText()));
                              this.metabolomicsData.getMetaData().setIsExternal(true);
                           }

                    if (this.metabolomicsData!=null)
                        this.metabolomicsData.save();

                     if (Global.project!=null && Global.project.getInputs()!=null)
                         Global.project.getInputs().store();
                } catch (MalformedURLException ex) {
                    Logger.getLogger(DataForm.class.getName()).log(Level.SEVERE, null, ex);
                }
        }
}
}

//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
//                       Get Project Attributes Model
//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
public  DefaultComboBoxModel getDataSettAttributesModel()
{
  DefaultComboBoxModel dcm=null;
  ArrayList<Attribute> attributesList=new ArrayList<Attribute>();
  String[] attributesArrayNames = null;
  if (metabolomicsData!=null && metabolomicsData.getDataSet()!=null)
  {
    if (metabolomicsData.getDataSet().getAttributesList()!=null
              && metabolomicsData.getDataSet().getAttributesList().size()>0)
      {
        attributesList=metabolomicsData.getDataSet().getAttributesList();
        int size=attributesList.size();
        attributesArrayNames = new String[size];
        int i=0;
        for (Object o:attributesList)
            {
              Attribute thisAttribute=(Attribute) o;
              attributesArrayNames[i]=thisAttribute.toString();
              i=i+1;
             }
        dcm=new DefaultComboBoxModel(attributesArrayNames);
        return dcm;
        }
     else
      {
        String names[] ={"<No attribute available yet>"};
        dcm=new DefaultComboBoxModel(names);
        return dcm;
      }
  }
 else
    {
    String names[] ={"<No attribute available yet>"};
    dcm=new DefaultComboBoxModel(names);
     return dcm;
    }
 }

//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
//                       Get Project Attributes Model
//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
public  DefaultComboBoxModel getMetaDatatAttributesModel()
{
  DefaultComboBoxModel dcm=null;
  ArrayList<Attribute> attributesList=new ArrayList<Attribute>();
  String[] attributesArrayNames = null;
  if (metabolomicsData!=null && metabolomicsData.getMetaData()!=null)
  {
    if (metabolomicsData.getMetaData().getAttributesList()!=null
              && metabolomicsData.getMetaData().getAttributesList().size()>0)
      {
        attributesList=metabolomicsData.getMetaData().getAttributesList();
        int size=attributesList.size();
        attributesArrayNames = new String[size];
        int i=0;
        for (Object o:attributesList)
            {
              Attribute thisAttribute=(Attribute) o;
              attributesArrayNames[i]=thisAttribute.toString();
              i=i+1;
             }
        dcm=new DefaultComboBoxModel(attributesArrayNames);
        return dcm;
        }
     else
      {
        String names[] ={"<No attribute available yet>"};
        dcm=new DefaultComboBoxModel(names);
        return dcm;
      }
  }
 else
    {
    String names[] ={"<No attribute available yet>"};
    dcm=new DefaultComboBoxModel(names);
     return dcm;
    }
 }


}
