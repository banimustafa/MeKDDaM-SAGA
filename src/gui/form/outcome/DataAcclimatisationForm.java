/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ObjectivesForm.java
 *
 * Created on 04-Oct-2010, 12:05:22
 */

package gui.form.outcome;
import com.google.common.collect.Iterables;
import global.Global;
import gui.form.supplement.ManagementForm;
import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Collections;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import process_model.phase.Phase;
import process_model.phase.delivery.data.AcclimatisedData;
import process_model.general.Procedure;
import process_model.general.Procedures;
import process_model.phase.delivery.Delivery;
import process_model.process.result.Result;
import process_model.phase.delivery.process_objective.DataMiningObjective;
import process_model.phase.delivery.selection.ModelingTechniqueSelection;
import process_model.supplement.management.resource.Resource;
import process_model.supplement.management.resource.Resources;
import process_model.process.Process;
import process_model.process.input.data.MetabolomicsData;
import project.Project;
import toolbox.Tools;
import toolbox.filetools.FileTools;

/**
 *
 * @author amb04
 */
public class DataAcclimatisationForm extends javax.swing.JFrame {
    private String techniques[]={"","Clustering","Decision Trees", "Genetica Alogorithms", "Neural Networks", "PCA", "Regression", "Other"};
    private String splits[]={"","All","Building Data", "Testing Data","Training Data", "Other"};
    private AcclimatisedData acclimatisedData;
    private Procedure procedure;
    private Resource resource=null;   
    private boolean automated=false;
    private MetabolomicsData metabolomicsData=null;
    private boolean refreshAfterAcclimatisation=false; // flag that the widowas activation and dactivation
                                // for the purpose of data acclomatization not for editiing
                                // project resources( which needs to keep form without refreshing)
//CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC    /** Creates new form ObjectivesForm */
public DataAcclimatisationForm() {
    initComponents();
    this.setVisible(true);
    this.refresh_aclimatisedData();
    this.populate_aclimatisedData();
    this.setTitle("Acclimatised Data: "+Global.currentPhase.getTitle());
    if (Global.project.getInputs()!=null && Global.project.getInputs().getMetabolomicsData()!=null)
        metabolomicsData=Global.project.getInputs().getMetabolomicsData();
}

//CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Planning_Planner_info_jDesktopPane6 = new javax.swing.JDesktopPane();
        Planning_Planner_info_jDesktopPane7 = new javax.swing.JDesktopPane();
        Planning_Planner_info_jDesktopPane3 = new javax.swing.JDesktopPane();
        Planning_Planner_Name_jLabel8 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        Purpose_jTextArea = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        Procedure_jTextArea = new javax.swing.JTextArea();
        Planning_Planner_Name_jLabel10 = new javax.swing.JLabel();
        Planning_Planner_info_jDesktopPane4 = new javax.swing.JDesktopPane();
        Planning_Objectives_Control_jDesktopPane1 = new javax.swing.JDesktopPane();
        Select_Resource_jButton = new javax.swing.JButton();
        Unselect_Resource_jButton = new javax.swing.JButton();
        Edit_Resource_jButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Resources_jList = new javax.swing.JList();
        jScrollPane6 = new javax.swing.JScrollPane();
        Selected_Resources_jList = new javax.swing.JList();
        jButton3 = new javax.swing.JButton();
        jScrollPane11 = new javax.swing.JScrollPane();
        Procedures_jList = new javax.swing.JList();
        Planning_Objectives_Control_jDesktopPane10 = new javax.swing.JDesktopPane();
        Add_Procedure_jButton = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        Objectives_jDesktopPane1 = new javax.swing.JDesktopPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        Objectives_jTextArea = new javax.swing.JTextArea();
        Objectives_jDesktopPane = new javax.swing.JDesktopPane();
        jScrollPane5 = new javax.swing.JScrollPane();
        SelectedModelingTechniqueSummary_jTextArea = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        Planning_Planner_Name_jLabel11 = new javax.swing.JLabel();
        Prerequisite_Source_ExternalSource_URL_jLabel3 = new javax.swing.JLabel();
        Split_jComboBox = new javax.swing.JComboBox();
        URL_jTextField = new javax.swing.JTextField();
        Browse_jButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        Automated_jCheckBox = new javax.swing.JCheckBox();
        Delete_Procedure_jButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        Navigation_jDesktopPane = new javax.swing.JDesktopPane();
        Last_jButton = new javax.swing.JButton();
        Next_jButton = new javax.swing.JButton();
        Previous_jButton = new javax.swing.JButton();
        First_jButton = new javax.swing.JButton();
        Control_jDesktopPane = new javax.swing.JDesktopPane();
        Delete_jButton = new javax.swing.JButton();
        Save_jButton = new javax.swing.JButton();
        Refresh_jButton = new javax.swing.JButton();
        New_jDesktopPane = new javax.swing.JDesktopPane();
        New_jButton1 = new javax.swing.JButton();
        Add_jButton1 = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowDeactivated(java.awt.event.WindowEvent evt) {
                formWindowDeactivated(evt);
            }
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        Planning_Planner_info_jDesktopPane6.setBackground(new java.awt.Color(255, 255, 204));
        Planning_Planner_info_jDesktopPane6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        Planning_Planner_info_jDesktopPane6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Planning_Planner_info_jDesktopPane6MouseClicked(evt);
            }
        });

        Planning_Planner_info_jDesktopPane7.setBackground(new java.awt.Color(255, 255, 204));
        Planning_Planner_info_jDesktopPane7.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Data Acclimatisation", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N
        Planning_Planner_info_jDesktopPane7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Planning_Planner_info_jDesktopPane7MouseClicked(evt);
            }
        });

        Planning_Planner_info_jDesktopPane3.setBackground(new java.awt.Color(255, 255, 153));
        Planning_Planner_info_jDesktopPane3.setBorder(javax.swing.BorderFactory.createTitledBorder("Data Acclimatisation Procedure"));
        Planning_Planner_info_jDesktopPane3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Planning_Planner_info_jDesktopPane3MouseClicked(evt);
            }
        });

        Planning_Planner_Name_jLabel8.setText("Procedure  Description");
        Planning_Planner_Name_jLabel8.setBounds(20, 20, 240, 20);
        Planning_Planner_info_jDesktopPane3.add(Planning_Planner_Name_jLabel8, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Purpose_jTextArea.setColumns(20);
        Purpose_jTextArea.setRows(5);
        jScrollPane2.setViewportView(Purpose_jTextArea);

        jScrollPane2.setBounds(330, 40, 290, 90);
        Planning_Planner_info_jDesktopPane3.add(jScrollPane2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Procedure_jTextArea.setColumns(20);
        Procedure_jTextArea.setRows(5);
        jScrollPane3.setViewportView(Procedure_jTextArea);

        jScrollPane3.setBounds(20, 40, 300, 90);
        Planning_Planner_info_jDesktopPane3.add(jScrollPane3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Planner_Name_jLabel10.setText("Procedure Purpose");
        Planning_Planner_Name_jLabel10.setBounds(330, 20, 130, 20);
        Planning_Planner_info_jDesktopPane3.add(Planning_Planner_Name_jLabel10, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Planner_info_jDesktopPane4.setBackground(new java.awt.Color(255, 255, 102));
        Planning_Planner_info_jDesktopPane4.setBorder(javax.swing.BorderFactory.createTitledBorder("Procedure Required Resources"));
        Planning_Planner_info_jDesktopPane4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Planning_Planner_info_jDesktopPane4MouseClicked(evt);
            }
        });

        Planning_Objectives_Control_jDesktopPane1.setBackground(new java.awt.Color(255, 255, 102));

        Select_Resource_jButton.setText("+>");
        Select_Resource_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Select_Resource_jButtonActionPerformed(evt);
            }
        });
        Select_Resource_jButton.setBounds(0, 0, 70, 20);
        Planning_Objectives_Control_jDesktopPane1.add(Select_Resource_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Unselect_Resource_jButton.setText("<-");
        Unselect_Resource_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Unselect_Resource_jButtonActionPerformed(evt);
            }
        });
        Unselect_Resource_jButton.setBounds(0, 20, 70, 20);
        Planning_Objectives_Control_jDesktopPane1.add(Unselect_Resource_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Edit_Resource_jButton.setText("Edit");
        Edit_Resource_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Edit_Resource_jButtonActionPerformed(evt);
            }
        });
        Edit_Resource_jButton.setBounds(0, 50, 70, 25);
        Planning_Objectives_Control_jDesktopPane1.add(Edit_Resource_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Objectives_Control_jDesktopPane1.setBounds(270, 20, 70, 90);
        Planning_Planner_info_jDesktopPane4.add(Planning_Objectives_Control_jDesktopPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Resources_jList.setBorder(javax.swing.BorderFactory.createTitledBorder("Project Resources"));
        Resources_jList.setModel(this.getProjectResourcesModel());
        Resources_jList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        Resources_jList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                Resources_jListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(Resources_jList);

        jScrollPane1.setBounds(10, 20, 250, 120);
        Planning_Planner_info_jDesktopPane4.add(jScrollPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Selected_Resources_jList.setBorder(javax.swing.BorderFactory.createTitledBorder("Procedure Resources"));
        Selected_Resources_jList.setModel(this.getSelectedResourcesModel());
        Selected_Resources_jList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        Selected_Resources_jList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                Selected_Resources_jListValueChanged(evt);
            }
        });
        jScrollPane6.setViewportView(Selected_Resources_jList);

        jScrollPane6.setBounds(350, 20, 240, 120);
        Planning_Planner_info_jDesktopPane4.add(jScrollPane6, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Planner_info_jDesktopPane4.setBounds(20, 140, 600, 150);
        Planning_Planner_info_jDesktopPane3.add(Planning_Planner_info_jDesktopPane4, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jButton3.setText("Clear Procedure");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jButton3.setBounds(20, 300, 600, 25);
        Planning_Planner_info_jDesktopPane3.add(jButton3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Planner_info_jDesktopPane3.setBounds(10, 230, 640, 330);
        Planning_Planner_info_jDesktopPane7.add(Planning_Planner_info_jDesktopPane3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Procedures_jList.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Applied Procedures", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N
        Procedures_jList.setModel(this.getSelectedProcedures());
        Procedures_jList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                Procedures_jListValueChanged(evt);
            }
        });
        jScrollPane11.setViewportView(Procedures_jList);

        jScrollPane11.setBounds(750, 230, 300, 300);
        Planning_Planner_info_jDesktopPane7.add(jScrollPane11, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Objectives_Control_jDesktopPane10.setBackground(new java.awt.Color(255, 255, 204));

        Add_Procedure_jButton.setText("Save +>");
        Add_Procedure_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Add_Procedure_jButtonActionPerformed(evt);
            }
        });
        Add_Procedure_jButton.setBounds(0, 0, 90, 25);
        Planning_Objectives_Control_jDesktopPane10.add(Add_Procedure_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Objectives_Control_jDesktopPane10.setBounds(660, 230, 90, 40);
        Planning_Planner_info_jDesktopPane7.add(Planning_Objectives_Control_jDesktopPane10, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Objectives_jDesktopPane1.setBackground(new java.awt.Color(255, 255, 153));
        Objectives_jDesktopPane1.setBorder(javax.swing.BorderFactory.createTitledBorder("Data Mining Objectives "));
        Objectives_jDesktopPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Objectives_jDesktopPane1MouseClicked(evt);
            }
        });

        Objectives_jTextArea.setBackground(new java.awt.Color(255, 255, 204));
        Objectives_jTextArea.setColumns(20);
        Objectives_jTextArea.setRows(5);
        jScrollPane4.setViewportView(Objectives_jTextArea);

        jScrollPane4.setBounds(10, 20, 360, 130);
        Objectives_jDesktopPane1.add(jScrollPane4, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jTabbedPane1.addTab("Data Mining Objectives", Objectives_jDesktopPane1);

        Objectives_jDesktopPane.setBackground(new java.awt.Color(255, 255, 153));
        Objectives_jDesktopPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Selected Data Mining Technique Details"));
        Objectives_jDesktopPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Objectives_jDesktopPaneMouseClicked(evt);
            }
        });

        SelectedModelingTechniqueSummary_jTextArea.setBackground(new java.awt.Color(255, 255, 204));
        SelectedModelingTechniqueSummary_jTextArea.setColumns(20);
        SelectedModelingTechniqueSummary_jTextArea.setRows(5);
        jScrollPane5.setViewportView(SelectedModelingTechniqueSummary_jTextArea);

        jScrollPane5.setBounds(10, 20, 360, 130);
        Objectives_jDesktopPane.add(jScrollPane5, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jTabbedPane1.addTab("Modeling Technique", Objectives_jDesktopPane);

        jTabbedPane1.setBounds(660, 30, 390, 190);
        Planning_Planner_info_jDesktopPane7.add(jTabbedPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jPanel2.setBackground(new java.awt.Color(255, 255, 153));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Acclimatization Data"));
        jPanel2.setLayout(null);

        Planning_Planner_Name_jLabel11.setText("Acclimatised Data Split");
        jPanel2.add(Planning_Planner_Name_jLabel11);
        Planning_Planner_Name_jLabel11.setBounds(10, 90, 190, 20);

        Prerequisite_Source_ExternalSource_URL_jLabel3.setText("Acclimatised Data URL");
        jPanel2.add(Prerequisite_Source_ExternalSource_URL_jLabel3);
        Prerequisite_Source_ExternalSource_URL_jLabel3.setBounds(140, 90, 230, 20);

        Split_jComboBox.setMaximumRowCount(10);
        Split_jComboBox.setModel(new DefaultComboBoxModel(this.splits));
        jPanel2.add(Split_jComboBox);
        Split_jComboBox.setBounds(10, 110, 120, 25);
        jPanel2.add(URL_jTextField);
        URL_jTextField.setBounds(140, 110, 320, 25);

        Browse_jButton.setText("Browse");
        Browse_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Browse_jButtonActionPerformed(evt);
            }
        });
        jPanel2.add(Browse_jButton);
        Browse_jButton.setBounds(460, 110, 90, 25);

        jButton1.setText("View");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton1);
        jButton1.setBounds(550, 110, 80, 25);

        jButton4.setText("Load DataSet");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton4);
        jButton4.setBounds(10, 40, 120, 25);

        jLabel1.setText("* Browse for external data ");
        jPanel2.add(jLabel1);
        jLabel1.setBounds(460, 140, 180, 30);

        Automated_jCheckBox.setBackground(new java.awt.Color(255, 255, 153));
        Automated_jCheckBox.setText("Automated");
        Automated_jCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Automated_jCheckBoxActionPerformed(evt);
            }
        });
        jPanel2.add(Automated_jCheckBox);
        Automated_jCheckBox.setBounds(150, 40, 160, 20);

        jPanel2.setBounds(10, 30, 640, 190);
        Planning_Planner_info_jDesktopPane7.add(jPanel2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Delete_Procedure_jButton.setText("Delete -");
        Delete_Procedure_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Delete_Procedure_jButtonActionPerformed(evt);
            }
        });
        Delete_Procedure_jButton.setBounds(750, 530, 300, 25);
        Planning_Planner_info_jDesktopPane7.add(Delete_Procedure_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Planner_info_jDesktopPane7.setBounds(10, 10, 1070, 570);
        Planning_Planner_info_jDesktopPane6.add(Planning_Planner_info_jDesktopPane7, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jPanel1.setBackground(new java.awt.Color(255, 255, 204));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        Navigation_jDesktopPane.setBackground(new java.awt.Color(255, 255, 153));
        Navigation_jDesktopPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        Last_jButton.setText("Last >>");
        Last_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Last_jButtonActionPerformed(evt);
            }
        });
        Last_jButton.setBounds(330, 10, 100, 23);
        Navigation_jDesktopPane.add(Last_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Next_jButton.setText("Next >");
        Next_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Next_jButtonActionPerformed(evt);
            }
        });
        Next_jButton.setBounds(240, 10, 90, 23);
        Navigation_jDesktopPane.add(Next_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Previous_jButton.setText("< Previous");
        Previous_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Previous_jButtonActionPerformed(evt);
            }
        });
        Previous_jButton.setBounds(130, 10, 110, 23);
        Navigation_jDesktopPane.add(Previous_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        First_jButton.setText("<< First");
        First_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                First_jButtonActionPerformed(evt);
            }
        });
        First_jButton.setBounds(10, 10, 120, 23);
        Navigation_jDesktopPane.add(First_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Control_jDesktopPane.setBackground(new java.awt.Color(255, 255, 153));
        Control_jDesktopPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        Delete_jButton.setText("Delete");
        Delete_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Delete_jButtonActionPerformed(evt);
            }
        });
        Delete_jButton.setBounds(200, 10, 80, 25);
        Control_jDesktopPane.add(Delete_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Save_jButton.setText("Save");
        Save_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Save_jButtonActionPerformed(evt);
            }
        });
        Save_jButton.setBounds(120, 10, 80, 25);
        Control_jDesktopPane.add(Save_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Refresh_jButton.setText("Refresh");
        Refresh_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Refresh_jButtonActionPerformed(evt);
            }
        });
        Refresh_jButton.setBounds(10, 10, 110, 25);
        Control_jDesktopPane.add(Refresh_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        New_jDesktopPane.setBackground(new java.awt.Color(255, 255, 153));
        New_jDesktopPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        New_jButton1.setText("New");
        New_jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                New_jButton1ActionPerformed(evt);
            }
        });
        New_jButton1.setBounds(10, 10, 80, 23);
        New_jDesktopPane.add(New_jButton1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Add_jButton1.setText("Add +");
        Add_jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Add_jButton1ActionPerformed(evt);
            }
        });
        Add_jButton1.setBounds(90, 10, 90, 23);
        New_jDesktopPane.add(Add_jButton1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Navigation_jDesktopPane, javax.swing.GroupLayout.PREFERRED_SIZE, 440, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(55, 55, 55)
                .addComponent(Control_jDesktopPane, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addComponent(New_jDesktopPane, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(Control_jDesktopPane, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(New_jDesktopPane, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Navigation_jDesktopPane, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.setBounds(10, 590, 1050, 60);
        Planning_Planner_info_jDesktopPane6.add(jPanel1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Planning_Planner_info_jDesktopPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 1083, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Planning_Planner_info_jDesktopPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 663, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
//    System.runFinalization();
    System.gc();        
    }//GEN-LAST:event_formWindowClosed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated

    //--------------------------------------------------------------------        
    if (this.acclimatisedData==null)
    {
        this.refresh_aclimatisedData();
        this.populate_aclimatisedData();
        this.Resources_jList.setModel(this.getProjectResourcesModel());
    } 
    else if (refreshAfterAcclimatisation==true)
    {
        this.refresh_aclimatisedData();
        this.populate_aclimatisedData();
        this.Resources_jList.setModel(this.getProjectResourcesModel());        
    }
    else
    {
        this.populate_aclimatisedData();
        this.Resources_jList.setModel(this.getProjectResourcesModel());
    }

    
    
    //this.populateForm();

    }//GEN-LAST:event_formWindowActivated


    private void formWindowDeactivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowDeactivated
if (this.acclimatisedData!=null)
   this.save_aclimatisedData();
    }//GEN-LAST:event_formWindowDeactivated

    private void Procedures_jListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_Procedures_jListValueChanged

    //this.clear_Procedure();
    //this.clear_procedure_form();

if (this.acclimatisedData!=null && this.acclimatisedData.getProcedures()!=null)
    if (this.acclimatisedData.getProcedures().getProceduresList().size()>=0 && this.Procedures_jList.getSelectedIndex()>=0)
    {
       this.procedure=this.acclimatisedData.getProcedures().getProcedure(this.Procedures_jList.getSelectedIndex());
        populate_procedure();
        populateForm();
    }
    }//GEN-LAST:event_Procedures_jListValueChanged

    private void populate_procedure()
    {
        if (procedure!=null && this.procedure.getDescription()!=null)
            this.Procedure_jTextArea.setText(this.procedure.getDescription());
        else
            this.Procedure_jTextArea.setText("");

        if (procedure!=null && this.procedure.getPurpose()!=null)
            this.Purpose_jTextArea.setText(this.procedure.getPurpose());
        else
            this.Purpose_jTextArea.setText("");

        //this.Procedures_jList.setModel(this.getSelectedProcedures());
        //this.Selected_Resources_jList.setModel(this.getSelectedResourcesModel());

    }

    private void Planning_Planner_info_jDesktopPane4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Planning_Planner_info_jDesktopPane4MouseClicked
        // TODO add your handling code here:
}//GEN-LAST:event_Planning_Planner_info_jDesktopPane4MouseClicked

    private void Add_Procedure_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Add_Procedure_jButtonActionPerformed

     if (this.procedure==null)
         this.procedure=new Procedure();

     if (this.acclimatisedData==null)
         this.acclimatisedData=new AcclimatisedData();

     if (this.acclimatisedData!=null && this.acclimatisedData.getProcedures()==null)
        acclimatisedData.setProcedures(new Procedures());

     if (!this.Purpose_jTextArea.getText().equals(""))
          this.procedure.setPurpose(Purpose_jTextArea.getText());

     if (!this.Procedure_jTextArea.getText().equals(""))
          this.procedure.setDescription(Procedure_jTextArea.getText());

      if (!this.URL_jTextField.getText().equals(""))
      try {
             this.acclimatisedData.setOutcomeURL(new URL(URL_jTextField.getText()));
           }
      catch (MalformedURLException ex)
           {
             JOptionPane.showMessageDialog(null, "Wrong URL Format... use file:/ for local files!");}

      if (this.Split_jComboBox.getSelectedIndex()!=0)
          this.acclimatisedData.setSplitIndex(Split_jComboBox.getSelectedIndex());

      if (this.procedure!=null && this.acclimatisedData!=null && this.acclimatisedData.getProcedures()!=null)
          this.acclimatisedData.getProcedures().save(this.procedure);

   this.clear_Procedure();
   this.clear_procedure_form();

   this.Procedures_jList.setModel(this.getSelectedProcedures());
   this.populateForm();

}//GEN-LAST:event_Add_Procedure_jButtonActionPerformed

    private void Planning_Planner_info_jDesktopPane6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Planning_Planner_info_jDesktopPane6MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_Planning_Planner_info_jDesktopPane6MouseClicked

    private void Planning_Planner_info_jDesktopPane3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Planning_Planner_info_jDesktopPane3MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_Planning_Planner_info_jDesktopPane3MouseClicked

    private void Resources_jListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_Resources_jListValueChanged

        if (Global.project!=null&&Global.project.getSupplements()!=null &&
                Global.project.getSupplements().getManagement()!=null &&
                Global.project.getSupplements().getManagement().getResources()!=null )
            if (this.Resources_jList.getSelectedIndex()>=0)
                this.resource=Global.project.getSupplements().getManagement().
                        getResources().getResource(this.Resources_jList.getSelectedIndex());

        this.populateForm();

    }//GEN-LAST:event_Resources_jListValueChanged

    private void Browse_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Browse_jButtonActionPerformed

      //------------------------------------------------------------------------
      int decision1=JOptionPane.showConfirmDialog(null, "Would you like to reset the phase deliveries?");
      if (decision1==0)
        {                
             if (this.acclimatisedData!=null)
                 this.acclimatisedData.UnDeliver();             
            this.clear_aclimatisedData();
            this.refresh_aclimatisedData();
            this.populate_aclimatisedData();             
            this.Resources_jList.setModel(this.getProjectResourcesModel());              
            this.populateForm();                           
        } 
            
      //------------------------------------------------------------------------
      if (decision1==1 || decision1==1)
          {
            getExternalAcclimatisedFile();
            int decision2=JOptionPane.showConfirmDialog(null, "Would you like to import the acclimatised data");
              if (decision2==0)
                {
                    importExternalAcclimatisedFile();                        

                    Global.activeDataSetFile=Tools.toFile(acclimatisedData.getOutcomeURL());
                     automated=false;
                    this.Automated_jCheckBox.setSelected(false);
               }                 
            }

    }//GEN-LAST:event_Browse_jButtonActionPerformed

    private void Planning_Planner_info_jDesktopPane7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Planning_Planner_info_jDesktopPane7MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_Planning_Planner_info_jDesktopPane7MouseClicked

    private void Selected_Resources_jListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_Selected_Resources_jListValueChanged

        if (this.procedure!=null && this.procedure.getResources()!=null )

            if (this.procedure.getResources().getResourcesList().size()>=0
            && this.Selected_Resources_jList.getSelectedIndex()>=0)

            this.resource= (Resource) this.procedure.getResources().getResourcesList().
                    get(this.Selected_Resources_jList.getSelectedIndex());
    }//GEN-LAST:event_Selected_Resources_jListValueChanged

    private void Select_Resource_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Select_Resource_jButtonActionPerformed

if (this.procedure==null)
    this.procedure=new Procedure();

if (this.procedure!=null && this.resource!=null )
   {
      if (this.procedure.getResources()==null)
          this.procedure.setResources(new Resources());

      this.addResourceFunds();
      //
      this.procedure.getResources().save(this.resource);
   }

this.Selected_Resources_jList.setModel(this.getSelectedResourcesModel());

        this.populateForm();
    }//GEN-LAST:event_Select_Resource_jButtonActionPerformed

    private void Unselect_Resource_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Unselect_Resource_jButtonActionPerformed

        if (this.procedure!=null)
        {
            this.deductResourceFunds();
            this.delete_aclimatisedData_resource();
        }
        //
        this.Selected_Resources_jList.setModel(this.getSelectedResourcesModel());

        this.populateForm();

    }//GEN-LAST:event_Unselect_Resource_jButtonActionPerformed

    private void Edit_Resource_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Edit_Resource_jButtonActionPerformed
        new ManagementForm(this.resource).setVisible(true);
}//GEN-LAST:event_Edit_Resource_jButtonActionPerformed

    private void Delete_Procedure_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Delete_Procedure_jButtonActionPerformed

        if (this.procedure!=null)
            this.delete_aclimatisedData_procedure();
        //
        this.Procedures_jList.setModel(this.getSelectedProcedures());

        this.populateForm();
}//GEN-LAST:event_Delete_Procedure_jButtonActionPerformed

    private void Add_jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Add_jButton1ActionPerformed
    this.save_aclimatisedData();
    this.clear_aclimatisedData();
    this.populate_aclimatisedData();
}//GEN-LAST:event_Add_jButton1ActionPerformed

    private void New_jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_New_jButton1ActionPerformed
        
        this.clear_aclimatisedData();
        
}//GEN-LAST:event_New_jButton1ActionPerformed

    private void Refresh_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Refresh_jButtonActionPerformed
        this.clear_aclimatisedData();
        this.refresh_aclimatisedData();
        this.populate_aclimatisedData();
}//GEN-LAST:event_Refresh_jButtonActionPerformed

    private void Save_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Save_jButtonActionPerformed

        this.save_aclimatisedData();
}//GEN-LAST:event_Save_jButtonActionPerformed

    private void Delete_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Delete_jButtonActionPerformed

  if (this.acclimatisedData!=null && this.acclimatisedData.getOutcomeURL()!=null)
    {
     if (this.acclimatisedData.getOutcomeURL().toString().toLowerCase().contains("acclimat")||
         this.acclimatisedData.getOutcomeURL().toString().toLowerCase().contains("test") ||
         this.acclimatisedData.getOutcomeURL().toString().toLowerCase().contains("train"))
     {
        this.acclimatisedData.UnDeliverAsMain();
        this.delete_acclimatisedData();
        this.populate_aclimatisedData();
        this.populateForm();
     }
     else
     {
        File toFile = Tools.toFile(this.acclimatisedData.getOutcomeURL());
        if (toFile.exists())
            toFile.delete();

        this.delete_acclimatisedData();        
        //
        this.refresh_aclimatisedData();
        //
        this.populate_aclimatisedData();
        this.populateForm();
     }

    }


}//GEN-LAST:event_Delete_jButtonActionPerformed

    private void First_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_First_jButtonActionPerformed
        this.first_acclimatisedData();
}//GEN-LAST:event_First_jButtonActionPerformed

    private void Previous_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Previous_jButtonActionPerformed
        this.previous_aclimatisedData();
}//GEN-LAST:event_Previous_jButtonActionPerformed

    private void Next_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Next_jButtonActionPerformed
        this.next_aclimatisedData();
}//GEN-LAST:event_Next_jButtonActionPerformed

    private void Last_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Last_jButtonActionPerformed
        this.last_aclimatisedData();
}//GEN-LAST:event_Last_jButtonActionPerformed

    private void Objectives_jDesktopPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Objectives_jDesktopPane1MouseClicked
        // TODO add your handling code here:
}//GEN-LAST:event_Objectives_jDesktopPane1MouseClicked

    private void Objectives_jDesktopPaneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Objectives_jDesktopPaneMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_Objectives_jDesktopPaneMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //this.updatDataSet();
        File file=null;
        if (URL_jTextField.getText()!=null && !URL_jTextField.getText().equals(""))
            try {
                file=Tools.toFile(new URL (URL_jTextField.getText()));
            } catch (MalformedURLException ex) {
                Logger.getLogger(DataAcclimatisationForm.class.getName()).log(Level.SEVERE, null, ex);
            }

        if (file.exists())        
        {
                if (automated==true || this.Automated_jCheckBox.isSelected())
                {
                    Global.isAcclimatization=true;
                    this.refreshAfterAcclimatisation=true;                    
                    FileTools.viewData(file);
                    refreshAfterAcclimatisation=false;
//                    Global.isAcclimatization=false;
                }
                else
                    Tools.viewAnyFile(file);
        }       
        /*
        this.save_aclimatisedData();
        this.clear_aclimatisedData();
         *
         */

}//GEN-LAST:event_jButton1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

//----------------------------------------------------------------------------        
  int decision=JOptionPane.showConfirmDialog(null, "Would you like to reset the delivery of acclimatisation phase?");
  if (decision==0)
   {                
       if (this.acclimatisedData!=null)
           this.acclimatisedData.UnDeliver();                                        

        this.clear_aclimatisedData();
        this.refresh_aclimatisedData();
        this.populate_aclimatisedData();

        this.Resources_jList.setModel(this.getProjectResourcesModel());              
        this.populateForm();                           
   }
  
  //----------------------------------------------------------------------------
  if (decision==0 || decision==1)
  {         
   if (metabolomicsData !=null && metabolomicsData.getDataSet()!=null && metabolomicsData.getDataSet().getOutcomeURL()!=null)
    {
        
        
        File dataSetFile=Tools.toFile(metabolomicsData.getDataSet().getOutcomeURL());       
        
       if (dataSetFile.exists())
       {
           Global.isAcclimatization=true;
           refreshAfterAcclimatisation=true;
           FileTools.viewData(dataSetFile.getPath());
           refreshAfterAcclimatisation=false;
//           Global.isAcclimatization=false;
       }
        else
            JOptionPane.showMessageDialog(null, "data file was deleted most likely in dataFileViewerPanel");       
    }

     this.automated=true;  
     this.Automated_jCheckBox.setSelected(true);                    
          
      this.refresh_aclimatisedData();
      this.populate_aclimatisedData();
      this.populateForm();
              
//     Save_jButtonActionPerformed(evt);
//     Refresh_jButtonActionPerformed(evt);     
 }
}//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
this.clear_Procedure();


    }//GEN-LAST:event_jButton3ActionPerformed

    private void Automated_jCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Automated_jCheckBoxActionPerformed
        if (Automated_jCheckBox.isSelected())         
            automated=true;
         else
            automated=false;
        
//       URL_jTextField.setText("");        
        
    }//GEN-LAST:event_Automated_jCheckBoxActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
//if (this.acclimatisedData!=null)
    this.save_aclimatisedData();

Global.isAcclimatization=false;

        //Global.currentPhase.store(null);
    }//GEN-LAST:event_formWindowClosing

    private void importExternalAcclimatisedFile()
    {
         try {        
         URL localizedDataFileURL=null;
          
          if (acclimatisedData!=null)
             localizedDataFileURL =acclimatisedData.getOutcomeURL();

          //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
          if (localizedDataFileURL!=null)
            {
            try {

/*                
                //-------------------------------------------------------------
                 URL_jTextField.setText(localizedDataFileURL.toString());
                 if (!URL_jTextField.getText().equals(""))
                 {
                    if (this.metabolomicsData==null)
                        this.metabolomicsData=new MetabolomicsData();

                    this.metabolomicsData.setDataSet(new DataSet(localizedDataFileURL));
                 }
*/
                 //-------------------------------------------------------------
                File localizedDataFile =Tools.toFile(localizedDataFileURL);
                Global.activeDataSetFile=localizedDataFile;

                //-------------------------------------------------------------                
                Global.isAcclimatization=true;
                refreshAfterAcclimatisation=true;
                FileTools.viewData(localizedDataFile.getPath());                
                refreshAfterAcclimatisation=false;
//                Global.isAcclimatization=false;                
                
                } catch (Exception ex) {
                    Logger.getLogger(DataAcclimatisationForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

         }
         
  catch(Exception ex){
      Logger.getLogger(DataAcclimatisationForm.class.getName()).log(Level.SEVERE, null, ex);}

    }
    
//****************************************************************************
//****************************************************************************        
        
private void getExternalAcclimatisedFile()
{   
   this.Automated_jCheckBox.setSelected(false);
   this.automated=false;
   URL thisURL=null;
   File file =null;
   //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   if (!this.URL_jTextField.getText().equals(""))
    {
        try {
            thisURL=new URL(this.URL_jTextField.getText());
            String homeDirectory=Tools.toFile(thisURL).getParent();
            file= Tools.chooseFile("Choose Acclimatized Data File", null, homeDirectory, false);
            }

        catch (MalformedURLException ex)
        {
              file = Tools.chooseFile("Choose Acclimatized Data File",null, Global.project.getLocation(), false);
        }
    }
    else
        file = Tools.chooseFile("Choose Acclimatized File",null, Global.project.getLocation(), false);


   //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   if (file!=null)
       this.URL_jTextField.setText(Tools.toURL(file).toString());

   this.acclimatisedData= new AcclimatisedData();
   
   if (thisURL!=null)
       acclimatisedData.setOutcomeURL(thisURL);
   
   this.save_aclimatisedData();

   //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   int decision=JOptionPane.showConfirmDialog(null, "Would you like to import the file to the temp folder as a local copy ?");
   if (decision==0)
      {
          try {
              URL selectedUrl = new URL(this.URL_jTextField.getText());
              URL newUrl = Tools.copyFileToInputs(selectedUrl);

              if (newUrl!=null)
                  this.URL_jTextField.setText(newUrl.toString());
              
              if (newUrl!=null)
                   acclimatisedData.setOutcomeURL(newUrl);
            }
            catch (MalformedURLException ex) {
               Logger.getLogger(DataExplorationForm.class.getName()).log(Level.SEVERE, null, ex);
            }
       }

    this.save_aclimatisedData();
}    
    
    
//******************************************************************************                
private void save_aclimatisedData()
{
     if (this.acclimatisedData==null)
         this.acclimatisedData=new AcclimatisedData();
      //************************************************************************
      if ( acclimatisedData!=null && !this.URL_jTextField.getText().equals("") )
      {
         try {
              this.acclimatisedData.setOutcomeURL(new URL(URL_jTextField.getText()));
         } catch (MalformedURLException ex) {

             JOptionPane.showMessageDialog(null, "Wrong URL Format... use file:/ for local files!");
             Logger.getLogger(DataAcclimatisationForm.class.getName()).log(Level.SEVERE, null, ex);
         }
      }

   if (this.Automated_jCheckBox.isSelected())
        this.acclimatisedData.setAutomated(true);
    else
        this.acclimatisedData.setAutomated(false);

      //---------------------------------------------------------------------
      if (this.acclimatisedData !=null && this.Split_jComboBox.getSelectedItem()!=null)
          this.acclimatisedData.setSplitIndex(Split_jComboBox.getSelectedIndex());

      //---------------------------------------------------------------------
      if (this.acclimatisedData !=null && this.acclimatisedData.getOutcomeURL()!=null)
         /*
           if (this.acclimatisedData.getOutcomeURL().toString().toLowerCase().contains("acclimat")||
              this.acclimatisedData.getOutcomeURL().toString().toLowerCase().contains("test") ||
              this.acclimatisedData.getOutcomeURL().toString().toLowerCase().contains("train"))
         */
              this.acclimatisedData.deliverAsMain();
}



//-----------------------------------------------------------------------------
//*****************************************************************************
//                     Resources Funds Calculations
//*****************************************************************************
//-----------------------------------------------------------------------------
private void addResourceFunds()
{
if (Global.project!=null &&
                Global.project.getSupplements()!=null &&
                Global.project.getSupplements().getManagement()!=null &&
                Global.project.getSupplements().getManagement().getConstraint()!=null)
                {
                      Double curruntUsedFunds=Global.project.getSupplements().getManagement().getConstraint().getUsedFunds();
                      Double totalFunds=Global.project.getSupplements().getManagement().getConstraint().getTotalFunds();

                      Double resourceCost=0.0;

                      if (this.resource!=null)
                              resourceCost= this.resource.getCost();

                      Double newUsedFunds=curruntUsedFunds+resourceCost;

                      if (newUsedFunds>totalFunds)
                          JOptionPane.showMessageDialog(null, "Exceeded the project Total Funds,"
                                                           +" Used Funds = "+newUsedFunds
                                                           +" Project Planned Total Funds = "+totalFunds);

                     Global.project.getSupplements().getManagement().getConstraint().setUsedFunds(newUsedFunds);

                }
}

//*****************************************************************************
private void deductResourceFunds()
{
 //------------------------------------------------------------------
            if (Global.project!=null &&
                Global.project.getSupplements()!=null &&
                Global.project.getSupplements().getManagement()!=null &&
                Global.project.getSupplements().getManagement().getConstraint()!=null)
                {
                      Double curruntUsedFunds=Global.project.getSupplements().getManagement().getConstraint().getUsedFunds();
                      Double totalFunds=Global.project.getSupplements().getManagement().getConstraint().getTotalFunds();

                      Double resourceCost=0.0;

                      if (this.resource!=null)
                              resourceCost= this.resource.getCost();

                      Double newUsedFunds=curruntUsedFunds-resourceCost;

                      if (newUsedFunds>totalFunds)
                          JOptionPane.showMessageDialog(null, "Exceeded the project Total Funds,"
                                                           +" Used Funds = "+newUsedFunds
                                                           +" Project Planned Total Funds = "+totalFunds);

                     Global.project.getSupplements().getManagement().getConstraint().setUsedFunds(newUsedFunds);

                }
}

//FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
//****************************************************************************
//                            First & Last
//****************************************************************************
//FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF

 private void first_acclimatisedData()
    {
     if (Global.currentPhase!=null &&
         Global.currentPhase.getResult() !=null &&
         Global.currentPhase.getResult().getSupplementDeliveries() !=null &&
         Global.currentPhase.getResult().getSupplementDeliveries().getFirst()!=null)
     {
         this.save_aclimatisedData();         
         this.acclimatisedData=(AcclimatisedData) Global.currentPhase.getResult().getSupplementDeliveries().getFirst();
         this.clear_procedure_form();
         this.populate_aclimatisedData();
      }

       // this.refresh_Resource(this.thisResource);
 }

 //****************************************************************************
 private void last_aclimatisedData()
 {
    if (Global.currentPhase!=null &&
        Global.currentPhase.getResult() !=null &&
        Global.currentPhase.getResult().getSupplementDeliveries() !=null &&
        Global.currentPhase.getResult().getSupplementDeliveries().getLast()!=null)
    {
        this.save_aclimatisedData();               
        this.acclimatisedData=(AcclimatisedData) Global.currentPhase.getResult().getSupplementDeliveries().getLast();     
        this.clear_procedure_form();
        this.populate_aclimatisedData();
  }
 }


//NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
//****************************************************************************
//                                Next
//****************************************************************************
//NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
 private void next_aclimatisedData()
    {
       if (this.acclimatisedData!=null &&
            Global.currentPhase!=null &&
            Global.currentPhase.getResult() !=null &&
            Global.currentPhase.getResult().getSupplementDeliveries() !=null &&
            Global.currentPhase.getResult().getSupplementDeliveries().getNext(this.acclimatisedData)!=null)
                {
                    this.save_aclimatisedData();                     
                    this.acclimatisedData=(AcclimatisedData) Global.currentPhase.getResult().getSupplementDeliveries().getNext(this.acclimatisedData);
                    this.clear_procedure_form();
                    this.populate_aclimatisedData();
                }
    }

//PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
//****************************************************************************
//                     Previous 
//****************************************************************************
//PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
 private void previous_aclimatisedData()
    {
     if (this.acclimatisedData!=null &&
            Global.currentPhase!=null &&
            Global.currentPhase.getResult() !=null &&
            Global.currentPhase.getResult().getSupplementDeliveries() !=null &&
            Global.currentPhase.getResult().getSupplementDeliveries().getPrevious(this.acclimatisedData)!=null)
           {
                   this.save_aclimatisedData();
                   this.acclimatisedData=(AcclimatisedData) Global.currentPhase.getResult().getSupplementDeliveries().getPrevious(this.acclimatisedData);
                   this.clear_procedure_form();
                   this.populate_aclimatisedData();
           }

    }

 
//DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
//****************************************************************************
//                              Delete
//DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
//****************************************************************************
 private void delete_acclimatisedData()
    {

    if (Global.currentPhase != null &&
    Global.currentPhase.getResult()!=null&&
    Global.currentPhase.getResult().getSupplementDeliveries()!=null  &&
    Global.currentPhase.getResult().getSupplementDeliveries().getDeliveriesList().size()>0)
    if (this.acclimatisedData!=null)
    {
      int index= Global.currentPhase.getResult().getSupplementDeliveries().getDeliveriesList().indexOf(this.acclimatisedData);
          if (Global.currentPhase.getResult().getSupplementDeliveries().delete(this.acclimatisedData)>-1);
        {
            if (Global.currentPhase.getResult().getSupplementDeliveries().getDeliveriesList().size()>0)
            {
                if (index==0 && Global.currentPhase.getResult().getSupplementDeliveries().getDelivery(index)!=null)
                    this.acclimatisedData = (AcclimatisedData) Global.currentPhase.getResult().getSupplementDeliveries().getDelivery(index);
                else if(index>0)
                    this.acclimatisedData = (AcclimatisedData) Global.currentPhase.getResult().getSupplementDeliveries().getDelivery(index-1);
            
                this.populate_aclimatisedData();
            }
            else
            {
                acclimatisedData.UnDeliver();
                this.clear_aclimatisedData();
            }
        }
     this.save_aclimatisedData();

 }
 }
 
 
private void populate_aclimatisedData()
{    
    this.Resources_jList.setModel(this.getProjectResourcesModel());
    this.Procedures_jList.setModel(this.getSelectedProcedures());
    this.Selected_Resources_jList.setModel(this.getSelectedResourcesModel());

    if ( this.acclimatisedData !=null && this.acclimatisedData.getSplitType()!=null)
       this.Split_jComboBox.setSelectedIndex(this.acclimatisedData.getSplitType().ordinal()+1);
    else
        this.Split_jComboBox.setSelectedIndex(0);

    if ( this.acclimatisedData !=null && this.acclimatisedData.getOutcomeURL()!=null)
         this.URL_jTextField.setText(this.acclimatisedData.getOutcomeURL().toString());
    else
       this.URL_jTextField.setText("");

    if (this.acclimatisedData!=null)
        this.Automated_jCheckBox.setSelected(this.acclimatisedData.isAutomated());
    else
        this.Automated_jCheckBox.setSelected(false);

    this.populateForm();

    }



//RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR
//****************************************************************************
//                              Refresh
//****************************************************************************
//RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR

 private void refresh_aclimatisedData()
 {

//******************************************************************************
 Result<DataMiningObjective> processObjectiveResult=new Result<DataMiningObjective>();
 if (Global.project.getProcess()!=null &&
     Global.project.getProcess().getResults()!=null &&
     Global.project.getProcess().getResults().getResult(1)!=null )
     {
        processObjectiveResult=Global.project.getProcess().getResults().getResult(1);
        if (processObjectiveResult.getMainDelivery()!=null)
        {
            DataMiningObjective processObjective= (DataMiningObjective) processObjectiveResult.getMainDelivery();
            Objectives_jTextArea.setText(processObjective.toMyString());
        }
    }

 
//******************************************************************************
Result<ModelingTechniqueSelection> modelingTechniqueSelectionResult=new Result<ModelingTechniqueSelection>();
ModelingTechniqueSelection selectedModelingTechnique=new ModelingTechniqueSelection();
if (Global.project!=null &&
    Global.project.getProcess()!=null &&
    Global.project.getProcess().getResults() !=null &&
    Global.project.getProcess().getResults().getResult(4)!=null)
    {
    modelingTechniqueSelectionResult=Global.project.getProcess().getResults().getResult(4);

    if (modelingTechniqueSelectionResult.getMainDelivery()!=null)
        selectedModelingTechnique=  modelingTechniqueSelectionResult.getMainDelivery();

    else if (modelingTechniqueSelectionResult.getSupplementDeliveries()!=null && modelingTechniqueSelectionResult.getSupplementDeliveries().getFirst()!=null)
        selectedModelingTechnique=  (ModelingTechniqueSelection) modelingTechniqueSelectionResult.getSupplementDeliveries().getFirst();
    this.SelectedModelingTechniqueSummary_jTextArea.setText(selectedModelingTechnique.toMyString());
    }


//******************************************************************************
 Result<AcclimatisedData> acclimatisedDataResult=new Result<AcclimatisedData>();
if (Global.currentPhase!=null &&
    Global.currentPhase.getResult()!=null)
{
    acclimatisedDataResult=Global.currentPhase.getResult();

     if (acclimatisedDataResult.getSupplementDeliveries()!=null &&
             acclimatisedDataResult.getSupplementDeliveries().getFirst()!=null)
        this.acclimatisedData= (AcclimatisedData) acclimatisedDataResult.getSupplementDeliveries().getFirst();
}
//else
//    this.acclimatisedData=null;
//  his.acclimatisedData=new AcclimatisedData();


if (Global.currentPhase!=null &&
    Global.currentPhase.getResult()!=null &&
    Global.currentPhase.getResult().getSupplementDeliveries()!=null)

this.acclimatisedData= (AcclimatisedData) Global.currentPhase.getResult().getSupplementDeliveries().getFirst();
this.populate_aclimatisedData();
}

 
 //CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
 //                         Clear Form
 //CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

 private void clear_aclimatisedData()
{
     this.acclimatisedData=null;
     this.clear_Procedure();
     this.automated=false;
      this.clear_aclimatisedDataForm();
      this.populate_aclimatisedData();
 }


 //CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
 //                         Clear Form
 //CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
 private void clear_aclimatisedDataForm()
{
     this.Split_jComboBox.setSelectedIndex(0);
     this.URL_jTextField.setText("");
     this.Automated_jCheckBox.setSelected(false);
     this.clear_procedure_form();
     this.populateForm();
 }

  //PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
//****************************************************************************
//                             Populate
//****************************************************************************
//PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP

private void populateForm()
{
    this.repaint();
    this.pack();
 }

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    if (Global.project == null) {
                        Global.project = new Project();
                    }
                    if (Global.project.getProcess() == null) {
                        Global.project.setProcess(new Process());
                    }
                    Global.project.getProcess().setVersion(1);
                    if (Global.currentPhase == null) {
                        Global.currentPhase = new Phase("Objectives Definition");
                    }
                    new DataAcclimatisationForm().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(DataAcclimatisationForm.class.getName()).log(Level.SEVERE, null, ex);
                } catch (Exception ex) {
                    Logger.getLogger(DataAcclimatisationForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

 //DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
//****************************************************************************
//                              Delete Resource
//DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
//****************************************************************************
 private void delete_aclimatisedData_resource()
{
if (this.procedure!=null &&
    this.procedure.getResources()!=null &&
    this.procedure.getResources().getResourcesList().size()>0)
    {
        int index= this.procedure.getResources().getResourcesList().indexOf(this.resource);
        if (this.procedure.getResources().delete(this.resource)==0);
        {
            if (this.procedure.getResources().getResourcesList().size()>0)
            {
                if (index==0)
                    this.resource = this.procedure.getResources().getResource(index);
                else if(index>0)
                    this.resource = this.procedure.getResources().getResource(index-1);

            }
        }
 }
}


//DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
//****************************************************************************
//                              Delete Source
//DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
//****************************************************************************
 private void delete_aclimatisedData_procedure()
    {
    if (this.acclimatisedData!=null && this.procedure!=null &&
       this.acclimatisedData.getProcedures()!=null &&
        this.acclimatisedData.getProcedures().getProceduresList().size()>0)
    {
        int index= this.acclimatisedData.getProcedures().getProceduresList().indexOf(this.procedure);
        if (this.acclimatisedData.getProcedures().delete(this.procedure)==0)
        {
            if (this.acclimatisedData.getProcedures().getProceduresList().size()>0)
            {
                if (index==0)
                    this.procedure = this.acclimatisedData.getProcedures().getProcedure(index);
                else
                    this.procedure = this.acclimatisedData.getProcedures().getProcedure(index-1);

            }
            else
            this.clear_Procedure();
        }
     save_aclimatisedData();
    }
 }


//CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
//****************************************************************************
//                     Clear 
//****************************************************************************
 //CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

 private void clear_Procedure()
{
     this.procedure=null;
     this.clear_procedure_form();
 }


 //CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
 //                         Clear 
 //CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
 private void clear_procedure_form()
 {
     this.Purpose_jTextArea.setText("");
     this.Procedure_jTextArea.setText("");
     this.Selected_Resources_jList.setModel(this.getSelectedResourcesModel());
 }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Add_Procedure_jButton;
    private javax.swing.JButton Add_jButton1;
    private javax.swing.JCheckBox Automated_jCheckBox;
    private javax.swing.JButton Browse_jButton;
    private javax.swing.JDesktopPane Control_jDesktopPane;
    private javax.swing.JButton Delete_Procedure_jButton;
    private javax.swing.JButton Delete_jButton;
    private javax.swing.JButton Edit_Resource_jButton;
    private javax.swing.JButton First_jButton;
    private javax.swing.JButton Last_jButton;
    private javax.swing.JDesktopPane Navigation_jDesktopPane;
    private javax.swing.JButton New_jButton1;
    private javax.swing.JDesktopPane New_jDesktopPane;
    private javax.swing.JButton Next_jButton;
    private javax.swing.JDesktopPane Objectives_jDesktopPane;
    private javax.swing.JDesktopPane Objectives_jDesktopPane1;
    private javax.swing.JTextArea Objectives_jTextArea;
    private javax.swing.JDesktopPane Planning_Objectives_Control_jDesktopPane1;
    private javax.swing.JDesktopPane Planning_Objectives_Control_jDesktopPane10;
    private javax.swing.JLabel Planning_Planner_Name_jLabel10;
    private javax.swing.JLabel Planning_Planner_Name_jLabel11;
    private javax.swing.JLabel Planning_Planner_Name_jLabel8;
    private javax.swing.JDesktopPane Planning_Planner_info_jDesktopPane3;
    private javax.swing.JDesktopPane Planning_Planner_info_jDesktopPane4;
    private javax.swing.JDesktopPane Planning_Planner_info_jDesktopPane6;
    private javax.swing.JDesktopPane Planning_Planner_info_jDesktopPane7;
    private javax.swing.JLabel Prerequisite_Source_ExternalSource_URL_jLabel3;
    private javax.swing.JButton Previous_jButton;
    private javax.swing.JTextArea Procedure_jTextArea;
    private javax.swing.JList Procedures_jList;
    private javax.swing.JTextArea Purpose_jTextArea;
    private javax.swing.JButton Refresh_jButton;
    private javax.swing.JList Resources_jList;
    private javax.swing.JButton Save_jButton;
    private javax.swing.JButton Select_Resource_jButton;
    private javax.swing.JTextArea SelectedModelingTechniqueSummary_jTextArea;
    private javax.swing.JList Selected_Resources_jList;
    private javax.swing.JComboBox Split_jComboBox;
    private javax.swing.JTextField URL_jTextField;
    private javax.swing.JButton Unselect_Resource_jButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JMenuBar menuBar;
    // End of variables declaration//GEN-END:variables


//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
//                       Get Project Resources Model
//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
public  DefaultComboBoxModel getProjectResourcesModel()
{
  DefaultComboBoxModel dcm=null;
  ArrayList<Resource> resourcesList=new ArrayList<Resource>();
  String[] resourcesArrayNames = null;
  if (Global.project!=null
          && Global.project.getSupplements()!=null
          && Global.project.getSupplements().getManagement()!=null )
  {
      if (  Global.project.getSupplements().getManagement().getResources()!=null
              && Global.project.getSupplements().getManagement().getResources().getResourcesList().size()>0)
      {
        resourcesList=Global.project.getSupplements().getManagement().getResources().getResourcesList();
        int size=resourcesList.size();
        resourcesArrayNames = new String[size];
        int i=0;
        for (Object o:resourcesList)
            {
              Resource thisResource=(Resource) o;
              String result="";
              if (thisResource.getResourceType()!=null)
                  result=thisResource.getResourceType().toString()+"  ";
              if (thisResource.getDescription()!=null)
                   result=result+ thisResource.getDescription();
              resourcesArrayNames[i]=result;
              i=i+1;
             }
        dcm=new DefaultComboBoxModel(resourcesArrayNames);
        return dcm;
        }
     else
      {
        String names[] ={"<No resource available yet>"};
        dcm=new DefaultComboBoxModel(names);
        return dcm;
      }
  }
 else
    {
    String names[] ={"<No resource available yet>"};
    dcm=new DefaultComboBoxModel(names);
     return dcm;
    }
 }

//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
//                       Get Planned Resources Model
//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
public  DefaultComboBoxModel getSelectedResourcesModel()
{
  DefaultComboBoxModel dcm=null;
  ArrayList<Resource> resourcesList=new ArrayList<Resource>();
  String[] resourcesArrayNames = null;

 if (this.procedure!=null &&
     this.procedure.getResources()!=null )

  {
      if (this.procedure.getResources().getResourcesList().size()>0)
      {
        resourcesList=this.procedure.getResources().getResourcesList();
        int size=resourcesList.size();
        resourcesArrayNames = new String[size];
        int i=0;
        for (Object o:resourcesList)
            {
              Resource thisResource=(Resource) o;
              String result="";
              if (thisResource.getResourceType()!=null)
                  result=thisResource.getResourceType().toString()+"  ";
              if (thisResource.getDescription()!=null)
                   result=result+ thisResource.getDescription();
              resourcesArrayNames[i]=result;
              i=i+1;
             }
        dcm=new DefaultComboBoxModel(resourcesArrayNames);
        return dcm;
        }
     else
      {
        String names[] ={"<No selected resource yet>"};
        dcm=new DefaultComboBoxModel(names);
        return dcm;
      }
  }
 else
    {
    String names[] ={"<No selected resource yet>"};
    dcm=new DefaultComboBoxModel(names);
     return dcm;
    }
 }


  //COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
//                       Get Project Remeasures Model
//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
public  DefaultComboBoxModel getSelectedProcedures()
{
  DefaultComboBoxModel dcm=null;
  ArrayList<Procedure> proceduresList=new ArrayList<Procedure>();
  String[] procedureArrayNames = null;
  if (this.acclimatisedData!=null &&this.acclimatisedData.getProcedures()!=null)

  {
      if ( this.acclimatisedData.getProcedures().getProceduresList().size()>0)
      {
        proceduresList=this.acclimatisedData.getProcedures().getProceduresList();
        int size=proceduresList.size();
        procedureArrayNames = new String[size];
        int i=0;
        for (Object o:proceduresList)
            {
            String result="";
            Procedure  thisProcedure=(Procedure) o;
            result=thisProcedure.toString();
            procedureArrayNames[i]=result;
              i=i+1;
              //--------------------------------------------------------------
             }
        dcm=new DefaultComboBoxModel(procedureArrayNames);
        return dcm;
        }
     else
      {
        String names[] ={"<No expected outcome selected yet>"};
        dcm=new DefaultComboBoxModel(names);
        return dcm;
      }
  }
 else
    {
    String names[] ={"<No expected outcome selected yet>"};
    dcm=new DefaultComboBoxModel(names);
     return dcm;
    }
 }


}
