/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PerformingForm.java
 *
 * Created on 04-Oct-2010, 12:08:43
 */

package gui.form.outcome;

//import global.Config;
import global.Global;
import gui.form.input.StudyForm;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import process_model.general.Procedure;
import process_model.issue.measurement.Measure;
import process_model.issue.measurement.MeasurmentOutcome;
import process_model.issue.tracibility.ExternalSource;
import process_model.issue.tracibility.HumanSource;
import process_model.issue.tracibility.InternalSource;
import process_model.issue.tracibility.Source;
import process_model.phase.Phase;
import process_model.process.result.Result;
import process_model.phase.delivery.deployment.Deployment;
import process_model.phase.delivery.evaluation.ProcessEvaluation;
import process_model.phase.delivery.knowledge.PresentedKnowledge;
import process_model.phase.delivery.selection.ModelingTechniqueSelection;
import process_model.phase.delivery.model.Model;
import process_model.phase.delivery.model.ModelEvaluation;
import process_model.phase.delivery.process_objective.DataMiningObjective;
import process_model.supplement.management.resource.Resource;
import project.Project;
import process_model.process.Process;
import process_model.phase.delivery.knowledge.KnowledgeEvaluation;
import process_model.process.result.Results;
import process_model.supplement.standard.Standard;
import toolbox.Tools;
/**
 *
 * @author amb04
 */
public class ProcessEvaluationForm extends javax.swing.JFrame {
private Procedure procedure=null;
private ModelEvaluation modelEvaluation;
//private ModelEvaluation modelEvaluation;
private Resource resource=null;
private Phase phase=Global.currentPhase;
private ModelingTechniqueSelection techniqueSelection=null;
private Model model=null;
private Standard standard;
private Measure measure=null;
private MeasurmentOutcome outcome =null;
private PresentedKnowledge presentation=null;
private DataMiningObjective processObjective=null;
private Source source=null;
private MeasurmentOutcome expectedOutcome =null;
private KnowledgeEvaluation knowledgeEvaluation=null;
private Result result;
private ProcessEvaluation processEvaluation;
private Deployment deployment;



private String methods[]={"",
  "GRAPHICAL",
  "TABULAR",
  "TEXTUAL",
  "OTHER"
};

private String visulaizationTechniques[]={"",
"Algorithm Based Technique",
"Geometrical Transformation",
"Graph Based Technique",
"Hierarchical Technique",
"Icon Based Technique",
"Multi Dimension",
"One Dimension",
"Pixels Oriented Technique",
"Projection",
"Three_Dimension",
"Two Dimension",
"Other"
};
//=============================================================================
private String targets[]={"",
"Data_Warehouse",
"DBMS",
"EmbededSystem",
"FileSystem",
"Software_Application",
"Web_Reposotory",
"Web_Service",
"Other"
};
//AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
private String approaches[]={"",
    "Hypotheis-Driven",
    "Data-Driven","Other"};

private String tasks[]={"","Association",    
    "Classification",
    "Correlation Aanalysis",
    "Dimentionality Reduction",
    "Feature Extraction and Analysis",
    "Hypotheisis Testing",  
    "Regression",
    "Segmentation",    
    "Other"};

private String goals[]={"","DESCRIPTION",
    "DISCOVERY",
    "PREDICTION",
    "VERIFICATION",
    "OTHER"};

private String splits[]={"","All","Building Data",
    "Training Data",
    "Testing Data",
    "Other"};
    //
    /** Creates new form PlanningForm */
//CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
public ProcessEvaluationForm() {
     initComponents();        
     this.refresh();
     this.populate_processEvaluation();
     this.setTitle("Process Evaluation: "+Global.currentPhase.getTitle());
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Performing_jLayeredPane = new javax.swing.JLayeredPane();
        Performing_Details_jDesktopPane_jDesktopPane = new javax.swing.JDesktopPane();
        Performing_Details_TabbedPane = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        Objectives_jTextArea = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        Selected_ExpectedMeasurmentOutcomes_jList = new javax.swing.JList();
        Technique_jDesktopPane = new javax.swing.JDesktopPane();
        Approaches_jComboBox = new javax.swing.JComboBox();
        Planning_Planner_Role_jLabel1 = new javax.swing.JLabel();
        goal_jLabel = new javax.swing.JLabel();
        Goals_jComboBox = new javax.swing.JComboBox();
        Tasks_jComboBox = new javax.swing.JComboBox();
        task_jLabel = new javax.swing.JLabel();
        algorithm_jLabel = new javax.swing.JLabel();
        Supervised_jCheckBox = new javax.swing.JCheckBox();
        jScrollPane70 = new javax.swing.JScrollPane();
        Technique_jTextPane = new javax.swing.JTextPane();
        Planning_CustomisedPlanItem_jLabel = new javax.swing.JLabel();
        Algorithm_jTextPane = new javax.swing.JTextField();
        Planning_Planner_jDesktopPane1 = new javax.swing.JDesktopPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        Model_Selected_MeasuredOutcomes_jList = new javax.swing.JList();
        jScrollPane4 = new javax.swing.JScrollPane();
        Model_Selected_Standards_jList = new javax.swing.JList();
        URL_jLabel = new javax.swing.JLabel();
        Model_URL_jTextField = new javax.swing.JTextField();
        Browse_jButton = new javax.swing.JButton();
        jScrollPane8 = new javax.swing.JScrollPane();
        Model_Used_Resources_jList = new javax.swing.JList();
        jScrollPane69 = new javax.swing.JScrollPane();
        ResultSummary_jTextPane = new javax.swing.JTextPane();
        ModelPerformance_jLabel = new javax.swing.JLabel();
        jScrollPane9 = new javax.swing.JScrollPane();
        Expected_Resources_jList = new javax.swing.JList();
        jScrollPane14 = new javax.swing.JScrollPane();
        Expected_MeasurmentOutcomes_jList = new javax.swing.JList();
        Planning_CustomisedPlan_jDesktopPane = new javax.swing.JDesktopPane();
        jDesktopPane8 = new javax.swing.JDesktopPane();
        jDesktopPane51 = new javax.swing.JDesktopPane();
        ModelPerformanceAcceptable_jCheckBox = new javax.swing.JCheckBox();
        jDesktopPane45 = new javax.swing.JDesktopPane();
        ModelUnderFit_jCheckBox = new javax.swing.JCheckBox();
        jDesktopPane50 = new javax.swing.JDesktopPane();
        ModelOverFit_jCheckBox = new javax.swing.JCheckBox();
        jScrollPane3 = new javax.swing.JScrollPane();
        jScrollPane12 = new javax.swing.JScrollPane();
        ModelPerformanceComment_jTextPane = new javax.swing.JTextPane();
        jScrollPane5 = new javax.swing.JScrollPane();
        jScrollPane13 = new javax.swing.JScrollPane();
        ConfusionMatrixResult_jTextPane = new javax.swing.JTextPane();
        Procedures_jList = new javax.swing.JList();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jScrollPane17 = new javax.swing.JScrollPane();
        Knowledge_Recommendations_jTextPane = new javax.swing.JTextPane();
        jScrollPane10 = new javax.swing.JScrollPane();
        jScrollPane18 = new javax.swing.JScrollPane();
        Knowledge_PropogatedQuestion_jTextPane = new javax.swing.JTextPane();
        jScrollPane19 = new javax.swing.JScrollPane();
        jScrollPane20 = new javax.swing.JScrollPane();
        Knowledge_PropogatedHypothesis_jTextPane = new javax.swing.JTextPane();
        jDesktopPane52 = new javax.swing.JDesktopPane();
        KnowledgeConsistentWithLiterature_jCheckBox = new javax.swing.JCheckBox();
        jDesktopPane53 = new javax.swing.JDesktopPane();
        KnowledgeConsistentWithBiology_jCheckBox = new javax.swing.JCheckBox();
        jDesktopPane46 = new javax.swing.JDesktopPane();
        KnowledgeFulfilledStudyAims_jCheckBox = new javax.swing.JCheckBox();
        jDesktopPane54 = new javax.swing.JDesktopPane();
        KnowledgesFulfilledProcessObjectives_jCheckBox = new javax.swing.JCheckBox();
        jDesktopPane47 = new javax.swing.JDesktopPane();
        KnowledgesConsistentWithDomainExpertBackground_jCheckBox = new javax.swing.JCheckBox();
        jScrollPane16 = new javax.swing.JScrollPane();
        KnowledgeEvaluation_Used_Sources_jList = new javax.swing.JList();
        jScrollPane7 = new javax.swing.JScrollPane();
        KnowledgeEvaluation_Used_Resources_jList = new javax.swing.JList();
        Performed_Plan_jPanel = new javax.swing.JPanel();
        Planning_Planner_Name_jLabel14 = new javax.swing.JLabel();
        Method_jComboBox = new javax.swing.JComboBox();
        Technique_jComboBox = new javax.swing.JComboBox();
        Planning_Planner_Name_jLabel13 = new javax.swing.JLabel();
        Planning_Planner_Name_jLabel12 = new javax.swing.JLabel();
        Presentation_Browse_jButton = new javax.swing.JButton();
        Presentation_URL_jTextField = new javax.swing.JTextField();
        Prerequisite_Source_ExternalSource_URL_jLabel4 = new javax.swing.JLabel();
        jScrollPane21 = new javax.swing.JScrollPane();
        Presentation_Description_jTextPane = new javax.swing.JTextPane();
        FinalSelection_jCheckBox = new javax.swing.JCheckBox();
        Next_jButton1 = new javax.swing.JButton();
        Previous_jButton1 = new javax.swing.JButton();
        Performed_Plan_jPanel1 = new javax.swing.JPanel();
        Planning_Planner_Name_jLabel15 = new javax.swing.JLabel();
        DeplymentTarget_jComboBox = new javax.swing.JComboBox();
        Planning_Planner_Name_jLabel16 = new javax.swing.JLabel();
        Presentation_Open_jButton = new javax.swing.JButton();
        Deployment_URL_jTextField = new javax.swing.JTextField();
        Prerequisite_Source_ExternalSource_URL_jLabel5 = new javax.swing.JLabel();
        jScrollPane11 = new javax.swing.JScrollPane();
        Deployment_Description_jTextPane = new javax.swing.JTextPane();
        IncludeData_jCheckBox = new javax.swing.JCheckBox();
        Planning_Planner_Name_jLabel17 = new javax.swing.JLabel();
        jScrollPane15 = new javax.swing.JScrollPane();
        DeploymentMechanism_jTextPane = new javax.swing.JTextPane();
        FinalResults_jCheckBox = new javax.swing.JCheckBox();
        IncludeAllDeliveries_jCheckBox = new javax.swing.JCheckBox();
        Next_jButton = new javax.swing.JButton();
        Previous_jButton = new javax.swing.JButton();
        Control_jDesktopPane = new javax.swing.JDesktopPane();
        Delete_jButton = new javax.swing.JButton();
        Save_jButton = new javax.swing.JButton();
        Refresh_jButton = new javax.swing.JButton();
        New_jDesktopPane = new javax.swing.JDesktopPane();
        New_jButton1 = new javax.swing.JButton();
        Add_jButton1 = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        Planning_Resource_jDesktopPane = new javax.swing.JDesktopPane();
        jDesktopPane55 = new javax.swing.JDesktopPane();
        QualityIssuesConsidered_jCheckBox = new javax.swing.JCheckBox();
        jScrollPane22 = new javax.swing.JScrollPane();
        QualityComment_jTextPane = new javax.swing.JTextPane();
        jDesktopPane56 = new javax.swing.JDesktopPane();
        StandardsIssuesConsidered_jCheckBox = new javax.swing.JCheckBox();
        jScrollPane23 = new javax.swing.JScrollPane();
        StandardsComment_jTextPane = new javax.swing.JTextPane();
        jDesktopPane48 = new javax.swing.JDesktopPane();
        CarriedWithinResources_jCheckBox = new javax.swing.JCheckBox();
        jScrollPane24 = new javax.swing.JScrollPane();
        ResourcesComment_jTextPane = new javax.swing.JTextPane();
        jDesktopPane57 = new javax.swing.JDesktopPane();
        ProcessModelFollowed_jCheckBox = new javax.swing.JCheckBox();
        jScrollPane25 = new javax.swing.JScrollPane();
        ModelComment_jTextPane = new javax.swing.JTextPane();
        jDesktopPane58 = new javax.swing.JDesktopPane();
        HumanInteractionConsidered_jCheckBox = new javax.swing.JCheckBox();
        jScrollPane26 = new javax.swing.JScrollPane();
        HumanComment_jTextPane = new javax.swing.JTextPane();
        jDesktopPane49 = new javax.swing.JDesktopPane();
        lastIteration_jCheckBox = new javax.swing.JCheckBox();
        jScrollPane27 = new javax.swing.JScrollPane();
        IterationComment_jTextPane = new javax.swing.JTextPane();
        Justification_Source_jDesktopPane1 = new javax.swing.JDesktopPane();
        Result_UnSelect_jButton = new javax.swing.JButton();
        jScrollPane29 = new javax.swing.JScrollPane();
        Selected_Results_jList = new javax.swing.JList();
        Result_Select_jButton = new javax.swing.JButton();
        jScrollPane28 = new javax.swing.JScrollPane();
        CrossValidation_jTextPane = new javax.swing.JTextPane();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane30 = new javax.swing.JScrollPane();
        Results_jList = new javax.swing.JList();
        deleteCrossValidation_jButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowDeactivated(java.awt.event.WindowEvent evt) {
                formWindowDeactivated(evt);
            }
        });

        Performing_jLayeredPane.setBackground(new java.awt.Color(255, 255, 204));
        Performing_jLayeredPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        Performing_Details_jDesktopPane_jDesktopPane.setBackground(new java.awt.Color(255, 255, 204));
        Performing_Details_jDesktopPane_jDesktopPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel1.setBackground(new java.awt.Color(255, 255, 102));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Process Data Mining Objectives"));
        jPanel1.setLayout(null);

        Objectives_jTextArea.setBackground(new java.awt.Color(255, 255, 153));
        Objectives_jTextArea.setColumns(20);
        Objectives_jTextArea.setRows(5);
        Objectives_jTextArea.setEnabled(false);
        jScrollPane2.setViewportView(Objectives_jTextArea);

        jPanel1.add(jScrollPane2);
        jScrollPane2.setBounds(16, 23, 440, 200);

        jButton1.setText("Aims of Study");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1);
        jButton1.setBounds(10, 230, 450, 25);

        Selected_ExpectedMeasurmentOutcomes_jList.setBorder(javax.swing.BorderFactory.createTitledBorder("Expected Measurable Outcomes"));
        Selected_ExpectedMeasurmentOutcomes_jList.setModel(getSelectedExpectedOutcomes());
        Selected_ExpectedMeasurmentOutcomes_jList.setEnabled(false);
        Selected_ExpectedMeasurmentOutcomes_jList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                Selected_ExpectedMeasurmentOutcomes_jListValueChanged(evt);
            }
        });
        jPanel1.add(Selected_ExpectedMeasurmentOutcomes_jList);
        Selected_ExpectedMeasurmentOutcomes_jList.setBounds(470, 20, 450, 230);

        Performing_Details_TabbedPane.addTab("Process Objectives", jPanel1);

        Technique_jDesktopPane.setBackground(new java.awt.Color(255, 255, 153));
        Technique_jDesktopPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        Approaches_jComboBox.setBackground(new java.awt.Color(255, 255, 204));
        Approaches_jComboBox.setModel(new DefaultComboBoxModel(this.approaches));
        Approaches_jComboBox.setEnabled(false);
        Approaches_jComboBox.setBounds(640, 160, 260, 22);
        Technique_jDesktopPane.add(Approaches_jComboBox, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Planner_Role_jLabel1.setText(" Approach");
        Planning_Planner_Role_jLabel1.setBounds(640, 140, 130, 20);
        Technique_jDesktopPane.add(Planning_Planner_Role_jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        goal_jLabel.setText(" Goal");
        goal_jLabel.setBounds(640, 70, 130, 20);
        Technique_jDesktopPane.add(goal_jLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Goals_jComboBox.setBackground(new java.awt.Color(255, 255, 204));
        Goals_jComboBox.setModel(new DefaultComboBoxModel(this.goals));
        Goals_jComboBox.setEnabled(false);
        Goals_jComboBox.setBounds(640, 90, 260, 22);
        Technique_jDesktopPane.add(Goals_jComboBox, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Tasks_jComboBox.setBackground(new java.awt.Color(255, 255, 204));
        Tasks_jComboBox.setModel(new DefaultComboBoxModel(this.tasks));
        Tasks_jComboBox.setEnabled(false);
        Tasks_jComboBox.setBounds(640, 30, 260, 22);
        Technique_jDesktopPane.add(Tasks_jComboBox, javax.swing.JLayeredPane.DEFAULT_LAYER);

        task_jLabel.setText(" Task");
        task_jLabel.setBounds(640, 10, 130, 20);
        Technique_jDesktopPane.add(task_jLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        algorithm_jLabel.setText("Algoritm");
        algorithm_jLabel.setBounds(20, 140, 90, 20);
        Technique_jDesktopPane.add(algorithm_jLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Supervised_jCheckBox.setBackground(new java.awt.Color(255, 255, 153));
        Supervised_jCheckBox.setText("Supervised");
        Supervised_jCheckBox.setEnabled(false);
        Supervised_jCheckBox.setBounds(640, 210, 100, 20);
        Technique_jDesktopPane.add(Supervised_jCheckBox, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Technique_jTextPane.setBackground(new java.awt.Color(255, 255, 204));
        Technique_jTextPane.setEnabled(false);
        jScrollPane70.setViewportView(Technique_jTextPane);

        jScrollPane70.setBounds(20, 30, 570, 90);
        Technique_jDesktopPane.add(jScrollPane70, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_CustomisedPlanItem_jLabel.setText("Technique");
        Planning_CustomisedPlanItem_jLabel.setBounds(20, 10, 70, 20);
        Technique_jDesktopPane.add(Planning_CustomisedPlanItem_jLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Algorithm_jTextPane.setBackground(new java.awt.Color(255, 255, 204));
        Algorithm_jTextPane.setBounds(20, 160, 570, 90);
        Technique_jDesktopPane.add(Algorithm_jTextPane, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Performing_Details_TabbedPane.addTab("Modeling Technique Details", Technique_jDesktopPane);

        Planning_Planner_jDesktopPane1.setBackground(new java.awt.Color(255, 255, 153));
        Planning_Planner_jDesktopPane1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        Model_Selected_MeasuredOutcomes_jList.setBackground(new java.awt.Color(255, 255, 204));
        Model_Selected_MeasuredOutcomes_jList.setBorder(javax.swing.BorderFactory.createTitledBorder("Measured Outcomes"));
        Model_Selected_MeasuredOutcomes_jList.setModel(this.getModelPerformanceOutcomes());
        Model_Selected_MeasuredOutcomes_jList.setEnabled(false);
        Model_Selected_MeasuredOutcomes_jList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                Model_Selected_MeasuredOutcomes_jListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(Model_Selected_MeasuredOutcomes_jList);

        jScrollPane1.setBounds(180, 80, 180, 190);
        Planning_Planner_jDesktopPane1.add(jScrollPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Model_Selected_Standards_jList.setBackground(new java.awt.Color(255, 255, 204));
        Model_Selected_Standards_jList.setBorder(javax.swing.BorderFactory.createTitledBorder("Selected Standards"));
        Model_Selected_Standards_jList.setModel(this.getModelSelectedStandardsModel());
        Model_Selected_Standards_jList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        Model_Selected_Standards_jList.setEnabled(false);
        Model_Selected_Standards_jList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                Model_Selected_Standards_jListValueChanged(evt);
            }
        });
        jScrollPane4.setViewportView(Model_Selected_Standards_jList);

        jScrollPane4.setBounds(740, 80, 170, 190);
        Planning_Planner_jDesktopPane1.add(jScrollPane4, javax.swing.JLayeredPane.DEFAULT_LAYER);

        URL_jLabel.setFont(new java.awt.Font("Tahoma", 1, 11));
        URL_jLabel.setText("Model URL");
        URL_jLabel.setBounds(20, 30, 70, 25);
        Planning_Planner_jDesktopPane1.add(URL_jLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Model_URL_jTextField.setBackground(new java.awt.Color(255, 255, 204));
        Model_URL_jTextField.setEditable(false);
        Model_URL_jTextField.setBounds(120, 30, 410, 25);
        Planning_Planner_jDesktopPane1.add(Model_URL_jTextField, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Browse_jButton.setText("Open");
        Browse_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Browse_jButtonActionPerformed(evt);
            }
        });
        Browse_jButton.setBounds(530, 30, 90, 25);
        Planning_Planner_jDesktopPane1.add(Browse_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Model_Used_Resources_jList.setBackground(new java.awt.Color(255, 255, 204));
        Model_Used_Resources_jList.setBorder(javax.swing.BorderFactory.createTitledBorder("Model Required Resources"));
        Model_Used_Resources_jList.setModel(this.getModelUsedResourcesModel());
        Model_Used_Resources_jList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        Model_Used_Resources_jList.setEnabled(false);
        Model_Used_Resources_jList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                Model_Used_Resources_jListValueChanged(evt);
            }
        });
        jScrollPane8.setViewportView(Model_Used_Resources_jList);

        jScrollPane8.setBounds(540, 80, 190, 190);
        Planning_Planner_jDesktopPane1.add(jScrollPane8, javax.swing.JLayeredPane.DEFAULT_LAYER);

        ResultSummary_jTextPane.setBackground(new java.awt.Color(255, 255, 204));
        ResultSummary_jTextPane.setEditable(false);
        jScrollPane69.setViewportView(ResultSummary_jTextPane);

        jScrollPane69.setBounds(630, 30, 280, 40);
        Planning_Planner_jDesktopPane1.add(jScrollPane69, javax.swing.JLayeredPane.DEFAULT_LAYER);

        ModelPerformance_jLabel.setText("Performance Result Summary");
        ModelPerformance_jLabel.setBounds(631, 10, 280, 20);
        Planning_Planner_jDesktopPane1.add(ModelPerformance_jLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Expected_Resources_jList.setBorder(javax.swing.BorderFactory.createTitledBorder("Allocated Resources"));
        Expected_Resources_jList.setModel(this.getExpectedResourcesModel());
        Expected_Resources_jList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        Expected_Resources_jList.setEnabled(false);
        Expected_Resources_jList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                Expected_Resources_jListValueChanged(evt);
            }
        });
        jScrollPane9.setViewportView(Expected_Resources_jList);

        jScrollPane9.setBounds(370, 80, 170, 190);
        Planning_Planner_jDesktopPane1.add(jScrollPane9, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Expected_MeasurmentOutcomes_jList.setBorder(javax.swing.BorderFactory.createTitledBorder("Expected Outcomes"));
        Expected_MeasurmentOutcomes_jList.setModel(getExpectedOutcomes());
        Expected_MeasurmentOutcomes_jList.setEnabled(false);
        Expected_MeasurmentOutcomes_jList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                Expected_MeasurmentOutcomes_jListValueChanged(evt);
            }
        });
        jScrollPane14.setViewportView(Expected_MeasurmentOutcomes_jList);

        jScrollPane14.setBounds(10, 80, 170, 190);
        Planning_Planner_jDesktopPane1.add(jScrollPane14, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Performing_Details_TabbedPane.addTab("Data Mining Model", Planning_Planner_jDesktopPane1);

        Planning_CustomisedPlan_jDesktopPane.setBackground(new java.awt.Color(255, 255, 204));
        Planning_CustomisedPlan_jDesktopPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jDesktopPane8.setBackground(new java.awt.Color(255, 255, 153));
        jDesktopPane8.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jDesktopPane51.setBackground(new java.awt.Color(255, 255, 102));
        jDesktopPane51.setBorder(javax.swing.BorderFactory.createTitledBorder("Does The Performance Match Expectations"));

        ModelPerformanceAcceptable_jCheckBox.setBackground(new java.awt.Color(255, 255, 102));
        ModelPerformanceAcceptable_jCheckBox.setText("Yes");
        ModelPerformanceAcceptable_jCheckBox.setEnabled(false);
        ModelPerformanceAcceptable_jCheckBox.setBounds(10, 20, 70, 20);
        jDesktopPane51.add(ModelPerformanceAcceptable_jCheckBox, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jDesktopPane51.setBounds(290, 10, 280, 50);
        jDesktopPane8.add(jDesktopPane51, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jDesktopPane45.setBackground(new java.awt.Color(255, 255, 102));
        jDesktopPane45.setBorder(javax.swing.BorderFactory.createTitledBorder("Is The Model Underfit"));

        ModelUnderFit_jCheckBox.setBackground(new java.awt.Color(255, 255, 102));
        ModelUnderFit_jCheckBox.setText("Yes");
        ModelUnderFit_jCheckBox.setEnabled(false);
        ModelUnderFit_jCheckBox.setBounds(10, 20, 70, 20);
        jDesktopPane45.add(ModelUnderFit_jCheckBox, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jDesktopPane45.setBounds(290, 190, 280, 50);
        jDesktopPane8.add(jDesktopPane45, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jDesktopPane50.setBackground(new java.awt.Color(255, 255, 102));
        jDesktopPane50.setBorder(javax.swing.BorderFactory.createTitledBorder("Is the Model Overfit"));

        ModelOverFit_jCheckBox.setBackground(new java.awt.Color(255, 255, 102));
        ModelOverFit_jCheckBox.setText("Yes");
        ModelOverFit_jCheckBox.setEnabled(false);
        ModelOverFit_jCheckBox.setBounds(10, 20, 70, 20);
        jDesktopPane50.add(ModelOverFit_jCheckBox, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jDesktopPane50.setBounds(290, 110, 280, 50);
        jDesktopPane8.add(jDesktopPane50, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jScrollPane3.setBorder(javax.swing.BorderFactory.createTitledBorder("Model Performance Evaluation"));

        ModelPerformanceComment_jTextPane.setBackground(new java.awt.Color(255, 255, 153));
        ModelPerformanceComment_jTextPane.setEditable(false);
        ModelPerformanceComment_jTextPane.setEnabled(false);
        jScrollPane12.setViewportView(ModelPerformanceComment_jTextPane);

        jScrollPane3.setViewportView(jScrollPane12);

        jScrollPane3.setBounds(10, 10, 270, 120);
        jDesktopPane8.add(jScrollPane3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jScrollPane5.setBorder(javax.swing.BorderFactory.createTitledBorder("Confusion Matrix Outcome"));

        ConfusionMatrixResult_jTextPane.setBackground(new java.awt.Color(255, 255, 153));
        ConfusionMatrixResult_jTextPane.setEditable(false);
        ConfusionMatrixResult_jTextPane.setEnabled(false);
        jScrollPane13.setViewportView(ConfusionMatrixResult_jTextPane);

        jScrollPane5.setViewportView(jScrollPane13);

        jScrollPane5.setBounds(10, 140, 270, 100);
        jDesktopPane8.add(jScrollPane5, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Procedures_jList.setBorder(javax.swing.BorderFactory.createTitledBorder("Model Validations Tests"));
        Procedures_jList.setModel(this.getEvaluationProcedures());
        Procedures_jList.setEnabled(false);
        Procedures_jList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                Procedures_jListValueChanged(evt);
            }
        });
        Procedures_jList.setBounds(590, 10, 310, 230);
        jDesktopPane8.add(Procedures_jList, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jDesktopPane8.setBounds(10, 10, 920, 290);
        Planning_CustomisedPlan_jDesktopPane.add(jDesktopPane8, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Performing_Details_TabbedPane.addTab("Model Evaluation Results", Planning_CustomisedPlan_jDesktopPane);

        jPanel2.setBackground(new java.awt.Color(255, 255, 153));
        jPanel2.setLayout(null);

        jScrollPane6.setBackground(new java.awt.Color(255, 255, 102));
        jScrollPane6.setBorder(javax.swing.BorderFactory.createTitledBorder("Recommandation"));

        Knowledge_Recommendations_jTextPane.setEnabled(false);
        jScrollPane17.setViewportView(Knowledge_Recommendations_jTextPane);

        jScrollPane6.setViewportView(jScrollPane17);

        jPanel2.add(jScrollPane6);
        jScrollPane6.setBounds(10, 180, 260, 90);

        jScrollPane10.setBackground(new java.awt.Color(255, 255, 102));
        jScrollPane10.setBorder(javax.swing.BorderFactory.createTitledBorder("PropogatedQuestion"));

        Knowledge_PropogatedQuestion_jTextPane.setEnabled(false);
        jScrollPane18.setViewportView(Knowledge_PropogatedQuestion_jTextPane);

        jScrollPane10.setViewportView(jScrollPane18);

        jPanel2.add(jScrollPane10);
        jScrollPane10.setBounds(10, 0, 260, 90);

        jScrollPane19.setBackground(new java.awt.Color(255, 255, 102));
        jScrollPane19.setBorder(javax.swing.BorderFactory.createTitledBorder("Propogated Hypothesis"));

        Knowledge_PropogatedHypothesis_jTextPane.setEnabled(false);
        jScrollPane20.setViewportView(Knowledge_PropogatedHypothesis_jTextPane);

        jScrollPane19.setViewportView(jScrollPane20);

        jPanel2.add(jScrollPane19);
        jScrollPane19.setBounds(10, 90, 260, 90);

        jDesktopPane52.setBackground(new java.awt.Color(255, 255, 153));
        jDesktopPane52.setBorder(javax.swing.BorderFactory.createTitledBorder("Is Knowledge Consistent With Literature"));

        KnowledgeConsistentWithLiterature_jCheckBox.setBackground(new java.awt.Color(255, 255, 153));
        KnowledgeConsistentWithLiterature_jCheckBox.setText("Yes");
        KnowledgeConsistentWithLiterature_jCheckBox.setEnabled(false);
        KnowledgeConsistentWithLiterature_jCheckBox.setBounds(10, 20, 70, 20);
        jDesktopPane52.add(KnowledgeConsistentWithLiterature_jCheckBox, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jPanel2.add(jDesktopPane52);
        jDesktopPane52.setBounds(280, 10, 330, 50);

        jDesktopPane53.setBackground(new java.awt.Color(255, 255, 153));
        jDesktopPane53.setBorder(javax.swing.BorderFactory.createTitledBorder("Knowledge Consistent With Bio-Chemical Priciples"));

        KnowledgeConsistentWithBiology_jCheckBox.setBackground(new java.awt.Color(255, 255, 153));
        KnowledgeConsistentWithBiology_jCheckBox.setText("Yes");
        KnowledgeConsistentWithBiology_jCheckBox.setEnabled(false);
        KnowledgeConsistentWithBiology_jCheckBox.setBounds(10, 20, 70, 20);
        jDesktopPane53.add(KnowledgeConsistentWithBiology_jCheckBox, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jPanel2.add(jDesktopPane53);
        jDesktopPane53.setBounds(280, 60, 330, 50);

        jDesktopPane46.setBackground(new java.awt.Color(255, 255, 153));
        jDesktopPane46.setBorder(javax.swing.BorderFactory.createTitledBorder("Knowledge Fulfilled Study Aims"));

        KnowledgeFulfilledStudyAims_jCheckBox.setBackground(new java.awt.Color(255, 255, 153));
        KnowledgeFulfilledStudyAims_jCheckBox.setText("Yes");
        KnowledgeFulfilledStudyAims_jCheckBox.setEnabled(false);
        KnowledgeFulfilledStudyAims_jCheckBox.setBounds(10, 20, 70, 20);
        jDesktopPane46.add(KnowledgeFulfilledStudyAims_jCheckBox, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jPanel2.add(jDesktopPane46);
        jDesktopPane46.setBounds(280, 110, 330, 50);

        jDesktopPane54.setBackground(new java.awt.Color(255, 255, 153));
        jDesktopPane54.setBorder(javax.swing.BorderFactory.createTitledBorder("Does the Knowledges Fulfils Process Objectives"));

        KnowledgesFulfilledProcessObjectives_jCheckBox.setBackground(new java.awt.Color(255, 255, 153));
        KnowledgesFulfilledProcessObjectives_jCheckBox.setText("Yes");
        KnowledgesFulfilledProcessObjectives_jCheckBox.setEnabled(false);
        KnowledgesFulfilledProcessObjectives_jCheckBox.setBounds(10, 20, 70, 20);
        jDesktopPane54.add(KnowledgesFulfilledProcessObjectives_jCheckBox, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jPanel2.add(jDesktopPane54);
        jDesktopPane54.setBounds(280, 160, 330, 50);

        jDesktopPane47.setBackground(new java.awt.Color(255, 255, 153));
        jDesktopPane47.setBorder(javax.swing.BorderFactory.createTitledBorder("Is the Knowledges Consistent with Domain Expert Background"));

        KnowledgesConsistentWithDomainExpertBackground_jCheckBox.setBackground(new java.awt.Color(255, 255, 153));
        KnowledgesConsistentWithDomainExpertBackground_jCheckBox.setText("Yes");
        KnowledgesConsistentWithDomainExpertBackground_jCheckBox.setEnabled(false);
        KnowledgesConsistentWithDomainExpertBackground_jCheckBox.setBounds(10, 20, 70, 20);
        jDesktopPane47.add(KnowledgesConsistentWithDomainExpertBackground_jCheckBox, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jPanel2.add(jDesktopPane47);
        jDesktopPane47.setBounds(280, 210, 330, 50);

        jScrollPane16.setBackground(new java.awt.Color(255, 255, 102));
        jScrollPane16.setBorder(javax.swing.BorderFactory.createTitledBorder("Evaluation Based on"));

        KnowledgeEvaluation_Used_Sources_jList.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        KnowledgeEvaluation_Used_Sources_jList.setModel(this.getKnowledgeEvaluationUsedSourcesModel());
        KnowledgeEvaluation_Used_Sources_jList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        KnowledgeEvaluation_Used_Sources_jList.setEnabled(false);
        KnowledgeEvaluation_Used_Sources_jList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                KnowledgeEvaluation_Used_Sources_jListValueChanged(evt);
            }
        });
        jScrollPane16.setViewportView(KnowledgeEvaluation_Used_Sources_jList);

        jPanel2.add(jScrollPane16);
        jScrollPane16.setBounds(630, 20, 290, 110);

        jScrollPane7.setBackground(new java.awt.Color(255, 255, 102));
        jScrollPane7.setBorder(javax.swing.BorderFactory.createTitledBorder("Evaluation Requirements"));

        KnowledgeEvaluation_Used_Resources_jList.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        KnowledgeEvaluation_Used_Resources_jList.setModel(this.getKnowledgeEvaluationUsedResourcesModel());
        KnowledgeEvaluation_Used_Resources_jList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        KnowledgeEvaluation_Used_Resources_jList.setEnabled(false);
        KnowledgeEvaluation_Used_Resources_jList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                KnowledgeEvaluation_Used_Resources_jListValueChanged(evt);
            }
        });
        jScrollPane7.setViewportView(KnowledgeEvaluation_Used_Resources_jList);

        jPanel2.add(jScrollPane7);
        jScrollPane7.setBounds(630, 140, 290, 120);

        Performing_Details_TabbedPane.addTab("KnowledgeEvaluation", jPanel2);

        Performed_Plan_jPanel.setBackground(new java.awt.Color(255, 255, 153));
        Performed_Plan_jPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        Performed_Plan_jPanel.setLayout(null);

        Planning_Planner_Name_jLabel14.setText("Prsentation Method");
        Performed_Plan_jPanel.add(Planning_Planner_Name_jLabel14);
        Planning_Planner_Name_jLabel14.setBounds(20, 10, 170, 20);

        Method_jComboBox.setBackground(new java.awt.Color(255, 255, 204));
        Method_jComboBox.setMaximumRowCount(10);
        Method_jComboBox.setModel(new DefaultComboBoxModel(this.methods));
        Method_jComboBox.setEnabled(false);
        Performed_Plan_jPanel.add(Method_jComboBox);
        Method_jComboBox.setBounds(20, 30, 170, 22);

        Technique_jComboBox.setBackground(new java.awt.Color(255, 255, 204));
        Technique_jComboBox.setMaximumRowCount(10);
        Technique_jComboBox.setModel(new DefaultComboBoxModel(this.visulaizationTechniques));
        Technique_jComboBox.setEnabled(false);
        Performed_Plan_jPanel.add(Technique_jComboBox);
        Technique_jComboBox.setBounds(20, 90, 170, 22);

        Planning_Planner_Name_jLabel13.setText("Visulaisatin Technique");
        Performed_Plan_jPanel.add(Planning_Planner_Name_jLabel13);
        Planning_Planner_Name_jLabel13.setBounds(20, 70, 170, 20);

        Planning_Planner_Name_jLabel12.setText("Description");
        Performed_Plan_jPanel.add(Planning_Planner_Name_jLabel12);
        Planning_Planner_Name_jLabel12.setBounds(230, 10, 80, 20);

        Presentation_Browse_jButton.setText("Open");
        Presentation_Browse_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Presentation_Browse_jButtonActionPerformed(evt);
            }
        });
        Performed_Plan_jPanel.add(Presentation_Browse_jButton);
        Presentation_Browse_jButton.setBounds(790, 180, 120, 25);

        Presentation_URL_jTextField.setBackground(new java.awt.Color(255, 255, 204));
        Presentation_URL_jTextField.setEditable(false);
        Performed_Plan_jPanel.add(Presentation_URL_jTextField);
        Presentation_URL_jTextField.setBounds(210, 180, 570, 25);

        Prerequisite_Source_ExternalSource_URL_jLabel4.setText("Presented Knowledge URL");
        Performed_Plan_jPanel.add(Prerequisite_Source_ExternalSource_URL_jLabel4);
        Prerequisite_Source_ExternalSource_URL_jLabel4.setBounds(20, 180, 190, 20);

        Presentation_Description_jTextPane.setEnabled(false);
        jScrollPane21.setViewportView(Presentation_Description_jTextPane);

        Performed_Plan_jPanel.add(jScrollPane21);
        jScrollPane21.setBounds(210, 30, 700, 130);

        FinalSelection_jCheckBox.setBackground(new java.awt.Color(255, 255, 153));
        FinalSelection_jCheckBox.setFont(new java.awt.Font("Tahoma", 1, 11));
        FinalSelection_jCheckBox.setText("Final Selection");
        FinalSelection_jCheckBox.setEnabled(false);
        Performed_Plan_jPanel.add(FinalSelection_jCheckBox);
        FinalSelection_jCheckBox.setBounds(20, 130, 180, 20);

        Next_jButton1.setText("Next >");
        Next_jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Next_jButton1ActionPerformed(evt);
            }
        });
        Performed_Plan_jPanel.add(Next_jButton1);
        Next_jButton1.setBounds(150, 230, 130, 25);

        Previous_jButton1.setText("< Previous");
        Previous_jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Previous_jButton1ActionPerformed(evt);
            }
        });
        Performed_Plan_jPanel.add(Previous_jButton1);
        Previous_jButton1.setBounds(20, 230, 130, 25);

        Performing_Details_TabbedPane.addTab("Presented Knowledge", Performed_Plan_jPanel);

        Performed_Plan_jPanel1.setBackground(new java.awt.Color(255, 255, 153));
        Performed_Plan_jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        Performed_Plan_jPanel1.setLayout(null);

        Planning_Planner_Name_jLabel15.setText("Prsentation Method");
        Performed_Plan_jPanel1.add(Planning_Planner_Name_jLabel15);
        Planning_Planner_Name_jLabel15.setBounds(20, 10, 100, 20);

        DeplymentTarget_jComboBox.setBackground(new java.awt.Color(255, 255, 204));
        DeplymentTarget_jComboBox.setMaximumRowCount(10);
        DeplymentTarget_jComboBox.setModel(new DefaultComboBoxModel(this.targets));
        DeplymentTarget_jComboBox.setEnabled(false);
        Performed_Plan_jPanel1.add(DeplymentTarget_jComboBox);
        DeplymentTarget_jComboBox.setBounds(20, 30, 180, 22);

        Planning_Planner_Name_jLabel16.setText("Description");
        Performed_Plan_jPanel1.add(Planning_Planner_Name_jLabel16);
        Planning_Planner_Name_jLabel16.setBounds(230, 10, 80, 20);

        Presentation_Open_jButton.setText("Open");
        Presentation_Open_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Presentation_Open_jButtonActionPerformed(evt);
            }
        });
        Performed_Plan_jPanel1.add(Presentation_Open_jButton);
        Presentation_Open_jButton.setBounds(810, 200, 100, 25);

        Deployment_URL_jTextField.setBackground(new java.awt.Color(255, 255, 204));
        Deployment_URL_jTextField.setEditable(false);
        Performed_Plan_jPanel1.add(Deployment_URL_jTextField);
        Deployment_URL_jTextField.setBounds(130, 200, 670, 25);

        Prerequisite_Source_ExternalSource_URL_jLabel5.setText("Deployment URL");
        Performed_Plan_jPanel1.add(Prerequisite_Source_ExternalSource_URL_jLabel5);
        Prerequisite_Source_ExternalSource_URL_jLabel5.setBounds(20, 200, 110, 20);

        Deployment_Description_jTextPane.setEnabled(false);
        jScrollPane11.setViewportView(Deployment_Description_jTextPane);

        Performed_Plan_jPanel1.add(jScrollPane11);
        jScrollPane11.setBounds(230, 30, 330, 110);

        IncludeData_jCheckBox.setBackground(new java.awt.Color(255, 255, 153));
        IncludeData_jCheckBox.setFont(new java.awt.Font("Tahoma", 1, 11));
        IncludeData_jCheckBox.setText("Deploy Data");
        IncludeData_jCheckBox.setEnabled(false);
        Performed_Plan_jPanel1.add(IncludeData_jCheckBox);
        IncludeData_jCheckBox.setBounds(570, 160, 180, 20);

        Planning_Planner_Name_jLabel17.setText("Deployment mechanism ");
        Performed_Plan_jPanel1.add(Planning_Planner_Name_jLabel17);
        Planning_Planner_Name_jLabel17.setBounds(570, 10, 180, 20);

        DeploymentMechanism_jTextPane.setEnabled(false);
        jScrollPane15.setViewportView(DeploymentMechanism_jTextPane);

        Performed_Plan_jPanel1.add(jScrollPane15);
        jScrollPane15.setBounds(570, 30, 340, 110);

        FinalResults_jCheckBox.setBackground(new java.awt.Color(255, 255, 153));
        FinalResults_jCheckBox.setFont(new java.awt.Font("Tahoma", 1, 11));
        FinalResults_jCheckBox.setText("Final Results");
        FinalResults_jCheckBox.setEnabled(false);
        Performed_Plan_jPanel1.add(FinalResults_jCheckBox);
        FinalResults_jCheckBox.setBounds(20, 160, 180, 20);

        IncludeAllDeliveries_jCheckBox.setBackground(new java.awt.Color(255, 255, 153));
        IncludeAllDeliveries_jCheckBox.setFont(new java.awt.Font("Tahoma", 1, 11));
        IncludeAllDeliveries_jCheckBox.setText("Deploy All Results");
        IncludeAllDeliveries_jCheckBox.setEnabled(false);
        Performed_Plan_jPanel1.add(IncludeAllDeliveries_jCheckBox);
        IncludeAllDeliveries_jCheckBox.setBounds(230, 160, 180, 20);

        Next_jButton.setText("Next >");
        Next_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Next_jButtonActionPerformed(evt);
            }
        });
        Performed_Plan_jPanel1.add(Next_jButton);
        Next_jButton.setBounds(190, 240, 130, 25);

        Previous_jButton.setText("< Previous");
        Previous_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Previous_jButtonActionPerformed(evt);
            }
        });
        Performed_Plan_jPanel1.add(Previous_jButton);
        Previous_jButton.setBounds(60, 240, 130, 25);

        Performing_Details_TabbedPane.addTab("Deployment", Performed_Plan_jPanel1);

        Performing_Details_TabbedPane.setBounds(10, 310, 950, 340);
        Performing_Details_jDesktopPane_jDesktopPane.add(Performing_Details_TabbedPane, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Control_jDesktopPane.setBackground(new java.awt.Color(255, 255, 153));
        Control_jDesktopPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        Delete_jButton.setText("Delete");
        Delete_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Delete_jButtonActionPerformed(evt);
            }
        });
        Delete_jButton.setBounds(180, 10, 80, 25);
        Control_jDesktopPane.add(Delete_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Save_jButton.setText("Save");
        Save_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Save_jButtonActionPerformed(evt);
            }
        });
        Save_jButton.setBounds(100, 10, 80, 25);
        Control_jDesktopPane.add(Save_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Refresh_jButton.setText("Refresh");
        Refresh_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Refresh_jButtonActionPerformed(evt);
            }
        });
        Refresh_jButton.setBounds(10, 10, 90, 25);
        Control_jDesktopPane.add(Refresh_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Control_jDesktopPane.setBounds(480, 660, 270, 40);
        Performing_Details_jDesktopPane_jDesktopPane.add(Control_jDesktopPane, javax.swing.JLayeredPane.DEFAULT_LAYER);

        New_jDesktopPane.setBackground(new java.awt.Color(255, 255, 153));
        New_jDesktopPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        New_jButton1.setText("New");
        New_jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                New_jButton1ActionPerformed(evt);
            }
        });
        New_jButton1.setBounds(10, 10, 80, 23);
        New_jDesktopPane.add(New_jButton1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Add_jButton1.setText("Add +");
        Add_jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Add_jButton1ActionPerformed(evt);
            }
        });
        Add_jButton1.setBounds(90, 10, 90, 23);
        New_jDesktopPane.add(Add_jButton1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        New_jDesktopPane.setBounds(770, 660, 190, 40);
        Performing_Details_jDesktopPane_jDesktopPane.add(New_jDesktopPane, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Resource_jDesktopPane.setBackground(new java.awt.Color(255, 255, 153));
        Planning_Resource_jDesktopPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        Planning_Resource_jDesktopPane.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Planning_Resource_jDesktopPaneFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                Planning_Resource_jDesktopPaneFocusLost(evt);
            }
        });

        jDesktopPane55.setBackground(new java.awt.Color(255, 255, 153));
        jDesktopPane55.setBorder(javax.swing.BorderFactory.createTitledBorder("Is Quality Issues Considered"));

        QualityIssuesConsidered_jCheckBox.setBackground(new java.awt.Color(255, 255, 153));
        QualityIssuesConsidered_jCheckBox.setText("Yes");
        QualityIssuesConsidered_jCheckBox.setBounds(10, 20, 70, 20);
        jDesktopPane55.add(QualityIssuesConsidered_jCheckBox, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jScrollPane22.setViewportView(QualityComment_jTextPane);

        jScrollPane22.setBounds(10, 40, 240, 60);
        jDesktopPane55.add(jScrollPane22, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jDesktopPane55.setBounds(10, 10, 270, 110);
        Planning_Resource_jDesktopPane.add(jDesktopPane55, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jDesktopPane56.setBackground(new java.awt.Color(255, 255, 153));
        jDesktopPane56.setBorder(javax.swing.BorderFactory.createTitledBorder("is Standards Issues Considered"));

        StandardsIssuesConsidered_jCheckBox.setBackground(new java.awt.Color(255, 255, 153));
        StandardsIssuesConsidered_jCheckBox.setText("Yes");
        StandardsIssuesConsidered_jCheckBox.setBounds(10, 20, 50, 20);
        jDesktopPane56.add(StandardsIssuesConsidered_jCheckBox, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jScrollPane23.setViewportView(StandardsComment_jTextPane);

        jScrollPane23.setBounds(8, 40, 250, 70);
        jDesktopPane56.add(jScrollPane23, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jDesktopPane56.setBounds(10, 130, 270, 120);
        Planning_Resource_jDesktopPane.add(jDesktopPane56, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jDesktopPane48.setBackground(new java.awt.Color(255, 255, 153));
        jDesktopPane48.setBorder(javax.swing.BorderFactory.createTitledBorder("is Carried Within Resources"));

        CarriedWithinResources_jCheckBox.setBackground(new java.awt.Color(255, 255, 153));
        CarriedWithinResources_jCheckBox.setText("Yes");
        CarriedWithinResources_jCheckBox.setBounds(10, 20, 70, 20);
        jDesktopPane48.add(CarriedWithinResources_jCheckBox, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jScrollPane24.setViewportView(ResourcesComment_jTextPane);

        jScrollPane24.setBounds(8, 40, 250, 60);
        jDesktopPane48.add(jScrollPane24, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jDesktopPane48.setBounds(570, 10, 270, 110);
        Planning_Resource_jDesktopPane.add(jDesktopPane48, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jDesktopPane57.setBackground(new java.awt.Color(255, 255, 153));
        jDesktopPane57.setBorder(javax.swing.BorderFactory.createTitledBorder("is Process Model Followed"));

        ProcessModelFollowed_jCheckBox.setBackground(new java.awt.Color(255, 255, 153));
        ProcessModelFollowed_jCheckBox.setText("Yes");
        ProcessModelFollowed_jCheckBox.setBounds(10, 20, 70, 20);
        jDesktopPane57.add(ProcessModelFollowed_jCheckBox, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jScrollPane25.setViewportView(ModelComment_jTextPane);

        jScrollPane25.setBounds(10, 40, 240, 60);
        jDesktopPane57.add(jScrollPane25, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jDesktopPane57.setBounds(290, 10, 270, 110);
        Planning_Resource_jDesktopPane.add(jDesktopPane57, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jDesktopPane58.setBackground(new java.awt.Color(255, 255, 153));
        jDesktopPane58.setBorder(javax.swing.BorderFactory.createTitledBorder("is Human Interaction Considered"));

        HumanInteractionConsidered_jCheckBox.setBackground(new java.awt.Color(255, 255, 153));
        HumanInteractionConsidered_jCheckBox.setText("Yes");
        HumanInteractionConsidered_jCheckBox.setBounds(10, 20, 50, 20);
        jDesktopPane58.add(HumanInteractionConsidered_jCheckBox, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jScrollPane26.setViewportView(HumanComment_jTextPane);

        jScrollPane26.setBounds(8, 40, 250, 70);
        jDesktopPane58.add(jScrollPane26, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jDesktopPane58.setBounds(290, 130, 270, 120);
        Planning_Resource_jDesktopPane.add(jDesktopPane58, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jDesktopPane49.setBackground(new java.awt.Color(255, 255, 153));
        jDesktopPane49.setBorder(javax.swing.BorderFactory.createTitledBorder("is Last Iteration"));

        lastIteration_jCheckBox.setBackground(new java.awt.Color(255, 255, 153));
        lastIteration_jCheckBox.setText("Yes");
        lastIteration_jCheckBox.setBounds(10, 20, 70, 20);
        jDesktopPane49.add(lastIteration_jCheckBox, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jScrollPane27.setViewportView(IterationComment_jTextPane);

        jScrollPane27.setBounds(8, 40, 250, 70);
        jDesktopPane49.add(jScrollPane27, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jDesktopPane49.setBounds(570, 130, 270, 120);
        Planning_Resource_jDesktopPane.add(jDesktopPane49, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jTabbedPane1.addTab("Process Evaluation", Planning_Resource_jDesktopPane);

        Justification_Source_jDesktopPane1.setBackground(new java.awt.Color(255, 255, 153));
        Justification_Source_jDesktopPane1.setBorder(javax.swing.BorderFactory.createTitledBorder("Cross-Delivery Validation"));

        Result_UnSelect_jButton.setText("Delete");
        Result_UnSelect_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Result_UnSelect_jButtonActionPerformed1(evt);
            }
        });
        Result_UnSelect_jButton.setBounds(10, 260, 340, 20);
        Justification_Source_jDesktopPane1.add(Result_UnSelect_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Selected_Results_jList.setBackground(new java.awt.Color(255, 255, 204));
        Selected_Results_jList.setBorder(javax.swing.BorderFactory.createTitledBorder("Cross-Validated Deliveries"));
        Selected_Results_jList.setModel(this.getSelectedResultsModel());
        Selected_Results_jList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        Selected_Results_jList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                Selected_Results_jListValueChanged(evt);
            }
        });
        jScrollPane29.setViewportView(Selected_Results_jList);

        jScrollPane29.setBounds(480, 20, 450, 210);
        Justification_Source_jDesktopPane1.add(jScrollPane29, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Result_Select_jButton.setText("Save Validated Deliveries >>");
        Result_Select_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Result_Select_jButtonActionPerformed(evt);
            }
        });
        Result_Select_jButton.setBounds(260, 170, 210, 25);
        Justification_Source_jDesktopPane1.add(Result_Select_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        CrossValidation_jTextPane.setBorder(null);
        jScrollPane28.setViewportView(CrossValidation_jTextPane);

        jScrollPane28.setBounds(10, 200, 460, 50);
        Justification_Source_jDesktopPane1.add(jScrollPane28, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel1.setText("Cross-delivery Validation Results");
        jLabel1.setBounds(10, 180, 250, 20);
        Justification_Source_jDesktopPane1.add(jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Results_jList.setBorder(javax.swing.BorderFactory.createTitledBorder("Process Deliveries"));
        Results_jList.setModel(this.getProcessResultsModel());
        Results_jList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        Results_jList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                Results_jListValueChanged(evt);
            }
        });
        jScrollPane30.setViewportView(Results_jList);

        jScrollPane30.setBounds(10, 20, 460, 150);
        Justification_Source_jDesktopPane1.add(jScrollPane30, javax.swing.JLayeredPane.DEFAULT_LAYER);

        deleteCrossValidation_jButton.setText("Delete");
        deleteCrossValidation_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteCrossValidation_jButtonActionPerformed(evt);
            }
        });
        deleteCrossValidation_jButton.setBounds(480, 230, 450, 23);
        Justification_Source_jDesktopPane1.add(deleteCrossValidation_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jTabbedPane1.addTab("Cross-Delivery Validation", Justification_Source_jDesktopPane1);

        jTabbedPane1.setBounds(10, 10, 950, 290);
        Performing_Details_jDesktopPane_jDesktopPane.add(jTabbedPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel2.setText("Note: Click Cross-Validated Delivery to show the detailes of validation results");
        jLabel2.setBounds(20, 670, 450, 16);
        Performing_Details_jDesktopPane_jDesktopPane.add(jLabel2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Performing_Details_jDesktopPane_jDesktopPane.setBounds(10, 10, 980, 710);
        Performing_jLayeredPane.add(Performing_Details_jDesktopPane_jDesktopPane, javax.swing.JLayeredPane.DEFAULT_LAYER);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Performing_jLayeredPane, javax.swing.GroupLayout.PREFERRED_SIZE, 1005, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Performing_jLayeredPane, javax.swing.GroupLayout.PREFERRED_SIZE, 737, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Sources_UnSelect_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Sources_UnSelect_jButtonActionPerformed

    }//GEN-LAST:event_Sources_UnSelect_jButtonActionPerformed

//DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
//****************************************************************************
//                              Delete Resource
//DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
//****************************************************************************
 private void delete_knowledgeEvaluation_resource()
{
if (this.knowledgeEvaluation!=null &&
//    this.evaluation.getFeasibility()!=null &&
    this.knowledgeEvaluation.getResources()!=null &&
    this.knowledgeEvaluation.getResources().getResourcesList().size()>0)
    {
        int index= this.knowledgeEvaluation.getResources().getResourcesList()
                                                                            .indexOf(this.resource);
        if (this.knowledgeEvaluation.getResources().delete(this.resource)==0);
        {
            if (this.knowledgeEvaluation.getResources().getResourcesList().size()>0)
            {
                if (index==0)
                    this.resource = this.knowledgeEvaluation.getResources().getResource(index);
                else if(index>0)
                    this.resource = this.knowledgeEvaluation.getResources().getResource(index-1);
            }
        }
        // setResult process objective
 }
}

 //DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
//****************************************************************************
//                              Delete Resource
//DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
//****************************************************************************
 private void delete_procedure_resource()
{
if (this.procedure!=null &&
//    this.procedure.getFeasibility()!=null &&
    this.procedure.getResources()!=null &&
    this.procedure.getResources().getResourcesList().size()>0)
    {
        int index= this.procedure.getResources().getResourcesList()
                                                                            .indexOf(this.resource);
        if (this.procedure.getResources().delete(this.resource)==0);
        {
            if (this.procedure.getResources().getResourcesList().size()>0)
            {
                if (index==0)
                    this.resource = this.procedure.getResources().getResource(index);
                else if(index>0)
                    this.resource = this.procedure.getResources().getResource(index-1);
            }
        }
        // setResult process objective
 }
}

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
this.refresh_evaluation_details();
    }//GEN-LAST:event_formWindowActivated

    private void formWindowDeactivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowDeactivated
//this.save_model();
    }//GEN-LAST:event_formWindowDeactivated

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
    System.gc();
//    System.runFinalization();

    }//GEN-LAST:event_formWindowClosed

    private void Analysts_jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_Analysts_jList1ValueChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_Analysts_jList1ValueChanged

    private void Analysts_jList2ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_Analysts_jList2ValueChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_Analysts_jList2ValueChanged

    private void Model_Selected_MeasuredOutcomes_jListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_Model_Selected_MeasuredOutcomes_jListValueChanged

    if (   this.model!=null
 //       && this.model.getSuccessCriteria()!=null
        && this.model.getPerformance()!=null
        && this.model.getPerformance().getOutcomesList().size()>0  &&
        Model_Selected_MeasuredOutcomes_jList.getSelectedIndex()>=0
        )

         this.outcome=  this.model.getPerformance().getOutcomesList().
                                get(Model_Selected_MeasuredOutcomes_jList.getSelectedIndex());

    }//GEN-LAST:event_Model_Selected_MeasuredOutcomes_jListValueChanged

    private void Planning_Resource_jDesktopPaneFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Planning_Resource_jDesktopPaneFocusGained
    //------------------------------------------------------------------------
  /*
    if (this.model!=null && this.model.getFeasibility()!=null)
         {
            this.Duration_jTextField.setText(this.model.getFeasibility().getRequiredTime()+"");
            this.Feasible_jCheckBox.setSelected(this.model.getFeasibility().isFeasible());
         }
*/

    }//GEN-LAST:event_Planning_Resource_jDesktopPaneFocusGained

    private void Planning_Resource_jDesktopPaneFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Planning_Resource_jDesktopPaneFocusLost
/*
   if (this.model!=null && this.model.getFeasibility()!=null
       && !this.Duration_jTextField.getText().equals(""))
    {
       this.model.getFeasibility().setRequiredTime(Double.parseDouble(this.Duration_jTextField.getText()));
       this.model.getFeasibility().setFeasible(this.Feasible_jCheckBox.isSelected());
     }
 *
 */
    }//GEN-LAST:event_Planning_Resource_jDesktopPaneFocusLost

    private void New_jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_New_jButton1ActionPerformed
        this.clear_processEvaluation();
}//GEN-LAST:event_New_jButton1ActionPerformed

    private void Refresh_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Refresh_jButtonActionPerformed
        this.refresh();
        this.populate_processEvaluation();
    }//GEN-LAST:event_Refresh_jButtonActionPerformed

    private void Save_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Save_jButtonActionPerformed
        this.save_processEvaluation();
}//GEN-LAST:event_Save_jButtonActionPerformed

    private void Delete_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Delete_jButtonActionPerformed

if (this.processEvaluation!=null)
{    
    this.processEvaluation.UnDeliver();
    //this.delete_evaluation();
    this.clear_processEvaluation();
    this.populate_processEvaluation();
    this.populateForm();
}
}//GEN-LAST:event_Delete_jButtonActionPerformed

    private void Add_jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Add_jButton1ActionPerformed
        this.save_processEvaluation();
        this.clear_processEvaluation();
}//GEN-LAST:event_Add_jButton1ActionPerformed

    private void Model_Selected_Standards_jListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_Model_Selected_Standards_jListValueChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_Model_Selected_Standards_jListValueChanged

    private void Model_Used_Resources_jListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_Model_Used_Resources_jListValueChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_Model_Used_Resources_jListValueChanged

    private void Browse_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Browse_jButtonActionPerformed

if (!this.Model_URL_jTextField.getText().equals(""))
   {
       String fileName=Model_URL_jTextField.getText().substring(6, this.Model_URL_jTextField.getText().length());
//       System.out.println(fileName);
       Tools.viewAnyFile(new File(fileName));
   }

    }//GEN-LAST:event_Browse_jButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
new StudyForm().setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void Expected_Resources_jListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_Expected_Resources_jListValueChanged

    }//GEN-LAST:event_Expected_Resources_jListValueChanged

    private void Expected_MeasurmentOutcomes_jListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_Expected_MeasurmentOutcomes_jListValueChanged

        if (   this.techniqueSelection!=null
                && this.techniqueSelection.getSuccessCriteria()!=null
                && this.techniqueSelection.getSuccessCriteria().getExpectedOutcomes()!=null
                && this.techniqueSelection.getSuccessCriteria().getExpectedOutcomes().getOutcomesList().size()>0  &&
                Expected_MeasurmentOutcomes_jList.getSelectedIndex()>=0
                )

            this.outcome=  this.techniqueSelection.getSuccessCriteria().
                    getExpectedOutcomes().getOutcomesList().
                    get(Expected_MeasurmentOutcomes_jList.getSelectedIndex());
    }//GEN-LAST:event_Expected_MeasurmentOutcomes_jListValueChanged

    private void Selected_ExpectedMeasurmentOutcomes_jListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_Selected_ExpectedMeasurmentOutcomes_jListValueChanged

        if (   this.processObjective!=null
                && this.processObjective.getSuccessCriteria()!=null
                && this.processObjective.getSuccessCriteria().getExpectedOutcomes()!=null
                && this.processObjective.getSuccessCriteria().getExpectedOutcomes().getOutcomesList().size()>0  &&
                Selected_ExpectedMeasurmentOutcomes_jList.getSelectedIndex()>=0
                )

            this.expectedOutcome=  this.processObjective.getSuccessCriteria().
                    getExpectedOutcomes().getOutcomesList().
                    get(Selected_ExpectedMeasurmentOutcomes_jList.getSelectedIndex());
    }//GEN-LAST:event_Selected_ExpectedMeasurmentOutcomes_jListValueChanged

    private void KnowledgeEvaluation_Used_Sources_jListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_KnowledgeEvaluation_Used_Sources_jListValueChanged

        if (this.processObjective!=null && this.processObjective.getTraceability()!=null)
            if (this.KnowledgeEvaluation_Used_Sources_jList.getSelectedIndex()>=0)

                this.source= (Source) this.processObjective.getTraceability().getSourcesList().get(this.KnowledgeEvaluation_Used_Sources_jList.getSelectedIndex());
    }//GEN-LAST:event_KnowledgeEvaluation_Used_Sources_jListValueChanged

    private void Presentation_Browse_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Presentation_Browse_jButtonActionPerformed

if (!this.Presentation_URL_jTextField.getText().equals(""))
   {
       String fileName=Presentation_URL_jTextField.getText().substring(6, this.Presentation_URL_jTextField.getText().length());
//       System.out.println(fileName);
       Tools.viewAnyFile(new File(fileName));
   }

}//GEN-LAST:event_Presentation_Browse_jButtonActionPerformed

    private void Next_jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Next_jButton1ActionPerformed
        this.next_presentation();
}//GEN-LAST:event_Next_jButton1ActionPerformed

    private void Previous_jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Previous_jButton1ActionPerformed
        this.previous_presentation();
}//GEN-LAST:event_Previous_jButton1ActionPerformed

    private void Procedures_jListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_Procedures_jListValueChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_Procedures_jListValueChanged

    private void KnowledgeEvaluation_Used_Resources_jListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_KnowledgeEvaluation_Used_Resources_jListValueChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_KnowledgeEvaluation_Used_Resources_jListValueChanged

    private void Results_jListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_Results_jListValueChanged
        if (Global.project !=null &&
                Global.project.getProcess()!=null &&
                Global.project.getProcess().getResults()!=null&&
                Global.project.getProcess().getResults().getResultsList().size()>0)

            if (this.Results_jList.getSelectedIndex()>=0)
                this.result=(Result) Global.project.getProcess().getResults().
                                     getResultsList().get(this.Results_jList.getSelectedIndex());
            this.CrossValidation_jTextPane.setText("");
    }//GEN-LAST:event_Results_jListValueChanged

    private void Selected_Results_jListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_Selected_Results_jListValueChanged

if (this.processEvaluation!=null && this.processEvaluation.getResults()!=null)
       if (this.Selected_Results_jList.getSelectedIndex()>=0)
            {
               this.result= (Result) this.processEvaluation.getResults().getResultsList().
                                get( this.Selected_Results_jList.getSelectedIndex());
                
                if (this.result!=null && this.result.getDeliveryCrossValidationResult()!=null)
                    this.CrossValidation_jTextPane.setText(this.result.getDeliveryCrossValidationResult().toString());
                else
                    this.CrossValidation_jTextPane.setText("");
            }
            else
                this.CrossValidation_jTextPane.setText("");

this.populateForm();
}//GEN-LAST:event_Selected_Results_jListValueChanged

    private void Result_Select_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Result_Select_jButtonActionPerformed

//    this.save_processEvaluation();

    if (this.processEvaluation!=null && this.result!=null)
      {
         if (this.processEvaluation.getResults()==null)
             this.processEvaluation.setResults(new Results());

         
         this.result.setDeliveryCrossValidationResult(this.CrossValidation_jTextPane.getText());
         
         this.processEvaluation.getResults().setResult(this.result);
         this.save_processEvaluation();
      }

      this.Selected_Results_jList.setModel(this.getSelectedResultsModel());
      this.populate_processEvaluation();
      this.CrossValidation_jTextPane.setText("");
      this.populateForm();
    }//GEN-LAST:event_Result_Select_jButtonActionPerformed

    private void Result_UnSelect_jButtonActionPerformed1(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Result_UnSelect_jButtonActionPerformed1
        if (this.processEvaluation!=null )
            this.delete_result();
        this.Selected_Results_jList.setModel(this.getSelectedResultsModel());

        this.populateForm();
}//GEN-LAST:event_Result_UnSelect_jButtonActionPerformed1

    private void Presentation_Open_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Presentation_Open_jButtonActionPerformed

if (!this.Deployment_URL_jTextField.getText().equals(""))
   {
       String fileName=Deployment_URL_jTextField.getText().substring(6, this.Deployment_URL_jTextField.getText().length());
//       System.out.println(fileName);
       Tools.viewAnyFile(new File(fileName));
   }

}//GEN-LAST:event_Presentation_Open_jButtonActionPerformed

    private void Next_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Next_jButtonActionPerformed
        this.next_deployment();
}//GEN-LAST:event_Next_jButtonActionPerformed

    private void Previous_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Previous_jButtonActionPerformed
        this.previous_deployment();
}//GEN-LAST:event_Previous_jButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
//if (this.processEvaluation!=null)
    this.save_processEvaluation();
    }//GEN-LAST:event_formWindowClosing

    private void deleteCrossValidation_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteCrossValidation_jButtonActionPerformed
    
        delete_result();
        this.save_processEvaluation();
        this.Selected_Results_jList.setModel(this.getSelectedResultsModel());
    }//GEN-LAST:event_deleteCrossValidation_jButtonActionPerformed


//-----------------------------------------------------------------------------
//*****************************************************************************
//                     Resources Funds Calculations
//*****************************************************************************
//-----------------------------------------------------------------------------
private void addResourceFunds()
{
if (Global.project!=null &&
                Global.project.getSupplements()!=null &&
                Global.project.getSupplements().getManagement()!=null &&
                Global.project.getSupplements().getManagement().getConstraint()!=null)
                {
                      Double curruntUsedFunds=Global.project.getSupplements().getManagement().getConstraint().getUsedFunds();
                      Double totalFunds=Global.project.getSupplements().getManagement().getConstraint().getTotalFunds();

                      Double resourceCost=0.0;

                      if (this.resource!=null)
                              resourceCost= this.resource.getCost();

                      Double newUsedFunds=curruntUsedFunds+resourceCost;

                      if (newUsedFunds>totalFunds)
                          JOptionPane.showMessageDialog(null, "Exceeded the project Total Funds,"
                                                           +" Used Funds = "+newUsedFunds
                                                           +" Project Planned Total Funds = "+totalFunds);

                     Global.project.getSupplements().getManagement().getConstraint().setUsedFunds(newUsedFunds);

                }
}

//*****************************************************************************
private void deductResourceFunds()
{
 //------------------------------------------------------------------
            if (Global.project!=null &&
                Global.project.getSupplements()!=null &&
                Global.project.getSupplements().getManagement()!=null &&
                Global.project.getSupplements().getManagement().getConstraint()!=null)
                {
                      Double curruntUsedFunds=Global.project.getSupplements().getManagement().getConstraint().getUsedFunds();
                      Double totalFunds=Global.project.getSupplements().getManagement().getConstraint().getTotalFunds();

                      Double resourceCost=0.0;

                      if (this.resource!=null)
                              resourceCost= this.resource.getCost();

                      Double newUsedFunds=curruntUsedFunds-resourceCost;

                      if (newUsedFunds>totalFunds)
                          JOptionPane.showMessageDialog(null, "Exceeded the project Total Funds,"
                                                           +" Used Funds = "+newUsedFunds
                                                           +" Project Planned Total Funds = "+totalFunds);

                     Global.project.getSupplements().getManagement().getConstraint().setUsedFunds(newUsedFunds);

                }
}

//NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
//****************************************************************************
//                                Next Plan
//****************************************************************************
//NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
 private void next_deployment()
    {

            if (this.deployment!=null)
            {
            if (Global.currentPhase.getResult()!=null &&
                Global.currentPhase.getResult().getSupplementDeliveries()!=null &&
                Global.currentPhase.getResult().getSupplementDeliveries().getNext(deployment)!=null
                )
                {
                    this.deployment=(Deployment) Global.currentPhase.getResult().getSupplementDeliveries().getNext(this.deployment);
                    //this.clear_deployment_details();
                    //this.refresh_deployment_details();
                    //
                    this.populate_deployment();
                }
            }
        //else
            ////System.out.print("No Phase Performing is found ");
    }

//PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
//****************************************************************************
//                     Previous Plan& Resource
//****************************************************************************
//PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
  private void previous_deployment()
    {

            if (this.deployment!=null)
            {
            if (Global.currentPhase.getResult()!=null &&
                Global.currentPhase.getResult().getSupplementDeliveries()!=null &&
                Global.currentPhase.getResult().getSupplementDeliveries().getPrevious(this.deployment)!=null)
                {
                    this.deployment=(Deployment) Global.currentPhase.getResult().getSupplementDeliveries().getPrevious(this.deployment);
                    this.clear_deployment_details();
                    this.refresh_deployment_details();
                    //
                    this.populate_deployment();
                }
            }
    }


   //RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR
 //                         Refresh Plan Details
 //RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR

 private void refresh_deployment_details()
 {
this.Results_jList.setModel(this.getProcessResultsModel());
this.Selected_Results_jList.setModel(this.getSelectedResultsModel());
 this.populateForm();
 }


//CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
//****************************************************************************
//                     Clear Resource Plan & Resource
//****************************************************************************
 //CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

 private void clear_deployment()
{
this.deployment=null;
clear_deployment_details();
clear_deploymentForm();
 }

 private void clear_deployment_details()
{
this.resource=null;
this.result=null;
this.Results_jList.setModel(this.getProcessResultsModel());
this.Selected_Results_jList.setModel(this.getSelectedResultsModel());
clear_deploymentForm();
 }

 private void clear_deploymentForm()
 {
     this.DeplymentTarget_jComboBox.setSelectedIndex(-1);
    //---------------------------------------------------------------------------
     this.Deployment_URL_jTextField.setText("");
     this.Deployment_Description_jTextPane.setText("");
     this.DeploymentMechanism_jTextPane.setText("");
    //---------------------------------------------------------------------------
      this.FinalResults_jCheckBox.setSelected(false);
      this.IncludeAllDeliveries_jCheckBox.setSelected(false);
      this.IncludeData_jCheckBox.setSelected(false);
    this.populateForm();
 }



private void delete_result()
{
    if (this.processEvaluation!=null &&this.processEvaluation.getResults()!=null
            && this.processEvaluation.getResults().getResultsList().size()>0)
    {
        int index= this.processEvaluation.getResults().getResultsList().indexOf(this.result);
        this.processEvaluation.getResults().deleteResult(this.result);
        if (this.processEvaluation.getResults().getResultsList().size()>0)
        {
            if (index==0)
                this.result = (Result) this.processEvaluation.getResults().getResultsList().get(index);
            else if (index>0)
                 this.result = (Result) this.processEvaluation.getResults().getResultsList().get(index-1);
        }
    }
}



//SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
//****************************************************************************
//                              Save Plan
//****************************************************************************
//SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS

 private void save_processEvaluation()
 {
            if (this.processEvaluation==null)
                this.processEvaluation=new ProcessEvaluation();

           //---------------------------------------------------------------------------------------------------------------------           
            this.processEvaluation.setCarriedWithinResources(this.CarriedWithinResources_jCheckBox.isSelected());
            this.processEvaluation.setHumanInteractionConsidered(this.HumanInteractionConsidered_jCheckBox.isSelected());
            this.processEvaluation.setQualityIssuesConsidered(this.QualityIssuesConsidered_jCheckBox.isSelected());
            this.processEvaluation.setStandardsIssuesConsidered(this.StandardsIssuesConsidered_jCheckBox.isSelected());
            this.processEvaluation.setLastIteration(this.lastIteration_jCheckBox.isSelected());
            this.processEvaluation.setProcessModelFollowed(this.ProcessModelFollowed_jCheckBox.isSelected());
           

          if (this.HumanComment_jTextPane.getText() != null && !this.HumanComment_jTextPane.getText().equals("")) {
                this.processEvaluation.setHumanComment(this.HumanComment_jTextPane.getText());
            }

          if (this.IterationComment_jTextPane.getText() != null && !this.IterationComment_jTextPane.getText().equals("")) {
                this.processEvaluation.setIterationComment(this.IterationComment_jTextPane.getText());
            }

          if (this.ModelComment_jTextPane.getText() != null && !this.ModelComment_jTextPane.getText().equals("")) {
                this.processEvaluation.setModelComment(this.ModelComment_jTextPane.getText());
            }

          if (this.StandardsComment_jTextPane.getText() != null && !this.StandardsComment_jTextPane.getText().equals("")) {
                this.processEvaluation.setStandardsComment(this.StandardsComment_jTextPane.getText());
            }

          if (this.QualityComment_jTextPane.getText() != null && !this.QualityComment_jTextPane.getText().equals("")) {
                this.processEvaluation.setQualityComment(this.QualityComment_jTextPane.getText());
            }

          if (this.ResourcesComment_jTextPane.getText() != null && !this.ResourcesComment_jTextPane.getText().equals("")) {
                this.processEvaluation.setResourcesComment(this.ResourcesComment_jTextPane.getText());
            }
          this.Selected_Results_jList.setModel(this.getSelectedResultsModel());

        this.processEvaluation.deliverAsMain();
 }
//PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
//                         Populate Plan Form
//PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP


 private void populate_processEvaluation()
{
if (this.processEvaluation!=null)
{
    if (this.processEvaluation.isHumanInteractionConsidered())
        this.HumanInteractionConsidered_jCheckBox.setSelected(this.processEvaluation.isHumanInteractionConsidered());
    else
        this.HumanInteractionConsidered_jCheckBox.setSelected(false);

    if (this.processEvaluation.isStandardsIssuesConsidered())
        this.StandardsIssuesConsidered_jCheckBox.setSelected(this.processEvaluation.isStandardsIssuesConsidered());
    else
       this.StandardsIssuesConsidered_jCheckBox.setSelected(false);

    if (this.processEvaluation.isQualityIssuesConsidered())
        this.QualityIssuesConsidered_jCheckBox.setSelected(this.processEvaluation.isQualityIssuesConsidered());
    else
        this.QualityIssuesConsidered_jCheckBox.setSelected(false);

    if (this.processEvaluation.isCarriedWithinResources())
        this.CarriedWithinResources_jCheckBox.setSelected(this.processEvaluation.isCarriedWithinResources());
    else
        this.CarriedWithinResources_jCheckBox.setSelected(false);

    if (this.processEvaluation.isProcessModelFollowed())
        this.ProcessModelFollowed_jCheckBox.setSelected(this.processEvaluation.isProcessModelFollowed());
    else
        this.ProcessModelFollowed_jCheckBox.setSelected(false);

    if (this.processEvaluation.isLastIteration())
        this.lastIteration_jCheckBox.setSelected(this.processEvaluation.isLastIteration());
    else
        this.lastIteration_jCheckBox.setSelected(false);
    
    //------------------------------------------------------------------------

    if (this.processEvaluation.getStandardsComment()!=null)
        this.StandardsComment_jTextPane .setText(this.processEvaluation.getStandardsComment() ) ;
    else
         this.StandardsComment_jTextPane.setText("") ;

    if (this.processEvaluation.getQualityComment()!=null)
         this.QualityComment_jTextPane .setText(this.processEvaluation.getQualityComment() ) ;
    else
         this.QualityComment_jTextPane.setText("") ;

    if (this.processEvaluation.getHumanComment()!=null)
         this.HumanComment_jTextPane.setText(this.processEvaluation.getHumanComment() ) ;
    else
         this.HumanComment_jTextPane.setText("") ;

    if (this.processEvaluation.getResourcesComment()!=null)
         this.ResourcesComment_jTextPane .setText(this.processEvaluation.getResourcesComment() ) ;
    else
         this.ResourcesComment_jTextPane.setText("") ;
    
    if (this.processEvaluation.getModelComment()!=null)
         this.ModelComment_jTextPane.setText(this.processEvaluation.getModelComment() ) ;
    else
         this.ModelComment_jTextPane.setText("") ;
    
if (this.processEvaluation.getIterationComment()!=null)
         this.IterationComment_jTextPane .setText(this.processEvaluation.getIterationComment() ) ;
    else
         this.IterationComment_jTextPane.setText("") ;

this.Selected_Results_jList.setModel(this.getSelectedResultsModel());
}
//******************************************************************************
if (this.knowledgeEvaluation!=null)
{
    this.KnowledgeConsistentWithBiology_jCheckBox.setSelected(this.knowledgeEvaluation.isKnowledgeConsistentWithBiology());

    this.KnowledgeConsistentWithLiterature_jCheckBox.setSelected(this.knowledgeEvaluation.isKnowledgeConsistentWithLiterature());

    this.KnowledgesConsistentWithDomainExpertBackground_jCheckBox.setSelected(this.knowledgeEvaluation.isKnowledgesConsistentWithDomainExpertBackground());

    this.KnowledgesFulfilledProcessObjectives_jCheckBox.setSelected(this.knowledgeEvaluation.isKnowledgesFulfilledProcessObjectives());

    this.KnowledgeFulfilledStudyAims_jCheckBox.setSelected(this.knowledgeEvaluation.isKnowledgeFulfilledStudyAims());

    if (this.knowledgeEvaluation.getPropogatedQuestion()!=null)
         this.Knowledge_PropogatedQuestion_jTextPane.setText(this.knowledgeEvaluation.getPropogatedQuestion()) ;
    else
         this.Knowledge_PropogatedQuestion_jTextPane.setText("") ;

     if (this.knowledgeEvaluation.getPropogatedHypothesis()!=null)
         this.Knowledge_PropogatedHypothesis_jTextPane.setText(this.knowledgeEvaluation.getPropogatedHypothesis()) ;
    else
         this.Knowledge_PropogatedHypothesis_jTextPane.setText("") ;

     if (this.knowledgeEvaluation.getRecommendations()!=null)
         this.Knowledge_Recommendations_jTextPane.setText(this.knowledgeEvaluation.getRecommendations()) ;
    else
         this.Knowledge_Recommendations_jTextPane.setText("") ;
 }

//-----------------------------------------------------------------------------
if (this.model!=null)
     {
         if (this.model.getTechnique()!=null)
            this.Technique_jTextPane.setText(this.model.getTechnique());
         else
           this.Technique_jTextPane.setText("");

         if (this.model.getOutcomeURL()!=null)
            this.Model_URL_jTextField.setText(this.model.getOutcomeURL().toString());
         else
           this.Model_URL_jTextField.setText("");
         
        if (this.model.getAlgorithm()!=null)
            this.Algorithm_jTextPane.setText(this.model.getAlgorithm());
         else
           this.Algorithm_jTextPane.setText("");

         //--------------------------------------------------------------------
         if (this.model!=null&& this.model.getDataMiningApproach()!=null)
             this.Approaches_jComboBox.setSelectedIndex(this.model.getDataMiningApproach().ordinal()+1);
         else
             this.Approaches_jComboBox.setSelectedIndex(0);

         if (this.model!=null&& this.model.getDataMiningGoal()!=null)
             this.Goals_jComboBox.setSelectedIndex(this.model.getDataMiningGoal().ordinal()+1);
         else
             this.Goals_jComboBox.setSelectedIndex(0);

         if (this.model!=null&& this.model.getDataMiningTask()!=null)
             this.Tasks_jComboBox.setSelectedIndex(this.model.getDataMiningTask().ordinal()+1);
         else
             this.Tasks_jComboBox.setSelectedIndex(0);


        this.Supervised_jCheckBox.setSelected(this.model.isSupervised());
        
         //--------------------------------------------------------------------
        
        if ( this.model.getPerformance()!=null
          && this.model.getPerformance().getResultSummary()!=null)
            this.ResultSummary_jTextPane.setText(this.model.getPerformance().getResultSummary());
        else
            this.ResultSummary_jTextPane.setText("");
                        
     }
// else
//System.out.print(" No Planned Activity found to populate");

    if (this.modelEvaluation!=null)
        this.ModelOverFit_jCheckBox.setSelected(this.modelEvaluation.isModelOverFit());
    else
        this.ModelOverFit_jCheckBox.setSelected(false);

    if (this.modelEvaluation!=null)
        this.ModelUnderFit_jCheckBox.setSelected(this.modelEvaluation.isModelUnderFit());
    else
        this.ModelUnderFit_jCheckBox.setSelected(false);

    if (this.modelEvaluation!=null)
        this.ModelPerformanceAcceptable_jCheckBox.setSelected(this.modelEvaluation.isModelPerformanceAcceptable());
    else
        this.ModelPerformanceAcceptable_jCheckBox.setSelected(false);


this.populate_presentation();
this.populate_deployment();
this.refresh_evaluation_details();
this.populateForm();
}




  private void populate_deployment()
{
    if ( this.deployment !=null && this.deployment.getDeploymentTarget()!=null)
        this.DeplymentTarget_jComboBox.setSelectedIndex(this.deployment.getDeploymentTarget().ordinal()+1);
    else
        this.DeplymentTarget_jComboBox.setSelectedIndex(0);
    //---------------------------------------------------------------------------
    if ( this.deployment !=null && this.deployment.getOutcomeURL()!=null)
        this.Deployment_URL_jTextField.setText(this.deployment.getOutcomeURL().toString());
    else
        this.Deployment_URL_jTextField.setText("");

    if ( this.deployment !=null && this.deployment.getDescription()!=null)
         this.Deployment_Description_jTextPane.setText(this.deployment.getDescription().toString());
    else
        this.Deployment_Description_jTextPane.setText("");

    if ( this.deployment !=null && this.deployment.getDeploymentMechanism()!=null)
         this.DeploymentMechanism_jTextPane.setText(this.deployment.getDeploymentMechanism().toString());
    else
        this.DeploymentMechanism_jTextPane.setText("");
    //---------------------------------------------------------------------------
    if (this.deployment!=null)
        this.FinalResults_jCheckBox.setSelected(this.deployment.isFinalResults());
    else
        this.FinalResults_jCheckBox.setSelected(false);

    if (this.deployment!=null)
        this.IncludeAllDeliveries_jCheckBox.setSelected(this.deployment.isIncludeAllDeliveries());
    else
        this.IncludeAllDeliveries_jCheckBox.setSelected(false);

    if (this.deployment!=null)
        this.IncludeData_jCheckBox.setSelected(this.deployment.isIncludeData());
    else
       this.IncludeData_jCheckBox.setSelected(false);

    this.populateForm();

}


 //RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR
//****************************************************************************
//                              Refresh
//****************************************************************************
//RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR

 private void refresh()
 {

//*****************************************************************************
Result<ProcessEvaluation> processEvaluationResult=new Result<ProcessEvaluation>();

//*****************************************************************************
if (Global.currentPhase!=null && Global.currentPhase.getResult()!=null)
{
    
    processEvaluationResult=Global.currentPhase.getResult();
    if (processEvaluationResult!=null && processEvaluationResult.getMainDelivery()!=null)
        try
        {
            this.processEvaluation= (ProcessEvaluation) processEvaluationResult.getMainDelivery();            
        }
        catch (Exception e)
        {
            this.processEvaluation=new ProcessEvaluation();
        }
}
else
 this.processEvaluation=new ProcessEvaluation();

 //*****************************************************************************
 if (  Global.project.getProcess()!=null &&
    Global.project.getProcess().getResults()!=null &&    
    Global.project.getProcess().getResults().getResult(1)!=null)
{     
       if (Global.project.getProcess().getResults().getResult(1).getMainDelivery()!=null)
                processObjective = (DataMiningObjective) Global.project.getProcess().getResults().getResult(1).getMainDelivery();
          else  if (Global.project.getProcess().getResults().getResult(1).getSupplementDeliveries()!=null
                 && Global.project.getProcess().getResults().getResult(1).getSupplementDeliveries().getFirst()!=null)
                processObjective= (DataMiningObjective) Global.project.getProcess().getResults().getResult(1).getSupplementDeliveries().getFirst();
       if (processObjective!=null)
           this.Objectives_jTextArea.setText(processObjective.toMyString());
}
//else
//System.out.print("No Objective was Found.. ");

//*****************************************************************************
       if (    Global.project.getProcess()!=null &&
                Global.project.getProcess().getResults()!=null &&
                Global.project.getProcess().getResults().getResult(4)!=null)
            {
          if (Global.project.getProcess().getResults().getResult(4).getMainDelivery()!=null)
                this.techniqueSelection= (ModelingTechniqueSelection) Global.project.getProcess().getResults().getResult(4).getMainDelivery();
          else  if (Global.project.getProcess().getResults().getResult(4).getSupplementDeliveries()!=null
                 && Global.project.getProcess().getResults().getResult(4).getSupplementDeliveries().getFirst()!=null)
                this.techniqueSelection= (ModelingTechniqueSelection) Global.project.getProcess().getResults().getResult(4).getSupplementDeliveries().getFirst();
            }
        //else
            //System.out.print("No Selected Techniaue found ");


//*****************************************************************************
 if (  Global.project.getProcess()!=null &&
       Global.project.getProcess().getResults()!=null &&
       Global.project.getProcess().getResults().getResult(6)!=null)
{
    if (Global.project.getProcess().getResults().getResult(6).getMainDelivery()!=null)
          this.model=(Model) Global.project.getProcess().getResults().getResult(6).getMainDelivery();
    else  if (Global.project.getProcess().getResults().getResult(6).getSupplementDeliveries()!=null
          && Global.project.getProcess().getResults().getResult(6).getSupplementDeliveries().getFirst()!=null)
          this.model=(Model) Global.project.getProcess().getResults().getResult(6).getSupplementDeliveries().getFirst();
}
//else
//System.out.print("No Objective was Found.. ");

//*****************************************************************************
       if (    Global.project.getProcess()!=null &&
                Global.project.getProcess().getResults()!=null &&
                Global.project.getProcess().getResults().getResult(7)!=null)
            {
          if (Global.project.getProcess().getResults().getResult(7).getMainDelivery()!=null)
                this.modelEvaluation= (ModelEvaluation) Global.project.getProcess().getResults().getResult(7).getMainDelivery();
          else  if (Global.project.getProcess().getResults().getResult(7).getSupplementDeliveries()!=null
                 && Global.project.getProcess().getResults().getResult(7).getSupplementDeliveries().getFirst()!=null)
                this.modelEvaluation= (ModelEvaluation) Global.project.getProcess().getResults().getResult(7).getSupplementDeliveries().getFirst();
            }
        //else
            //System.out.print("No Selected Model Evaluation found ");

 //*****************************************************************************
       if (    Global.project.getProcess()!=null &&
                Global.project.getProcess().getResults()!=null &&
                Global.project.getProcess().getResults().getResult(8)!=null)
            {
          if (Global.project.getProcess().getResults().getResult(8).getMainDelivery()!=null)
                this.presentation= (PresentedKnowledge) Global.project.getProcess().getResults().getResult(8).getMainDelivery();
          else  if (Global.project.getProcess().getResults().getResult(8).getSupplementDeliveries()!=null
                 && Global.project.getProcess().getResults().getResult(8).getSupplementDeliveries().getFirst()!=null)
                this.presentation= (PresentedKnowledge) Global.project.getProcess().getResults().getResult(8).getSupplementDeliveries().getFirst();
            }
        //else
            //System.out.print("No Selected Presentation found ");

 //*****************************************************************************
       if (    Global.project.getProcess()!=null &&
                Global.project.getProcess().getResults()!=null &&
                Global.project.getProcess().getResults().getResult(9)!=null)
            {
          if (Global.project.getProcess().getResults().getResult(9).getMainDelivery()!=null)
                this.knowledgeEvaluation=  (KnowledgeEvaluation) Global.project.getProcess().getResults().getResult(9).getMainDelivery();
          else  if (Global.project.getProcess().getResults().getResult(9).getSupplementDeliveries()!=null
                 && Global.project.getProcess().getResults().getResult(9).getSupplementDeliveries().getFirst()!=null)
                this.knowledgeEvaluation= (KnowledgeEvaluation) Global.project.getProcess().getResults().getResult(9).getSupplementDeliveries().getFirst();
            }
        //else
            //System.out.print("No Selected Presentation found ");

 //*****************************************************************************
       if (    Global.project.getProcess()!=null &&
                Global.project.getProcess().getResults()!=null &&
                Global.project.getProcess().getResults().getResult(10)!=null)
            {
          if (Global.project.getProcess().getResults().getResult(10).getMainDelivery()!=null)
                this.deployment= (Deployment) Global.project.getProcess().getResults().getResult(10).getMainDelivery();
          else  if (Global.project.getProcess().getResults().getResult(10).getSupplementDeliveries()!=null
                 && Global.project.getProcess().getResults().getResult(10).getSupplementDeliveries().getFirst()!=null)
                this.deployment= (Deployment) Global.project.getProcess().getResults().getResult(10).getSupplementDeliveries().getFirst();
            }
        //else
            //System.out.print("No Selected Presentation found ");

 this.refresh_evaluation_details();
 this.populate_processEvaluation();
}

 //RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR
 //                         Refresh Plan Details
 //RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR

 private void refresh_evaluation_details()
 {

this.KnowledgeEvaluation_Used_Resources_jList.setModel(this.getKnowledgeEvaluationUsedResourcesModel());
this.KnowledgeEvaluation_Used_Sources_jList.setModel(this.getKnowledgeEvaluationUsedSourcesModel());
//
this.Model_Selected_MeasuredOutcomes_jList.setModel(this.getModelPerformanceOutcomes());
this.Model_Used_Resources_jList.setModel(this.getModelUsedResourcesModel());
this.Model_Selected_Standards_jList.setModel(this.getModelSelectedStandardsModel());
//
this.Procedures_jList.setModel(this.getEvaluationProcedures());
//
this.Expected_MeasurmentOutcomes_jList.setModel(this.getExpectedOutcomes());
this.Expected_Resources_jList.setModel(this.getExpectedResourcesModel());
//
this.Selected_ExpectedMeasurmentOutcomes_jList.setModel(this.getSelectedExpectedOutcomes());
this.Selected_Results_jList.setModel(this.getSelectedResultsModel());
this.Results_jList.setModel(this.getProcessResultsModel());
//
 this.populateForm();
 }


//DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
//****************************************************************************
//                           Delete Solution Evidence
//DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
//****************************************************************************
 private void delete_knowledgeEvaluation_Evidence()
   {
    if (this.knowledgeEvaluation!=null &&this.knowledgeEvaluation.getEvidences()!=null
            && this.knowledgeEvaluation.getEvidences().getSourcesList().size()>0)
  {
        int index= this.knowledgeEvaluation.getEvidences().getSourcesList().indexOf(this.source);
        if (this.knowledgeEvaluation.getEvidences().delete(this.source)==0);
        {
            if (this.knowledgeEvaluation.getEvidences().getSourcesList().size()>0)
            {
                if (index==0)
                    this.source = (Source) this.knowledgeEvaluation.getEvidences().getSourcesList().get(index);
                else if (index>0)
                     this.source = (Source) this.knowledgeEvaluation.getEvidences().getSourcesList().get(index-1);
            }
        }
 }
}

//DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
//****************************************************************************
//                              Delete Plan
//DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
//****************************************************************************
private void delete_evaluation()
{
 if (Global.currentPhase != null && Global.currentPhase.getResult()!=null &&
     Global.currentPhase.getResult().getMainDelivery()!=null &&
    this.modelEvaluation==Global.currentPhase.getResult().getMainDelivery() )
    Global.currentPhase.getResult().setMainDelivery(null);
 else
 if (Global.currentPhase != null &&
        Global.currentPhase.getResult()!=null&&
        Global.currentPhase.getResult().getSupplementDeliveries()!=null  &&
        Global.currentPhase.getResult().getSupplementDeliveries().getDeliveriesList().size()>0)
    if (this.modelEvaluation!=null)
    {
      int index= Global.currentPhase.getResult().getSupplementDeliveries().getDeliveriesList().indexOf(this.modelEvaluation);
          if (Global.currentPhase.getResult().getSupplementDeliveries().delete(this.modelEvaluation)>-1);
        {
            if (Global.currentPhase.getResult().getSupplementDeliveries().getDeliveriesList().size()>0)
            {
                if (index==0 && Global.currentPhase.getResult().getSupplementDeliveries().getDelivery(index)!=null)
                    this.modelEvaluation = (ModelEvaluation) Global.currentPhase.getResult().getSupplementDeliveries().getDelivery(index);
                else if(index>0)
                    this.modelEvaluation = (ModelEvaluation) Global.currentPhase.getResult().getSupplementDeliveries().getDelivery(index-1);
                //this.refresh_plan_details();
                this.refresh_evaluation_details();
                this.populate_processEvaluation();
            }
            else
                this.clear_processEvaluation();
        }
     Global.currentPhase.save();
 }
 }



//CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
//****************************************************************************
//                     Clear Resource Plan & Resource
//****************************************************************************
 //CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

 private void clear_processEvaluation()
{
this.processEvaluation=null;
clear_process_details();
clear_processEvaluationForm();
 }

 private void clear_process_details()
{
     this.resource=null;
     this.source=null;
}
 private void clear_processEvaluationForm()
 {
this.HumanInteractionConsidered_jCheckBox.setSelected(false);
this.StandardsIssuesConsidered_jCheckBox.setSelected(false);
this.QualityIssuesConsidered_jCheckBox.setSelected(false);
this.CarriedWithinResources_jCheckBox.setSelected(false);
this.ProcessModelFollowed_jCheckBox.setSelected(false);
this.lastIteration_jCheckBox.setSelected(false);
this.StandardsComment_jTextPane.setText("") ;
this.QualityComment_jTextPane.setText("") ;
this.HumanComment_jTextPane.setText("") ;
this.ResourcesComment_jTextPane.setText("") ;
this.ModelComment_jTextPane.setText("") ;
this.IterationComment_jTextPane.setText("") ;
this.Selected_Results_jList.setModel(this.getSelectedResultsModel());
this.populateForm();
 }

//FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
//****************************************************************************
//                            First & Last Plan
//****************************************************************************
//FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF

 private void first_model()
    {
     if (Global.currentPhase.getResult()!=null && 
         Global.currentPhase.getResult().getSupplementDeliveries()!=null)
     {
         this.save_processEvaluation();
         this.model=(Model) Global.currentPhase.getResult().getSupplementDeliveries().getFirst();
         //
         this.clear_process_details();
         //
         this.refresh_evaluation_details();
         //
         this.populate_processEvaluation();
      }

       // this.refresh_Resource(this.thisResource);
 }

 //****************************************************************************
 private void last_model()
 {
if (Global.currentPhase.getResult()!=null &&
         Global.currentPhase.getResult().getSupplementDeliveries()!=null)
    {
        this.save_processEvaluation();
        this.model=(Model) Global.currentPhase.getResult().getSupplementDeliveries().getLast();
        this.clear_process_details();
        this.refresh_evaluation_details();
        //
        this.populate_processEvaluation();
  }    
 }


//NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
//****************************************************************************
//                                Next Plan
//****************************************************************************
//NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
 private void next_model()
    {
      
            if (this.model!=null)
            {
            if (Global.currentPhase.getResult()!=null &&
                Global.currentPhase.getResult().getSupplementDeliveries()!=null &&
                Global.currentPhase.getResult().getSupplementDeliveries().getNext(model)!=null
                )
                {
                    this.save_processEvaluation();
                    this.model=(Model) Global.currentPhase.getResult().getSupplementDeliveries().getNext(this.model);
                    this.clear_process_details();
                    this.refresh_evaluation_details();
                    //
                    this.populate_processEvaluation();
                }
            }      
        //else
            //System.out.print("No Phase Performing is found ");
    }

//PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
//****************************************************************************
//                     Previous Plan& Resource
//****************************************************************************
//PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
 private void previous_model()
    {

            if (this.model!=null)
            {
            if (Global.currentPhase.getResult()!=null &&
                Global.currentPhase.getResult().getSupplementDeliveries()!=null &&
                Global.currentPhase.getResult().getSupplementDeliveries().getPrevious(model)!=null
                )
                {
                    this.save_processEvaluation();
                    this.model=(Model) Global.currentPhase.getResult().getSupplementDeliveries().getPrevious(this.model);
                    this.clear_process_details();
                    this.refresh_evaluation_details();
                    //
                    this.populate_processEvaluation();
                }
            }
        //else
            //System.out.print("No Phase Performing is found ");
    }

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    if (Global.project == null) 
                        Global.project = new Project();

                    if (Global.project.getProcess() == null) 
                        Global.project.setProcess(new Process());
                     
                    Global.project.getProcess().setVersion(1);

                    if (Global.currentPhase==null)
                            Global.currentPhase=new Phase("ObjectivesDefinition");
                    
                    new ProcessEvaluationForm().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(ProcessEvaluationForm.class.getName()).log(Level.SEVERE, null, ex);
                } catch (Exception ex) {
                    Logger.getLogger(ProcessEvaluationForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }


//CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
//****************************************************************************
//                     Clear Source Prerequisite & Source
//****************************************************************************

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Add_jButton1;
    private javax.swing.JTextField Algorithm_jTextPane;
    private javax.swing.JComboBox Approaches_jComboBox;
    private javax.swing.JButton Browse_jButton;
    private javax.swing.JCheckBox CarriedWithinResources_jCheckBox;
    private javax.swing.JTextPane ConfusionMatrixResult_jTextPane;
    private javax.swing.JDesktopPane Control_jDesktopPane;
    private javax.swing.JTextPane CrossValidation_jTextPane;
    private javax.swing.JButton Delete_jButton;
    private javax.swing.JTextPane DeploymentMechanism_jTextPane;
    private javax.swing.JTextPane Deployment_Description_jTextPane;
    private javax.swing.JTextField Deployment_URL_jTextField;
    private javax.swing.JComboBox DeplymentTarget_jComboBox;
    private javax.swing.JList Expected_MeasurmentOutcomes_jList;
    private javax.swing.JList Expected_Resources_jList;
    private javax.swing.JCheckBox FinalResults_jCheckBox;
    private javax.swing.JCheckBox FinalSelection_jCheckBox;
    private javax.swing.JComboBox Goals_jComboBox;
    private javax.swing.JTextPane HumanComment_jTextPane;
    private javax.swing.JCheckBox HumanInteractionConsidered_jCheckBox;
    private javax.swing.JCheckBox IncludeAllDeliveries_jCheckBox;
    private javax.swing.JCheckBox IncludeData_jCheckBox;
    private javax.swing.JTextPane IterationComment_jTextPane;
    private javax.swing.JDesktopPane Justification_Source_jDesktopPane1;
    private javax.swing.JCheckBox KnowledgeConsistentWithBiology_jCheckBox;
    private javax.swing.JCheckBox KnowledgeConsistentWithLiterature_jCheckBox;
    private javax.swing.JList KnowledgeEvaluation_Used_Resources_jList;
    private javax.swing.JList KnowledgeEvaluation_Used_Sources_jList;
    private javax.swing.JCheckBox KnowledgeFulfilledStudyAims_jCheckBox;
    private javax.swing.JTextPane Knowledge_PropogatedHypothesis_jTextPane;
    private javax.swing.JTextPane Knowledge_PropogatedQuestion_jTextPane;
    private javax.swing.JTextPane Knowledge_Recommendations_jTextPane;
    private javax.swing.JCheckBox KnowledgesConsistentWithDomainExpertBackground_jCheckBox;
    private javax.swing.JCheckBox KnowledgesFulfilledProcessObjectives_jCheckBox;
    private javax.swing.JComboBox Method_jComboBox;
    private javax.swing.JTextPane ModelComment_jTextPane;
    private javax.swing.JCheckBox ModelOverFit_jCheckBox;
    private javax.swing.JCheckBox ModelPerformanceAcceptable_jCheckBox;
    private javax.swing.JTextPane ModelPerformanceComment_jTextPane;
    private javax.swing.JLabel ModelPerformance_jLabel;
    private javax.swing.JCheckBox ModelUnderFit_jCheckBox;
    private javax.swing.JList Model_Selected_MeasuredOutcomes_jList;
    private javax.swing.JList Model_Selected_Standards_jList;
    private javax.swing.JTextField Model_URL_jTextField;
    private javax.swing.JList Model_Used_Resources_jList;
    private javax.swing.JButton New_jButton1;
    private javax.swing.JDesktopPane New_jDesktopPane;
    private javax.swing.JButton Next_jButton;
    private javax.swing.JButton Next_jButton1;
    private javax.swing.JTextArea Objectives_jTextArea;
    private javax.swing.JPanel Performed_Plan_jPanel;
    private javax.swing.JPanel Performed_Plan_jPanel1;
    private javax.swing.JTabbedPane Performing_Details_TabbedPane;
    private javax.swing.JDesktopPane Performing_Details_jDesktopPane_jDesktopPane;
    private javax.swing.JLayeredPane Performing_jLayeredPane;
    private javax.swing.JLabel Planning_CustomisedPlanItem_jLabel;
    private javax.swing.JDesktopPane Planning_CustomisedPlan_jDesktopPane;
    private javax.swing.JLabel Planning_Planner_Name_jLabel12;
    private javax.swing.JLabel Planning_Planner_Name_jLabel13;
    private javax.swing.JLabel Planning_Planner_Name_jLabel14;
    private javax.swing.JLabel Planning_Planner_Name_jLabel15;
    private javax.swing.JLabel Planning_Planner_Name_jLabel16;
    private javax.swing.JLabel Planning_Planner_Name_jLabel17;
    private javax.swing.JLabel Planning_Planner_Role_jLabel1;
    private javax.swing.JDesktopPane Planning_Planner_jDesktopPane1;
    private javax.swing.JDesktopPane Planning_Resource_jDesktopPane;
    private javax.swing.JLabel Prerequisite_Source_ExternalSource_URL_jLabel4;
    private javax.swing.JLabel Prerequisite_Source_ExternalSource_URL_jLabel5;
    private javax.swing.JButton Presentation_Browse_jButton;
    private javax.swing.JTextPane Presentation_Description_jTextPane;
    private javax.swing.JButton Presentation_Open_jButton;
    private javax.swing.JTextField Presentation_URL_jTextField;
    private javax.swing.JButton Previous_jButton;
    private javax.swing.JButton Previous_jButton1;
    private javax.swing.JList Procedures_jList;
    private javax.swing.JCheckBox ProcessModelFollowed_jCheckBox;
    private javax.swing.JTextPane QualityComment_jTextPane;
    private javax.swing.JCheckBox QualityIssuesConsidered_jCheckBox;
    private javax.swing.JButton Refresh_jButton;
    private javax.swing.JTextPane ResourcesComment_jTextPane;
    private javax.swing.JTextPane ResultSummary_jTextPane;
    private javax.swing.JButton Result_Select_jButton;
    private javax.swing.JButton Result_UnSelect_jButton;
    private javax.swing.JList Results_jList;
    private javax.swing.JButton Save_jButton;
    private javax.swing.JList Selected_ExpectedMeasurmentOutcomes_jList;
    private javax.swing.JList Selected_Results_jList;
    private javax.swing.JTextPane StandardsComment_jTextPane;
    private javax.swing.JCheckBox StandardsIssuesConsidered_jCheckBox;
    private javax.swing.JCheckBox Supervised_jCheckBox;
    private javax.swing.JComboBox Tasks_jComboBox;
    private javax.swing.JComboBox Technique_jComboBox;
    private javax.swing.JDesktopPane Technique_jDesktopPane;
    private javax.swing.JTextPane Technique_jTextPane;
    private javax.swing.JLabel URL_jLabel;
    private javax.swing.JLabel algorithm_jLabel;
    private javax.swing.JButton deleteCrossValidation_jButton;
    private javax.swing.JLabel goal_jLabel;
    private javax.swing.JButton jButton1;
    private javax.swing.JDesktopPane jDesktopPane45;
    private javax.swing.JDesktopPane jDesktopPane46;
    private javax.swing.JDesktopPane jDesktopPane47;
    private javax.swing.JDesktopPane jDesktopPane48;
    private javax.swing.JDesktopPane jDesktopPane49;
    private javax.swing.JDesktopPane jDesktopPane50;
    private javax.swing.JDesktopPane jDesktopPane51;
    private javax.swing.JDesktopPane jDesktopPane52;
    private javax.swing.JDesktopPane jDesktopPane53;
    private javax.swing.JDesktopPane jDesktopPane54;
    private javax.swing.JDesktopPane jDesktopPane55;
    private javax.swing.JDesktopPane jDesktopPane56;
    private javax.swing.JDesktopPane jDesktopPane57;
    private javax.swing.JDesktopPane jDesktopPane58;
    private javax.swing.JDesktopPane jDesktopPane8;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane15;
    private javax.swing.JScrollPane jScrollPane16;
    private javax.swing.JScrollPane jScrollPane17;
    private javax.swing.JScrollPane jScrollPane18;
    private javax.swing.JScrollPane jScrollPane19;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane20;
    private javax.swing.JScrollPane jScrollPane21;
    private javax.swing.JScrollPane jScrollPane22;
    private javax.swing.JScrollPane jScrollPane23;
    private javax.swing.JScrollPane jScrollPane24;
    private javax.swing.JScrollPane jScrollPane25;
    private javax.swing.JScrollPane jScrollPane26;
    private javax.swing.JScrollPane jScrollPane27;
    private javax.swing.JScrollPane jScrollPane28;
    private javax.swing.JScrollPane jScrollPane29;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane30;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane69;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane70;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JCheckBox lastIteration_jCheckBox;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JLabel task_jLabel;
    // End of variables declaration//GEN-END:variables


//PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
//****************************************************************************
//                             Populate
//****************************************************************************
//PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP

private void populateForm()
{
            this.repaint();
            this.pack();
 }



//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
//                       Get Project Resources Model
//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
public  DefaultComboBoxModel getModelSelectedStandardsModel()
{
  DefaultComboBoxModel dcm=null;
  ArrayList<Standard> selectedStandardsList=new ArrayList<Standard>();
  String[] sourcesArrayNames = null;
  if (this.model!=null && this.model.getStandards()!=null)
  {
      if (this.model.getStandards().getStandardsList().size()>0)
      {
        selectedStandardsList=this.model.getStandards().getStandardsList();
        int size=selectedStandardsList.size();
        sourcesArrayNames = new String[size];
        int i=0;
        for (Object o:selectedStandardsList)
            {
             String thisResult="";
              Standard thisStandard=(Standard) o;
              thisResult=thisStandard.toString();
              sourcesArrayNames[i]=thisResult;
              i=i+1;
             }
        dcm=new DefaultComboBoxModel(sourcesArrayNames);
        return dcm;
        }
     else
      {
        String names[] ={"<No source selected yet>"};
        dcm=new DefaultComboBoxModel(names);
        return dcm;
      }
  }
 else
    {
    String names[] ={"<No source selected yet>"};
    dcm=new DefaultComboBoxModel(names);
     return dcm;
    }
 }



//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
//                       Get Project Remeasures Model
//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
public  DefaultComboBoxModel getModelPerformanceOutcomes()
{

 //private MeasurmentOutcome expectedOutcome =null;
  DefaultComboBoxModel dcm=null;
  ArrayList<MeasurmentOutcome> expectedOutcomesList=new ArrayList<MeasurmentOutcome>();
  String[] expectedOutcomesArrayNames = null;
  if (this.model!=null &&
//          this.model.getSuccessCriteria()!=null &&
      this.model.getPerformance()!=null)
  {
      if ( this.model.getPerformance().getOutcomesList().size()>0)
      {
        expectedOutcomesList=this.model.getPerformance().getOutcomesList();
        int size=expectedOutcomesList.size();
        expectedOutcomesArrayNames = new String[size];
        int i=0;
        for (Object o:expectedOutcomesList)
            {
            String thisResult="";
            MeasurmentOutcome  measurmentOutcome=(MeasurmentOutcome) o;

                  thisResult=measurmentOutcome.toString();

              expectedOutcomesArrayNames[i]=thisResult;
              i=i+1;
              //--------------------------------------------------------------
             }
        dcm=new DefaultComboBoxModel(expectedOutcomesArrayNames);
        return dcm;
        }
     else
      {
        String names[] ={"<No expected outcome selected yet>"};
        dcm=new DefaultComboBoxModel(names);
        return dcm;
      }
  }
 else
    {
    String names[] ={"<No expected outcome selected yet>"};
    dcm=new DefaultComboBoxModel(names);
     return dcm;
    }
 }

//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
//                       Get Planned Resources Model
//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
public  DefaultComboBoxModel getModelUsedResourcesModel()
{
  DefaultComboBoxModel dcm=null;
  ArrayList<Resource> resourcesList=new ArrayList<Resource>();
  String[] resourcesArrayNames = null;

 if (this.model!=null &&
//     this.model.getFeasibility()!=null &&
     this.model.getRequirements()!=null)

  {
      if (this.model.getRequirements().getResourcesList().size()>0)
      {
        resourcesList=this.model.getRequirements().getResourcesList();
        int size=resourcesList.size();
        resourcesArrayNames = new String[size];
        int i=0;
        for (Object o:resourcesList)
            {
              Resource thisResource=(Resource) o;
              String thisResult="";
              if (thisResource.getResourceType()!=null)
                  thisResult=thisResource.getResourceType().toString()+"  ";
              if (thisResource.getDescription()!=null)
                   thisResult=thisResult+ thisResource.getDescription();
              resourcesArrayNames[i]=thisResult;
              i=i+1;
             }
        dcm=new DefaultComboBoxModel(resourcesArrayNames);
        return dcm;
        }
     else
      {
        String names[] ={"<No selected resource yet>"};
        dcm=new DefaultComboBoxModel(names);
        return dcm;
      }
  }
 else
    {
    String names[] ={"<No selected resource yet>"};
    dcm=new DefaultComboBoxModel(names);
     return dcm;
    }
 }


//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
//                       Get Planned Resources Model
//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
public  DefaultComboBoxModel getKnowledgeEvaluationUsedResourcesModel()
{
  DefaultComboBoxModel dcm=null;
  ArrayList<Resource> resourcesList=new ArrayList<Resource>();
  String[] resourcesArrayNames = null;

 if (this.knowledgeEvaluation!=null &&
//     this.model.getFeasibility()!=null &&
     this.knowledgeEvaluation.getResources()!=null)

  {
      if (this.knowledgeEvaluation.getResources().getResourcesList().size()>0)
      {
        resourcesList=this.knowledgeEvaluation.getResources().getResourcesList();
        int size=resourcesList.size();
        resourcesArrayNames = new String[size];
        int i=0;
        for (Object o:resourcesList)
            {
              Resource thisResource=(Resource) o;
              String thisResult="";
              if (thisResource.getResourceType()!=null)
                  thisResult=thisResource.getResourceType().toString()+"  ";
              if (thisResource.getDescription()!=null)
                   thisResult=thisResult+ thisResource.getDescription();
              resourcesArrayNames[i]=thisResult;
              i=i+1;
             }
        dcm=new DefaultComboBoxModel(resourcesArrayNames);
        return dcm;
        }
     else
      {
        String names[] ={"<No selected resource yet>"};
        dcm=new DefaultComboBoxModel(names);
        return dcm;
      }
  }
 else
    {
    String names[] ={"<No selected resource yet>"};
    dcm=new DefaultComboBoxModel(names);
     return dcm;
    }
 }


//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
//                       Get Project Resources Model
//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
public  DefaultComboBoxModel getProjectResourcesModel()
{
  DefaultComboBoxModel dcm=null;
  ArrayList<Resource> resourcesList=new ArrayList<Resource>();
  String[] resourcesArrayNames = null;
  if (Global.project!=null
          && Global.project.getSupplements()!=null
          && Global.project.getSupplements().getManagement()!=null )
  {
      if (  Global.project.getSupplements().getManagement().getResources()!=null
              && Global.project.getSupplements().getManagement().getResources().getResourcesList().size()>0)
      {
        resourcesList=Global.project.getSupplements().getManagement().getResources().getResourcesList();
        int size=resourcesList.size();
        resourcesArrayNames = new String[size];
        int i=0;
        for (Object o:resourcesList)
            {
              Resource thisResource=(Resource) o;
              String thisResult="";
              if (thisResource.getResourceType()!=null)
                  thisResult=thisResource.getResourceType().toString()+"  ";
              if (thisResource.getDescription()!=null)
                   thisResult=thisResult+ thisResource.getDescription();
              resourcesArrayNames[i]=thisResult;
              i=i+1;
             }
        dcm=new DefaultComboBoxModel(resourcesArrayNames);
        return dcm;
        }
     else
      {
        String names[] ={"<No resource available yet>"};
        dcm=new DefaultComboBoxModel(names);
        return dcm;
      }
  }
 else
    {
    String names[] ={"<No resource available yet>"};
    dcm=new DefaultComboBoxModel(names);
     return dcm;
    }
 }



//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
//                       Get Project Remeasures Model
//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
public  DefaultComboBoxModel getExpectedOutcomes()
{

 //private MeasurmentOutcome expectedOutcome =null;
  DefaultComboBoxModel dcm=null;
  ArrayList<MeasurmentOutcome> expectedOutcomesList=new ArrayList<MeasurmentOutcome>();
  String[] expectedOutcomesArrayNames = null;
  if (this.techniqueSelection!=null &&this.techniqueSelection.getSuccessCriteria()!=null &&
      this.techniqueSelection.getSuccessCriteria().getExpectedOutcomes()!=null)
  {
      if ( this.techniqueSelection.getSuccessCriteria().getExpectedOutcomes().getOutcomesList().size()>0)
      {
        expectedOutcomesList=this.techniqueSelection.getSuccessCriteria().getExpectedOutcomes().getOutcomesList();
        int size=expectedOutcomesList.size();
        expectedOutcomesArrayNames = new String[size];
        int i=0;
        for (Object o:expectedOutcomesList)
            {
            String thisResult="";
            MeasurmentOutcome  measurmentOutcome=(MeasurmentOutcome) o;

                  thisResult=measurmentOutcome.toString();

              expectedOutcomesArrayNames[i]=thisResult;
              i=i+1;
              //--------------------------------------------------------------
             }
        dcm=new DefaultComboBoxModel(expectedOutcomesArrayNames);
        return dcm;
        }
     else
      {
        String names[] ={"<No expected outcome selected yet>"};
        dcm=new DefaultComboBoxModel(names);
        return dcm;
      }
  }
 else
    {
    String names[] ={"<No expected outcome selected yet>"};
    dcm=new DefaultComboBoxModel(names);
     return dcm;
    }
 }




//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
//                       Get Planned Resources Model
//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
public  DefaultComboBoxModel getExpectedResourcesModel()
{
  DefaultComboBoxModel dcm=null;
  ArrayList<Resource> resourcesList=new ArrayList<Resource>();
  String[] resourcesArrayNames = null;

 if (this.techniqueSelection!=null &&
     this.techniqueSelection.getFeasibility()!=null &&
     this.techniqueSelection.getFeasibility().getRequiredResources()!=null)

  {
      if (this.techniqueSelection.getFeasibility().getRequiredResources().getResourcesList().size()>0)
      {
        resourcesList=this.techniqueSelection.getFeasibility().getRequiredResources().getResourcesList();
        int size=resourcesList.size();
        resourcesArrayNames = new String[size];
        int i=0;
        for (Object o:resourcesList)
            {
              Resource thisResource=(Resource) o;
              String thisResult="";
              if (thisResource.getResourceType()!=null)
                  thisResult=thisResource.getResourceType().toString()+"  ";
              if (thisResource.getDescription()!=null)
                   thisResult=thisResult+ thisResource.getDescription();
              resourcesArrayNames[i]=thisResult;
              i=i+1;
             }
        dcm=new DefaultComboBoxModel(resourcesArrayNames);
        return dcm;
        }
     else
      {
        String names[] ={"<No selected resource yet>"};
        dcm=new DefaultComboBoxModel(names);
        return dcm;
      }
  }
 else
    {
    String names[] ={"<No selected resource yet>"};
    dcm=new DefaultComboBoxModel(names);
     return dcm;
    }
 }

  //COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
//                       Get Project Remeasures Model
//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
public  DefaultComboBoxModel getEvaluationProcedures()
{
  DefaultComboBoxModel dcm=null;
  ArrayList<Procedure> proceduresList=new ArrayList<Procedure>();
  String[] procedureArrayNames = null;
  if (this.modelEvaluation!=null &&this.modelEvaluation.getValidationTest()!=null)
  {
      if ( this.modelEvaluation.getValidationTest().getProceduresList().size()>0)
      {
        proceduresList=this.modelEvaluation.getValidationTest().getProceduresList();
        int size=proceduresList.size();
        procedureArrayNames = new String[size];
        int i=0;
        for (Object o:proceduresList)
            {
            String thisResult="";
            Procedure  thisProcedure=(Procedure) o;
            thisResult=thisProcedure.toString();
              procedureArrayNames[i]=thisResult;
              i=i+1;
              //--------------------------------------------------------------
             }
        dcm=new DefaultComboBoxModel(procedureArrayNames);
        return dcm;
        }
     else
      {
        String names[] ={"<No expected outcome selected yet>"};
        dcm=new DefaultComboBoxModel(names);
        return dcm;
      }
  }
 else
    {
    String names[] ={"<No expected outcome selected yet>"};
    dcm=new DefaultComboBoxModel(names);
     return dcm;
    }
 }

//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
//                       Get Planned Resources Model
//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
public  DefaultComboBoxModel getEvaluationProcedureResourcesModel()
{
  DefaultComboBoxModel dcm=null;
  ArrayList<Resource> resourcesList=new ArrayList<Resource>();
  String[] resourcesArrayNames = null;

 if (this.procedure!=null &&
     this.procedure.getResources()!=null )

  {
      if (this.procedure.getResources().getResourcesList().size()>0)
      {
        resourcesList=this.procedure.getResources().getResourcesList();
        int size=resourcesList.size();
        resourcesArrayNames = new String[size];
        int i=0;
        for (Object o:resourcesList)
            {
              Resource thisResource=(Resource) o;
              String thisResult="";
              if (thisResource.getResourceType()!=null)
                  thisResult=thisResource.getResourceType().toString()+"  ";
              if (thisResource.getDescription()!=null)
                   thisResult=thisResult+ thisResource.getDescription();
              resourcesArrayNames[i]=thisResult;
              i=i+1;
             }
        dcm=new DefaultComboBoxModel(resourcesArrayNames);
        return dcm;
        }
     else
      {
        String names[] ={"<No selected resource yet>"};
        dcm=new DefaultComboBoxModel(names);
        return dcm;
      }
  }
 else
    {
    String names[] ={"<No selected resource yet>"};
    dcm=new DefaultComboBoxModel(names);
     return dcm;
    }
 }

//NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
//****************************************************************************
//                                Next Plan
//****************************************************************************
//NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
 private void next_presentation()
    {
if (Global.project.getProcess()!=null &&
    Global.project.getProcess().getResults()!=null &&
    Global.project.getProcess().getResults().getResult(8)!=null &&
    this.presentation!=null)
{
if (Global.project.getProcess().getResults().getResult(8).getSupplementDeliveries()!=null
     && Global.project.getProcess().getResults().getResult(8).getSupplementDeliveries().getNext(presentation)!=null)
{
     this.clear_presentation();
     this.presentation= (PresentedKnowledge) Global.project.getProcess().getResults().getResult(8).getSupplementDeliveries().getNext(presentation);
     this.populate_presentation();
}
}
//else
//System.out.print("No Selected Presentation found ");

}

//PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
//****************************************************************************
//                     Previous Plan& Resource
//****************************************************************************
//PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
 private void previous_presentation()
{
if (Global.project.getProcess()!=null &&
    Global.project.getProcess().getResults()!=null &&
    Global.project.getProcess().getResults().getResult(8)!=null &&
    this.presentation!=null)
{
if (Global.project.getProcess().getResults().getResult(8).getSupplementDeliveries()!=null
     && Global.project.getProcess().getResults().getResult(8).getSupplementDeliveries().getPrevious(presentation)!=null)
{
     this.clear_presentation();
     this.presentation= (PresentedKnowledge) Global.project.getProcess().getResults().getResult(8).getSupplementDeliveries().getPrevious(presentation);
     this.populate_presentation();
}
}
//else
//System.out.print("No Selected Presentation found ");
}
private void populate_presentation()
    {

         if ( this.presentation !=null && this.presentation.getPresentationMethod()!=null)
           this.Method_jComboBox.setSelectedIndex(this.presentation.getPresentationMethod().ordinal()+1);
         else
           this.Method_jComboBox.setSelectedIndex(0);

         if ( this.presentation !=null && this.presentation.getVisualisationTechnique()!=null)
           this.Technique_jComboBox.setSelectedIndex(this.presentation.getVisualisationTechnique().ordinal()+1);
         else
             this.Method_jComboBox.setSelectedIndex(0);

       if ( this.presentation !=null && this.presentation.getURL()!=null)
            this.Presentation_URL_jTextField.setText(this.presentation.getURL().toString());
       else
            this.Presentation_URL_jTextField.setText("");

        if ( this.presentation !=null && this.presentation.getDescription()!=null)
            this.Presentation_Description_jTextPane.setText(this.presentation.getDescription().toString());
         else
             Presentation_Description_jTextPane.setText("");

        if (this.presentation!=null)
             this.FinalSelection_jCheckBox.setSelected(this.presentation.isFinalSelection());

}

private void clear_presentation()
    {
      this.Method_jComboBox.setSelectedIndex(0);
      this.Method_jComboBox.setSelectedIndex(0);
      this.Presentation_URL_jTextField.setText("");
      this.Presentation_Description_jTextPane.setText("");
      this.FinalSelection_jCheckBox.setSelected(this.presentation.isFinalSelection());
}


//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
//                       Get Project Resources Model
//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
public  DefaultComboBoxModel getSourcesModel()
{
  DefaultComboBoxModel dcm=null;
  ArrayList<Source> sourcesList=new ArrayList<Source>();
  String[] sourcesArrayNames = null;
  if (Global.project!=null && Global.project.getSources()!=null)
  {
      if ( Global.project.getSources().getSourcesList().size()>0)
      {
        sourcesList=Global.project.getSources().getSourcesList();
        int size=sourcesList.size();
        sourcesArrayNames = new String[size];
        int i=0;
        for (Object o:sourcesList)
            {
            String thisResult="";
             if (o.getClass().getSimpleName().equals("InternalSource"))
              {
                  InternalSource thisSource=(InternalSource) o;
                  thisResult=thisSource.toString();
              }
              else if (o.getClass().getSimpleName().equals("ExternalSource"))
              {
                  ExternalSource thisSource=(ExternalSource) o;
                  thisResult=thisSource.toString();
              }
              else if (o.getClass().getSimpleName().equals("HumanSource"))
              {
                  HumanSource thisSource=(HumanSource) o;
                  thisResult=thisSource.toString();
              }
              sourcesArrayNames[i]=thisResult;
              i=i+1;
              //--------------------------------------------------------------
             }
        dcm=new DefaultComboBoxModel(sourcesArrayNames);
        return dcm;
        }
     else
      {
        String names[] ={"<No sources available yet>"};
        dcm=new DefaultComboBoxModel(names);
        return dcm;
      }
  }
 else
    {
    String names[] ={"<No sources available yet>"};
    dcm=new DefaultComboBoxModel(names);
     return dcm;
    }
 }

//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
//                       Get Project Resources Model
//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
public  DefaultComboBoxModel getKnowledgeEvaluationUsedSourcesModel()
{
  DefaultComboBoxModel dcm=null;
  ArrayList<Source> selectedSourcesList=new ArrayList<Source>();
  String[] sourcesArrayNames = null;
  if (this.knowledgeEvaluation!=null && this.knowledgeEvaluation.getEvidences()!=null)
  {
      if (this.knowledgeEvaluation.getEvidences().getSourcesList().size()>0)
      {
        selectedSourcesList=this.knowledgeEvaluation.getEvidences().getSourcesList();
        int size=selectedSourcesList.size();
        sourcesArrayNames = new String[size];
        int i=0;
        for (Object o:selectedSourcesList)
            {
              String thisResult="";
             if (o.getClass().getSimpleName().equals("InternalSource"))
              {
                  InternalSource thisSource=(InternalSource) o;
                  thisResult=thisSource.toString();
              }
              else if (o.getClass().getSimpleName().equals("ExternalSource"))
              {
                  ExternalSource thisSource=(ExternalSource) o;
                  thisResult=thisSource.toString();
              }
              else if (o.getClass().getSimpleName().equals("HumanSource"))
              {
                  HumanSource thisSource=(HumanSource) o;
                  thisResult=thisSource.toString();
              }
              sourcesArrayNames[i]=thisResult;
              i=i+1;
             }
        dcm=new DefaultComboBoxModel(sourcesArrayNames);
        return dcm;
        }
     else
      {
        String names[] ={"<No source selected yet>"};
        dcm=new DefaultComboBoxModel(names);
        return dcm;
      }
  }
 else
    {
    String names[] ={"<No source selected yet>"};
    dcm=new DefaultComboBoxModel(names);
     return dcm;
    }
 }

//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
//                       Get Project Remeasures Model
//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
public  DefaultComboBoxModel getSelectedExpectedOutcomes()
{

 //private MeasurmentOutcome expectedOutcome =null;
  DefaultComboBoxModel dcm=null;
  ArrayList<MeasurmentOutcome> expectedOutcomesList=new ArrayList<MeasurmentOutcome>();
  String[] expectedOutcomesArrayNames = null;
  if (this.processObjective!=null &&this.processObjective.getSuccessCriteria()!=null &&
      this.processObjective.getSuccessCriteria().getExpectedOutcomes()!=null)
  {
      if ( this.processObjective.getSuccessCriteria().getExpectedOutcomes().getOutcomesList().size()>0)
      {
        expectedOutcomesList=this.processObjective.getSuccessCriteria().getExpectedOutcomes().getOutcomesList();
        int size=expectedOutcomesList.size();
        expectedOutcomesArrayNames = new String[size];
        int i=0;
        for (Object o:expectedOutcomesList)
            {
            String thisResult="";
            MeasurmentOutcome  measurmentOutcome=(MeasurmentOutcome) o;

                  thisResult=measurmentOutcome.toString();

              expectedOutcomesArrayNames[i]=thisResult;
              i=i+1;
              //--------------------------------------------------------------
             }
        dcm=new DefaultComboBoxModel(expectedOutcomesArrayNames);
        return dcm;
        }
     else
      {
        String names[] ={"<No expected outcome selected yet>"};
        dcm=new DefaultComboBoxModel(names);
        return dcm;
      }
  }
 else
    {
    String names[] ={"<No expected outcome selected yet>"};
    dcm=new DefaultComboBoxModel(names);
     return dcm;
    }
 }


//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
//                       Get Project Resources Model
//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
public  DefaultComboBoxModel getProcessResultsModel()
{
  DefaultComboBoxModel dcm=null;
  ArrayList<Result> resultsList=new ArrayList<Result>();
  String[] resultsArrayNames = null;
  if (Global.project!=null
          && Global.project.getProcess()!=null

          && Global.project.getProcess().getResults()!=null )
  {
      if ( Global.project.getProcess().getResults().getResultsList().size()>0)
      {
        resultsList=Global.project.getProcess().getResults().getResultsList();
        int size=resultsList.size();
        resultsArrayNames = new String[size];
        int i=0;
        for (Object o:resultsList)
            {
              Result thisResult=(Result) o;
              if (thisResult!=null && thisResult.getMainDelivery()!=null&&
                  !thisResult.getMainDelivery().getClass().getSimpleName().equals("ProcessEvaluation") )
                  resultsArrayNames[i]=thisResult.getMainDelivery().toString();

              else
                if (thisResult!=null && thisResult.getSupplementDeliveries()!=null &&
                   thisResult.getSupplementDeliveries().getLast()!=null &&
                   thisResult.getSupplementDeliveries().getLast().toString()!=null&&
                   !thisResult.getSupplementDeliveries().getLast().getClass().getSimpleName().equals("ProcessEvaluation"))
                     resultsArrayNames[i]=thisResult.getSupplementDeliveries().getLast().toString();
              i=i+1;
             }
        dcm=new DefaultComboBoxModel(resultsArrayNames);
        return dcm;
        }
     else
      {
        String names[] ={"<No resource available yet>"};
        dcm=new DefaultComboBoxModel(names);
        return dcm;
      }
  }
 else
    {
    String names[] ={"<No resource available yet>"};
    dcm=new DefaultComboBoxModel(names);
     return dcm;
    }
 }

//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
//                       Get Project Resources Model
//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
public  DefaultComboBoxModel getSelectedResultsModel()
{
  DefaultComboBoxModel dcm=null;
  ArrayList<Result> resultsList=new ArrayList<Result>();
  String[] resultsArrayNames = null;
  if (this.processEvaluation!=null && this.processEvaluation.getResults()!=null )
  {
      if ( this.processEvaluation.getResults().getResultsList().size()>0)
      {
        resultsList=this.processEvaluation.getResults().getResultsList();
        int size=resultsList.size();
        resultsArrayNames = new String[size];
        int i=0;
       for (Object o:resultsList)
            {
              Result thisResult=(Result) o;
              if (thisResult!=null && thisResult.getMainDelivery()!=null&&
                  !thisResult.getMainDelivery().getClass().getSimpleName().equals("ProcessEvaluation") )
                  resultsArrayNames[i]=thisResult.getMainDelivery().toString();

              else
                if (thisResult!=null && thisResult.getSupplementDeliveries()!=null &&
                   thisResult.getSupplementDeliveries().getLast()!=null &&
                   thisResult.getSupplementDeliveries().getLast().toString()!=null&&
                   !thisResult.getSupplementDeliveries().getLast().getClass().getSimpleName().equals("ProcessEvaluation"))
                     resultsArrayNames[i]=thisResult.getSupplementDeliveries().getLast().toString();
              i=i+1;
             }
        dcm=new DefaultComboBoxModel(resultsArrayNames);
        return dcm;
        }
     else
      {
        String names[] ={"<No resource available yet>"};
        dcm=new DefaultComboBoxModel(names);
        return dcm;
      }
  }
 else
    {
    String names[] ={"<No resource available yet>"};
    dcm=new DefaultComboBoxModel(names);
     return dcm;
    }
 }


}
