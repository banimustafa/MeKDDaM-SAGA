/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ObjectivesForm.java
 *
 * Created on 04-Oct-2010, 12:05:22
 */

package gui.form.outcome;
import global.Global;
import gui.form.supplement.ManagementForm;
import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import process_model.phase.Phase;

import process_model.phase.delivery.data.PreProcessedData;
import process_model.general.Procedure;
import process_model.general.Procedures;
import process_model.process.result.Result;
import process_model.phase.delivery.process_objective.DataMiningObjective;
import process_model.supplement.management.resource.Resource;
import process_model.supplement.management.resource.Resources;

import process_model.process.Process;
import process_model.process.input.data.MetabolomicsData;
import process_model.process.input.data.dataset.DataSet;
import project.Project;
import toolbox.Tools;
import toolbox.filetools.FileTools;

public class DataPreProcessingForm extends javax.swing.JFrame {
private PreProcessedData preProcessedData;
private Procedure procedure;    
private Resource resource=null;    
private MetabolomicsData metabolomicsData=null;    

//CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC    
public DataPreProcessingForm()
{
    initComponents();
    this.refresh();
    this.populate();
    this.setVisible(true);
    this.setTitle("Data Pre-Processing: "+Global.currentPhase.getTitle());
}


//CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Planning_Planner_info_jDesktopPane6 = new javax.swing.JDesktopPane();
        jScrollPane11 = new javax.swing.JScrollPane();
        Procedures_jList = new javax.swing.JList();
        Planning_Objectives_Control_jDesktopPane10 = new javax.swing.JDesktopPane();
        Planning_Planner_info_jDesktopPane3 = new javax.swing.JDesktopPane();
        Planning_Planner_Name_jLabel9 = new javax.swing.JLabel();
        Planning_Planner_Name_jLabel8 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        Purpose_jTextArea = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        Procedure_jTextArea = new javax.swing.JTextArea();
        Planning_Planner_info_jDesktopPane4 = new javax.swing.JDesktopPane();
        Planning_Objectives_Control_jDesktopPane1 = new javax.swing.JDesktopPane();
        Select_Resource_jButton = new javax.swing.JButton();
        Edit_Resource_jButton = new javax.swing.JButton();
        Unselect_Resource_jButton = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        Selected_Resources_jList = new javax.swing.JList();
        jScrollPane5 = new javax.swing.JScrollPane();
        Resources_jList = new javax.swing.JList();
        Add_Procedure_jButton = new javax.swing.JButton();
        Planning_Planner_info_jDesktopPane7 = new javax.swing.JDesktopPane();
        URL_jTextField = new javax.swing.JTextField();
        Prerequisite_Source_ExternalSource_URL_jLabel3 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        Objectives_jDesktopPane = new javax.swing.JDesktopPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        Objectives_jTextArea = new javax.swing.JTextArea();
        Delete_Procedure_jButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        Control_jDesktopPane = new javax.swing.JDesktopPane();
        Delete_jButton = new javax.swing.JButton();
        Save_jButton = new javax.swing.JButton();
        Refresh_jButton = new javax.swing.JButton();
        New_jDesktopPane = new javax.swing.JDesktopPane();
        New_jButton1 = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowDeactivated(java.awt.event.WindowEvent evt) {
                formWindowDeactivated(evt);
            }
        });

        Planning_Planner_info_jDesktopPane6.setBackground(new java.awt.Color(255, 255, 204));
        Planning_Planner_info_jDesktopPane6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        Planning_Planner_info_jDesktopPane6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Planning_Planner_info_jDesktopPane6MouseClicked(evt);
            }
        });

        Procedures_jList.setBorder(javax.swing.BorderFactory.createTitledBorder("Applied Procedures"));
        Procedures_jList.setModel(this.getSelectedProcedures());
        Procedures_jList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                Procedures_jListValueChanged(evt);
            }
        });
        jScrollPane11.setViewportView(Procedures_jList);

        jScrollPane11.setBounds(670, 170, 390, 320);
        Planning_Planner_info_jDesktopPane6.add(jScrollPane11, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Objectives_Control_jDesktopPane10.setBackground(new java.awt.Color(255, 255, 204));
        Planning_Objectives_Control_jDesktopPane10.setBounds(650, 170, 100, 80);
        Planning_Planner_info_jDesktopPane6.add(Planning_Objectives_Control_jDesktopPane10, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Planner_info_jDesktopPane3.setBackground(new java.awt.Color(255, 255, 153));
        Planning_Planner_info_jDesktopPane3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        Planning_Planner_info_jDesktopPane3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Planning_Planner_info_jDesktopPane3MouseClicked(evt);
            }
        });

        Planning_Planner_Name_jLabel9.setText("Procedure Purpose");
        Planning_Planner_Name_jLabel9.setBounds(10, 130, 320, 20);
        Planning_Planner_info_jDesktopPane3.add(Planning_Planner_Name_jLabel9, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Planner_Name_jLabel8.setText("Procedure  Description");
        Planning_Planner_Name_jLabel8.setBounds(10, 10, 290, 20);
        Planning_Planner_info_jDesktopPane3.add(Planning_Planner_Name_jLabel8, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Purpose_jTextArea.setBackground(new java.awt.Color(255, 255, 204));
        Purpose_jTextArea.setColumns(20);
        Purpose_jTextArea.setRows(5);
        jScrollPane2.setViewportView(Purpose_jTextArea);

        jScrollPane2.setBounds(10, 150, 610, 90);
        Planning_Planner_info_jDesktopPane3.add(jScrollPane2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Procedure_jTextArea.setBackground(new java.awt.Color(255, 255, 204));
        Procedure_jTextArea.setColumns(20);
        Procedure_jTextArea.setRows(5);
        jScrollPane3.setViewportView(Procedure_jTextArea);

        jScrollPane3.setBounds(10, 30, 610, 80);
        Planning_Planner_info_jDesktopPane3.add(jScrollPane3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Planner_info_jDesktopPane4.setBackground(new java.awt.Color(255, 255, 153));
        Planning_Planner_info_jDesktopPane4.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        Planning_Planner_info_jDesktopPane4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Planning_Planner_info_jDesktopPane4MouseClicked(evt);
            }
        });

        Planning_Objectives_Control_jDesktopPane1.setBackground(new java.awt.Color(255, 255, 153));

        Select_Resource_jButton.setText("+>");
        Select_Resource_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Select_Resource_jButtonActionPerformed(evt);
            }
        });
        Select_Resource_jButton.setBounds(0, 0, 80, 20);
        Planning_Objectives_Control_jDesktopPane1.add(Select_Resource_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Edit_Resource_jButton.setText("Edit");
        Edit_Resource_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Edit_Resource_jButtonActionPerformed(evt);
            }
        });
        Edit_Resource_jButton.setBounds(0, 50, 80, 20);
        Planning_Objectives_Control_jDesktopPane1.add(Edit_Resource_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Unselect_Resource_jButton.setText("Delete -");
        Unselect_Resource_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Unselect_Resource_jButtonActionPerformed(evt);
            }
        });
        Unselect_Resource_jButton.setBounds(0, 20, 80, 20);
        Planning_Objectives_Control_jDesktopPane1.add(Unselect_Resource_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Objectives_Control_jDesktopPane1.setBounds(280, 10, 80, 100);
        Planning_Planner_info_jDesktopPane4.add(Planning_Objectives_Control_jDesktopPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Selected_Resources_jList.setBackground(new java.awt.Color(255, 255, 204));
        Selected_Resources_jList.setBorder(javax.swing.BorderFactory.createTitledBorder("Procedure Required Resources"));
        Selected_Resources_jList.setModel(this.getSelectedResourcesModel());
        Selected_Resources_jList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        Selected_Resources_jList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                Selected_Resources_jListValueChanged(evt);
            }
        });
        jScrollPane4.setViewportView(Selected_Resources_jList);
        Selected_Resources_jList.getAccessibleContext().setAccessibleName("Required Resources");

        jScrollPane4.setBounds(360, 10, 240, 150);
        Planning_Planner_info_jDesktopPane4.add(jScrollPane4, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Resources_jList.setBackground(new java.awt.Color(255, 255, 102));
        Resources_jList.setBorder(javax.swing.BorderFactory.createTitledBorder("Project Available Resources"));
        Resources_jList.setModel(this.getProjectResourcesModel());
        Resources_jList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        Resources_jList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                Resources_jListValueChanged(evt);
            }
        });
        jScrollPane5.setViewportView(Resources_jList);

        jScrollPane5.setBounds(10, 10, 270, 150);
        Planning_Planner_info_jDesktopPane4.add(jScrollPane5, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Planner_info_jDesktopPane4.setBounds(10, 250, 610, 170);
        Planning_Planner_info_jDesktopPane3.add(Planning_Planner_info_jDesktopPane4, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Add_Procedure_jButton.setText("Add +>");
        Add_Procedure_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Add_Procedure_jButtonActionPerformed(evt);
            }
        });
        Add_Procedure_jButton.setBounds(520, 120, 100, 25);
        Planning_Planner_info_jDesktopPane3.add(Add_Procedure_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Planner_info_jDesktopPane3.setBounds(20, 80, 630, 430);
        Planning_Planner_info_jDesktopPane6.add(Planning_Planner_info_jDesktopPane3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Planner_info_jDesktopPane7.setBackground(new java.awt.Color(255, 255, 153));
        Planning_Planner_info_jDesktopPane7.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        Planning_Planner_info_jDesktopPane7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Planning_Planner_info_jDesktopPane7MouseClicked(evt);
            }
        });
        URL_jTextField.setBounds(160, 10, 310, 25);
        Planning_Planner_info_jDesktopPane7.add(URL_jTextField, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Prerequisite_Source_ExternalSource_URL_jLabel3.setText("Pre-Processed Data URL");
        Prerequisite_Source_ExternalSource_URL_jLabel3.setBounds(10, 10, 150, 25);
        Planning_Planner_info_jDesktopPane7.add(Prerequisite_Source_ExternalSource_URL_jLabel3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jButton4.setText("Browse");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jButton4.setBounds(470, 10, 80, 25);
        Planning_Planner_info_jDesktopPane7.add(jButton4, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jButton1.setText("View");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jButton1.setBounds(550, 10, 70, 25);
        Planning_Planner_info_jDesktopPane7.add(jButton1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Planner_info_jDesktopPane7.setBounds(20, 20, 630, 50);
        Planning_Planner_info_jDesktopPane6.add(Planning_Planner_info_jDesktopPane7, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Objectives_jDesktopPane.setBackground(new java.awt.Color(255, 255, 153));
        Objectives_jDesktopPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Data Mining Objectives "));
        Objectives_jDesktopPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Objectives_jDesktopPaneMouseClicked(evt);
            }
        });

        Objectives_jTextArea.setBackground(new java.awt.Color(255, 255, 153));
        Objectives_jTextArea.setColumns(20);
        Objectives_jTextArea.setEditable(false);
        Objectives_jTextArea.setRows(5);
        jScrollPane1.setViewportView(Objectives_jTextArea);

        jScrollPane1.setBounds(10, 20, 370, 110);
        Objectives_jDesktopPane.add(jScrollPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Objectives_jDesktopPane.setBounds(670, 20, 390, 140);
        Planning_Planner_info_jDesktopPane6.add(Objectives_jDesktopPane, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Delete_Procedure_jButton.setText("Delete -");
        Delete_Procedure_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Delete_Procedure_jButtonActionPerformed(evt);
            }
        });
        Delete_Procedure_jButton.setBounds(670, 490, 390, 25);
        Planning_Planner_info_jDesktopPane6.add(Delete_Procedure_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jPanel1.setBackground(new java.awt.Color(255, 255, 204));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(null);

        Control_jDesktopPane.setBackground(new java.awt.Color(255, 255, 153));
        Control_jDesktopPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        Delete_jButton.setText("Delete");
        Delete_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Delete_jButtonActionPerformed(evt);
            }
        });
        Delete_jButton.setBounds(230, 10, 110, 23);
        Control_jDesktopPane.add(Delete_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Save_jButton.setText("Save");
        Save_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Save_jButtonActionPerformed(evt);
            }
        });
        Save_jButton.setBounds(130, 10, 100, 23);
        Control_jDesktopPane.add(Save_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Refresh_jButton.setText("Refresh");
        Refresh_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Refresh_jButtonActionPerformed(evt);
            }
        });
        Refresh_jButton.setBounds(10, 10, 120, 23);
        Control_jDesktopPane.add(Refresh_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jPanel1.add(Control_jDesktopPane);
        Control_jDesktopPane.setBounds(570, 10, 352, 42);

        New_jDesktopPane.setBackground(new java.awt.Color(255, 255, 153));
        New_jDesktopPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        New_jButton1.setText("New");
        New_jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                New_jButton1ActionPerformed(evt);
            }
        });
        New_jButton1.setBounds(10, 10, 100, 23);
        New_jDesktopPane.add(New_jButton1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jPanel1.add(New_jDesktopPane);
        New_jDesktopPane.setBounds(940, 10, 120, 42);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Planning_Planner_info_jDesktopPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 1074, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1070, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(Planning_Planner_info_jDesktopPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 524, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed

//    System.runFinalization();
    System.gc();
    }//GEN-LAST:event_formWindowClosed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
   if (this.preProcessedData==null)
       this.refresh();

     this.Resources_jList.setModel(this.getProjectResourcesModel());
    
    if ( this.preProcessedData !=null && this.preProcessedData.getOutcomeURL()!=null)
            this.URL_jTextField.setText(this.preProcessedData.getOutcomeURL().toString());
    this.populate();

    }//GEN-LAST:event_formWindowActivated

    private void formWindowDeactivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowDeactivated
    if (this.preProcessedData!=null)
        this.save();
    }//GEN-LAST:event_formWindowDeactivated

    private void Procedures_jListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_Procedures_jListValueChanged
     if (this.preProcessedData!=null && this.procedure!=null &&
            this.preProcessedData.getProcedures()!=null)

            if (this.preProcessedData.getProcedures().getProceduresList().size()>=0 &&
                this.Procedures_jList.getSelectedIndex()>=0)
            
                this.procedure= this.preProcessedData.getProcedures().getProcedure(this.Procedures_jList.getSelectedIndex());

        if ( this.preProcessedData !=null && this.preProcessedData.getOutcomeURL()!=null)
            this.URL_jTextField.setText(this.preProcessedData.getOutcomeURL().toString());
    }//GEN-LAST:event_Procedures_jListValueChanged

    private void Planning_Planner_info_jDesktopPane4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Planning_Planner_info_jDesktopPane4MouseClicked
        // TODO add your handling code here:
}//GEN-LAST:event_Planning_Planner_info_jDesktopPane4MouseClicked

    private void Add_Procedure_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Add_Procedure_jButtonActionPerformed

   if (this.procedure==null)
        this.procedure=new Procedure();

     if (this.preProcessedData==null)
         this.preProcessedData=new PreProcessedData();
     
     if (this.preProcessedData!=null && this.preProcessedData.getProcedures()==null)
        preProcessedData.setProcedures(new Procedures());
    
     if (!this.Purpose_jTextArea.getText().equals(""))
            this.procedure.setPurpose(Purpose_jTextArea.getText());
    
    if (!this.Procedure_jTextArea.getText().equals(""))
            this.procedure.setDescription(Procedure_jTextArea.getText());
    
    if (!this.URL_jTextField.getText().equals(""))        
         try {
            this.preProcessedData.setOutcomeURL(new URL(URL_jTextField.getText()));
        } catch (MalformedURLException ex) {
            //Logger.getLogger(DataPreProcessingForm.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Wrong URL Format... use file:/ for local files!");
        }

    if (this.procedure!=null && this.preProcessedData!=null && this.preProcessedData.getProcedures()!=null)
       this.preProcessedData.getProcedures().save(this.procedure);
   this.save();
   this.clear_procedure();
   this.clear_procedureForm();


   this.Procedures_jList.setModel(this.getSelectedProcedures());
   this.populateForm();



}//GEN-LAST:event_Add_Procedure_jButtonActionPerformed

    private void Planning_Planner_info_jDesktopPane6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Planning_Planner_info_jDesktopPane6MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_Planning_Planner_info_jDesktopPane6MouseClicked

    private void Planning_Planner_info_jDesktopPane3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Planning_Planner_info_jDesktopPane3MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_Planning_Planner_info_jDesktopPane3MouseClicked

    private void Resources_jListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_Resources_jListValueChanged

        if (Global.project!=null&&Global.project.getSupplements()!=null &&
                Global.project.getSupplements().getManagement()!=null &&
                Global.project.getSupplements().getManagement().getResources()!=null )
            if (this.Resources_jList.getSelectedIndex()>=0)
                this.resource=Global.project.getSupplements().getManagement().
                        getResources().getResource(this.Resources_jList.getSelectedIndex());

        this.populateForm();

    }//GEN-LAST:event_Resources_jListValueChanged
     

    
    
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

int decision1=JOptionPane.showConfirmDialog(null, "Would you like to reset the delivery of preprocessing phase?");
if (decision1==0)
{                
     if (this.preProcessedData!=null)
         this.preProcessedData.UnDeliver();                                        

    this.clear();
    this.refresh();
    this.populate();             
    this.Resources_jList.setModel(this.getProjectResourcesModel());              
    this.populateForm();                           
}                                                              

getExternalPreprocessedFile();   

//------------------------------------------------------------------------------
int decision2=JOptionPane.showConfirmDialog(null, "Would you like to \n import the preprocessed file as the \n active dataset?");
  if (decision2==0)
    {
        importExternalPreProcessedFile();                        
        metabolomicsData.getDataSet().setOutcomeURL(preProcessedData.getOutcomeURL());
        metabolomicsData.save();
        Global.activeDataSetFile=Tools.toFile(preProcessedData.getOutcomeURL());
        //FileTools.viewData(Global.activeDataSetFile.getPath()); 
   }                 

      
    }//GEN-LAST:event_jButton4ActionPerformed

    private void Planning_Planner_info_jDesktopPane7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Planning_Planner_info_jDesktopPane7MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_Planning_Planner_info_jDesktopPane7MouseClicked

    private void Selected_Resources_jListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_Selected_Resources_jListValueChanged

        if (this.procedure!=null && this.procedure.getResources()!=null )

            if (this.procedure.getResources().getResourcesList().size()>=0
            && this.Selected_Resources_jList.getSelectedIndex()>=0)

            this.resource= (Resource) this.procedure.getResources().getResourcesList().
                    get(this.Selected_Resources_jList.getSelectedIndex());
    }//GEN-LAST:event_Selected_Resources_jListValueChanged

    
    
    private void Select_Resource_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Select_Resource_jButtonActionPerformed

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
if (this.procedure==null)
   this.procedure=new Procedure();

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
if (this.procedure!=null && this.resource!=null)
{
  if (this.procedure.getResources()==null)
      this.procedure.setResources(new Resources());

  this.addResourceFunds();
  this.procedure.getResources().save(this.resource);
}

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++   
if (this.procedure!=null && this.preProcessedData!=null && this.preProcessedData.getProcedures()!=null)
   this.preProcessedData.getProcedures().save(this.procedure);

this.Selected_Resources_jList.setModel(this.getSelectedResourcesModel());
this.populateForm();
   
    }//GEN-LAST:event_Select_Resource_jButtonActionPerformed

    private void Unselect_Resource_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Unselect_Resource_jButtonActionPerformed

if (this.procedure!=null)
{
    this.deductResourceFunds();
    this.delete_resource();
}
//----------------------------------------------------------------------
this.Selected_Resources_jList.setModel(this.getSelectedResourcesModel());        
this.populateForm();

    }//GEN-LAST:event_Unselect_Resource_jButtonActionPerformed

    private void Edit_Resource_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Edit_Resource_jButtonActionPerformed
        new ManagementForm(this.resource).setVisible(true);
}//GEN-LAST:event_Edit_Resource_jButtonActionPerformed

    private void Delete_Procedure_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Delete_Procedure_jButtonActionPerformed

if (this.procedure!=null)
    this.delete_procedure();
//
this.Procedures_jList.setModel(this.getSelectedProcedures());
this.save();
this.populateForm();
}//GEN-LAST:event_Delete_Procedure_jButtonActionPerformed

    private void Delete_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Delete_jButtonActionPerformed
if (this.preProcessedData!=null)
{           
    this.preProcessedData.UnDeliver();
    //this.delete();
    this.clear();
    this.populate();
    this.populateForm();
}
        
}//GEN-LAST:event_Delete_jButtonActionPerformed

    private void Save_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Save_jButtonActionPerformed
        this.save();
}//GEN-LAST:event_Save_jButtonActionPerformed

    private void Refresh_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Refresh_jButtonActionPerformed
        this.refresh();        
}//GEN-LAST:event_Refresh_jButtonActionPerformed

    private void New_jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_New_jButton1ActionPerformed
        this.clear();
}//GEN-LAST:event_New_jButton1ActionPerformed

    private void Objectives_jDesktopPaneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Objectives_jDesktopPaneMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_Objectives_jDesktopPaneMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
//this.updatDataSet();
        
//******************************************************************************        
File file = null;
if (URL_jTextField.getText() != null && !URL_jTextField.getText().equals("")) {
    try {
        file = Tools.toFile(new URL(URL_jTextField.getText()));
    } catch (MalformedURLException ex) {
        Logger.getLogger(DataPreProcessingForm.class.getName()).log(Level.SEVERE, null, ex);
    }
}

//******************************************************************************
int decision=JOptionPane.showConfirmDialog(null, "Would you like to view the data as as a spreedsheet file?");
if (decision==0)              
  Tools.viewAnyFile(file);
else         
  FileTools.viewData(file);        

    }//GEN-LAST:event_jButton1ActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
                
 //   if (this.preProcessedData!=null)
    this.save();

    }//GEN-LAST:event_formWindowClosing

//******************************************************************************
//------------------------------------------------------------------------------    
//
//------------------------------------------------------------------------------
//******************************************************************************      
private void importExternalPreProcessedFile()
  {
     try {        
          URL localizedDataFileURL=null;
          
          if (preProcessedData!=null)
                localizedDataFileURL =preProcessedData.getOutcomeURL();

          //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
          if (localizedDataFileURL!=null)
            {
            try {

                //-------------------------------------------------------------
                 URL_jTextField.setText(localizedDataFileURL.toString());
                 if (!URL_jTextField.getText().equals(""))
                 {
                    if (this.metabolomicsData==null)
                        this.metabolomicsData=new MetabolomicsData();

                    this.metabolomicsData.setDataSet(new DataSet(localizedDataFileURL));
                 }

                 //-------------------------------------------------------------
                File localizedDataFile =Tools.toFile(localizedDataFileURL);
                Global.activeDataSetFile=localizedDataFile;

                //-------------------------------------------------------------
                FileTools.viewData(localizedDataFile.getPath());
                
                } catch (Exception ex) {
                    Logger.getLogger(DataPreProcessingForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
         }
     
  catch(Exception ex){
      Logger.getLogger(DataPreProcessingForm.class.getName()).log(Level.SEVERE, null, ex);}

    }
    
//******************************************************************************
//------------------------------------------------------------------------------    
//
//------------------------------------------------------------------------------
//******************************************************************************  
private void getExternalPreprocessedFile()
{
    File file =null;    
    if (!this.URL_jTextField.getText().equals("")) 
    {        
        try {            
            URL thisURL=new URL(this.URL_jTextField.getText());        
            String homeDirectory=Tools.toFile(thisURL).getParent();
            file= Tools.chooseFile("Choose PreProcessed Data File", null, homeDirectory, false);            
            } 
                
        catch (MalformedURLException ex) 
        {              
              file = Tools.chooseFile("Choose PreProcessed Data File",null, Global.project.getLocation(), false);
        }
    }
    else       
        file = Tools.chooseFile("Choose PreProcessed Data File",null, Global.project.getLocation(), false);                        
    
    
    
//******************************************************************************
//------------------------------------------------------------------------------    
//
//------------------------------------------------------------------------------
//******************************************************************************    
if (file!=null)
{
  this.URL_jTextField.setText(Tools.toURL(file).toString());
  this.save();
  int decision=JOptionPane.showConfirmDialog(null, "Would you like to import the file to the temp folder as a local copy ?");
  if (decision==0)
    {
      try {
          URL selectedUrl = new URL(this.URL_jTextField.getText());
          URL newUrl = Tools.copyFileToTemp(selectedUrl);

          if (newUrl!=null)
              this.URL_jTextField.setText(newUrl.toString());

          this.save();
        }
        catch (MalformedURLException ex) {
           Logger.getLogger(DataExplorationForm.class.getName()).log(Level.SEVERE, null, ex);
        }
   }    
}

}

//-----------------------------------------------------------------------------
//*****************************************************************************
//                     Resources Funds Calculations
//*****************************************************************************
//-----------------------------------------------------------------------------
private void addResourceFunds()
{
if (Global.project!=null &&
                Global.project.getSupplements()!=null &&
                Global.project.getSupplements().getManagement()!=null &&
                Global.project.getSupplements().getManagement().getConstraint()!=null)
                {
                      Double curruntUsedFunds=Global.project.getSupplements().getManagement().getConstraint().getUsedFunds();
                      Double totalFunds=Global.project.getSupplements().getManagement().getConstraint().getTotalFunds();

                      Double resourceCost=0.0;

                      if (this.resource!=null)
                              resourceCost= this.resource.getCost();

                      Double newUsedFunds=curruntUsedFunds+resourceCost;

                      if (newUsedFunds>totalFunds)
                          JOptionPane.showMessageDialog(null, "Exceeded the project Total Funds,"
                                                           +" Used Funds = "+newUsedFunds
                                                           +" Project Planned Total Funds = "+totalFunds);

                     Global.project.getSupplements().getManagement().getConstraint().setUsedFunds(newUsedFunds);

                }
}



//******************************************************************************
//------------------------------------------------------------------------------    
//
//------------------------------------------------------------------------------
//******************************************************************************  *
private void deductResourceFunds()
{
 //------------------------------------------------------------------
            if (Global.project!=null &&
                Global.project.getSupplements()!=null &&
                Global.project.getSupplements().getManagement()!=null &&
                Global.project.getSupplements().getManagement().getConstraint()!=null)
                {
                      Double curruntUsedFunds=Global.project.getSupplements().getManagement().getConstraint().getUsedFunds();
                      Double totalFunds=Global.project.getSupplements().getManagement().getConstraint().getTotalFunds();

                      Double resourceCost=0.0;

                      if (this.resource!=null)
                          resourceCost= this.resource.getCost();

                      Double newUsedFunds=curruntUsedFunds-resourceCost;

                      if (newUsedFunds>totalFunds)
                          JOptionPane.showMessageDialog(null, "Exceeded the project Total Funds,"
                                                           +" Used Funds = "+newUsedFunds
                                                           +" Project Planned Total Funds = "+totalFunds);

                     Global.project.getSupplements().getManagement().getConstraint().setUsedFunds(newUsedFunds);

                }
}


//DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
//****************************************************************************
//                              Delete Source
//DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
//****************************************************************************
 private void delete_procedure()
 {
    if (this.preProcessedData!=null &&
        this.preProcessedData.getProcedures()!=null &&
        this.procedure!=null)
    {
        if (this.preProcessedData.getProcedures().delete(this.procedure)==0)        
            this.Procedures_jList.setModel(this.getSelectedProcedures());        
     
    }    
 }



//DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
//****************************************************************************
//                              Delete Plan
//DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
//****************************************************************************
 private void delete()
 {    
    if (this.preProcessedData!=null && Global.currentPhase.getResult().getSupplementDeliveries()!=null)
    {
      int index= Global.currentPhase.getResult().getSupplementDeliveries().getDeliveriesList().indexOf(this.preProcessedData);
          if (Global.currentPhase.getResult().getSupplementDeliveries().delete(this.preProcessedData)==0)
        {
            if (Global.currentPhase.getResult().getSupplementDeliveries().getDeliveriesList().size()>0)
            {                
                if (index>0 && Global.currentPhase.getResult().getSupplementDeliveries().getDeliveriesList().get(index-1)!=null)
                    this.preProcessedData = (PreProcessedData) Global.currentPhase.getResult().getSupplementDeliveries().getDeliveriesList().get(index-1);

                else if(index==0)
                    this.preProcessedData = (PreProcessedData) Global.currentPhase.getResult().getSupplementDeliveries().getDeliveriesList().get(index);

                this.refresh();
                this.populate();
            }
            else
                this.clear();
        }
      this.refresh();
      this.populate();
     this.populateForm();     
 }
 
 }

//******************************************************************************
//------------------------------------------------------------------------------    
//
//------------------------------------------------------------------------------
//******************************************************************************  
private void populate()
    {
     this.Resources_jList.setModel(this.getProjectResourcesModel());
     this.Procedures_jList.setModel(this.getSelectedProcedures());
     this.Selected_Resources_jList.setModel(this.getSelectedResourcesModel());
     if ( this.preProcessedData !=null && this.preProcessedData.getOutcomeURL()!=null)
          this.URL_jTextField.setText(this.preProcessedData.getOutcomeURL().toString());
     this.populateForm();
    }



//RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR
//****************************************************************************
//                              Refresh
//****************************************************************************
//RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR

 private void refresh()
 {
Result<PreProcessedData> preProcessedDataResult=new Result<PreProcessedData>();
if (Global.currentPhase!=null &&
    Global.currentPhase.getResult()!=null)
{
    preProcessedDataResult=Global.currentPhase.getResult();
    if (preProcessedDataResult.getMainDelivery()!=null)
        this.preProcessedData= (PreProcessedData) preProcessedDataResult.getMainDelivery();
}

else
    this.preProcessedData=new PreProcessedData();

//*****************************************************************************
 if (  Global.project.getProcess()!=null &&
    Global.project.getProcess().getResults()!=null &&    
    Global.project.getProcess().getResults().getResult(1)!=null)
{
     DataMiningObjective processObjective=null;
       if (Global.project.getProcess().getResults().getResult(1).getMainDelivery()!=null)
            processObjective = (DataMiningObjective) Global.project.getProcess().getResults().getResult(1).getMainDelivery();
       else  if (Global.project.getProcess().getResults().getResult(1).getSupplementDeliveries()!=null
              && Global.project.getProcess().getResults().getResult(1).getSupplementDeliveries().getFirst()!=null)
                    processObjective= (DataMiningObjective) Global.project.getProcess().getResults().getResult(1).getSupplementDeliveries().getFirst();
     if (processObjective!=null)
         this.Objectives_jTextArea.setText(processObjective.toMyString());    
}

 this.populate();
}

 
//------------------------------------------------------------------------------
//******************************************************************************
//                        Clear PreProcessing
//******************************************************************************
 //-----------------------------------------------------------------------------
 private void clear()
{
     this.preProcessedData=null;
     this.clear_procedure();
      this.clear_form();
      this.populate();
 }


//CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
//                         Clear Objectives Form
//CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
 private void clear_form()
{
     this.URL_jTextField.setText("");
     this.clear_procedureForm();
     this.populateForm();

 }
 
//PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
//******************************************************************************
//                             Populate
//******************************************************************************
//PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
private void populateForm()
{
    this.repaint();
    this.pack();
 }



//CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
//****************************************************************************
//                     Clear Source Prerequisite & Source
//****************************************************************************
 //CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

 private void clear_procedure()
{
     this.clear_procedureForm();
     this.procedure=new Procedure();
 }


 //CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
 //                         Clear Objectives Form
 //CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
 private void clear_procedureForm()
 {
     this.Purpose_jTextArea.setText("");
     this.Procedure_jTextArea.setText("");
     this.Selected_Resources_jList.setModel(this.getSelectedResourcesModel());
     this.Procedures_jList.setModel(this.getSelectedProcedures());
     //
     this.populateForm();
 }

 //SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
//****************************************************************************
//                              Save Prerequisite
//****************************************************************************
//SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
 private void save()
 {     
    if (!this.URL_jTextField.getText().equals("") )
    {
         //-----------------------------------------------------------------            
         if (this.preProcessedData==null)
             this.preProcessedData=new PreProcessedData();

         //-----------------------------------------------------------------
         try
          {
            this.preProcessedData.setOutcomeURL(new URL(URL_jTextField.getText()));
          } catch (MalformedURLException ex) {
            JOptionPane.showMessageDialog(null, "You must entear avalid URL ... used file:/ prefix for local files!!!");
           this.preProcessedData.setOutcomeURL(null);
          }        
    }
    
    //--------------------------------------------------------------------------
    if (this.preProcessedData!=null)
        this.preProcessedData.deliverAsMain();        
    }

 //DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
//****************************************************************************
//                              Delete Resource
//DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
//****************************************************************************
 private void delete_resource()
{
if (this.procedure!=null &&
    this.procedure.getResources()!=null &&
    this.procedure.getResources().getResourcesList().size()>0)
    {
        int index= this.procedure.getResources().getResourcesList().indexOf(this.resource);
        if (this.procedure.getResources().delete(this.resource)==0);
        {
            if (this.procedure.getResources().getResourcesList().size()>0)
            {
                if (index==0)
                    this.resource = this.procedure.getResources().getResource(index);
                else if(index>0)
                    this.resource = this.procedure.getResources().getResource(index-1);

            }
        }
        // setResult process objective
 }
}


    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    if (Global.project == null) {
                        Global.project = new Project();
                    }
                    if (Global.project.getProcess() == null) {
                        Global.project.setProcess(new Process());
                    }
                    Global.project.getProcess().setVersion(1);
                    if (Global.currentPhase == null) {
                        Global.currentPhase = new Phase("Objectives Definition");
                    }
                    new DataPreProcessingForm().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(DataPreProcessingForm.class.getName()).log(Level.SEVERE, null, ex);
                } catch (Exception ex) {
                    Logger.getLogger(DataPreProcessingForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Add_Procedure_jButton;
    private javax.swing.JDesktopPane Control_jDesktopPane;
    private javax.swing.JButton Delete_Procedure_jButton;
    private javax.swing.JButton Delete_jButton;
    private javax.swing.JButton Edit_Resource_jButton;
    private javax.swing.JButton New_jButton1;
    private javax.swing.JDesktopPane New_jDesktopPane;
    private javax.swing.JDesktopPane Objectives_jDesktopPane;
    private javax.swing.JTextArea Objectives_jTextArea;
    private javax.swing.JDesktopPane Planning_Objectives_Control_jDesktopPane1;
    private javax.swing.JDesktopPane Planning_Objectives_Control_jDesktopPane10;
    private javax.swing.JLabel Planning_Planner_Name_jLabel8;
    private javax.swing.JLabel Planning_Planner_Name_jLabel9;
    private javax.swing.JDesktopPane Planning_Planner_info_jDesktopPane3;
    private javax.swing.JDesktopPane Planning_Planner_info_jDesktopPane4;
    private javax.swing.JDesktopPane Planning_Planner_info_jDesktopPane6;
    private javax.swing.JDesktopPane Planning_Planner_info_jDesktopPane7;
    private javax.swing.JLabel Prerequisite_Source_ExternalSource_URL_jLabel3;
    private javax.swing.JTextArea Procedure_jTextArea;
    private javax.swing.JList Procedures_jList;
    private javax.swing.JTextArea Purpose_jTextArea;
    private javax.swing.JButton Refresh_jButton;
    private javax.swing.JList Resources_jList;
    private javax.swing.JButton Save_jButton;
    private javax.swing.JButton Select_Resource_jButton;
    private javax.swing.JList Selected_Resources_jList;
    private javax.swing.JTextField URL_jTextField;
    private javax.swing.JButton Unselect_Resource_jButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JMenuBar menuBar;
    // End of variables declaration//GEN-END:variables


//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
//                       Get Project Resources Model
//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
public  DefaultComboBoxModel getProjectResourcesModel()
{
  DefaultComboBoxModel dcm=null;
  ArrayList<Resource> resourcesList=new ArrayList<Resource>();
  String[] resourcesArrayNames = null;
  if (Global.project!=null
          && Global.project.getSupplements()!=null
          && Global.project.getSupplements().getManagement()!=null )
  {
      if (  Global.project.getSupplements().getManagement().getResources()!=null
              && Global.project.getSupplements().getManagement().getResources().getResourcesList().size()>0)
      {
        resourcesList=Global.project.getSupplements().getManagement().getResources().getResourcesList();
        int size=resourcesList.size();
        resourcesArrayNames = new String[size];
        int i=0;
        for (Object o:resourcesList)
            {
              Resource thisResource=(Resource) o;
              String result="";
              if (thisResource!=null && thisResource.getResourceType()!=null)
                  result=thisResource.getResourceType().toString()+"  ";
              if (thisResource!=null && thisResource.getDescription()!=null)
                   result=result+ thisResource.getDescription();
              if (thisResource!=null && thisResource.getRequirements()!=null)
                   result=result+" Requirements: "+ thisResource.getRequirements().getRequirementsList().toString();
              resourcesArrayNames[i]=result;
              i=i+1;
             }
        dcm=new DefaultComboBoxModel(resourcesArrayNames);
        return dcm;
        }
     else
      {
        String names[] ={"<No resource available yet>"};
        dcm=new DefaultComboBoxModel(names);
        return dcm;
      }
  }
 else
    {
    String names[] ={"<No resource available yet>"};
    dcm=new DefaultComboBoxModel(names);
     return dcm;
    }
 }

//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
//                       Get Planned Resources Model
//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
public  DefaultComboBoxModel getSelectedResourcesModel()
{
  DefaultComboBoxModel dcm=null;
  ArrayList<Resource> resourcesList=new ArrayList<Resource>();
  String[] resourcesArrayNames = null;
 if (this.procedure!=null &&
     this.procedure.getResources()!=null )
  {
      if (this.procedure.getResources().getResourcesList().size()>0)
      {
        resourcesList=this.procedure.getResources().getResourcesList();
        int size=resourcesList.size();
        resourcesArrayNames = new String[size];
        int i=0;
        for (Object o:resourcesList)
            {
              Resource thisResource=(Resource) o;
              String result="";
              if (thisResource.getResourceType()!=null)
                  result=thisResource.getResourceType().toString()+"  ";
              if (thisResource.getDescription()!=null)
                   result=result+ thisResource.getDescription();
              if (thisResource!=null && thisResource.getRequirements()!=null)
                   result=result+" Requirements: "+thisResource.getRequirements().getRequirementsList().toString();
              resourcesArrayNames[i]=result;
              i=i+1;
             }
        dcm=new DefaultComboBoxModel(resourcesArrayNames);
        return dcm;
        }
     else
      {
        String names[] ={"<No selected resource yet>"};
        dcm=new DefaultComboBoxModel(names);
        return dcm;
      }
  }
 else
    {
    String names[] ={"<No selected resource yet>"};
    dcm=new DefaultComboBoxModel(names);
     return dcm;
    }
 }


//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
//                       Get Project Remeasures Model
//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
public  DefaultComboBoxModel getSelectedProcedures()
{ 
  DefaultComboBoxModel dcm=null;
  ArrayList<Procedure> proceduresList=new ArrayList<Procedure>();
  String[] procedureArrayNames = null;
  if (this.preProcessedData!=null &&this.preProcessedData.getProcedures()!=null)
      
  {
      if ( this.preProcessedData.getProcedures().getProceduresList().size()>0)
      {
        proceduresList=this.preProcessedData.getProcedures().getProceduresList();
        int size=proceduresList.size();
        procedureArrayNames = new String[size];
        int i=0;
        for (Object o:proceduresList)
            {
            String result="";
            Procedure  thisProcedure=(Procedure) o;
                  result=thisProcedure.toString();
              procedureArrayNames[i]=result;
              i=i+1;
              //--------------------------------------------------------------
             }
        dcm=new DefaultComboBoxModel(procedureArrayNames);
        return dcm;
        }
     else
      {
        String names[] ={"<No expected outcome selected yet>"};
        dcm=new DefaultComboBoxModel(names);
        return dcm;
      }
  }
 else
    {
    String names[] ={"<No expected outcome selected yet>"};
    dcm=new DefaultComboBoxModel(names);
     return dcm;
    }
 }


}
