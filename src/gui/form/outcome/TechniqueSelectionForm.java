/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PerformingForm.java
 *
 * Created on 04-Oct-2010, 12:08:43
 */

package gui.form.outcome;

import global.Config;
import global.Global;
import gui.form.input.StudyForm;
import gui.form.supplement.ManagementForm;
import gui.form.supplement.SourceForm;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import process_model.general.SuccessCriteria;
import process_model.issue.measurement.BooleanMeasure;
import process_model.issue.measurement.BooleanMeasureResult;
import process_model.phase.delivery.selection.Acheivability;
import process_model.phase.delivery.selection.ModelingTechniqueSelection;
import process_model.issue.measurement.Measure;
import process_model.issue.measurement.Measure.MeasureType;
import process_model.issue.measurement.MeasureResult;
import process_model.issue.measurement.Measures;
import process_model.issue.measurement.MeasurmentOutcome;
import process_model.issue.measurement.MeasurmentOutcomes;
import process_model.issue.measurement.QualitativeMeasure;
import process_model.issue.measurement.QualitativeMeasureResult;
import process_model.issue.measurement.QuantitativeMeasure;
import process_model.issue.measurement.QuantitativeMeasureResult;
import process_model.issue.tracibility.ExternalSource;
import process_model.issue.tracibility.HumanSource;
import process_model.issue.tracibility.InternalSource;
import process_model.issue.tracibility.Source;
import process_model.issue.tracibility.Sources;
import process_model.phase.Phase;
import process_model.process.result.Result;
import process_model.phase.delivery.process_objective.DataMiningObjective;
import process_model.supplement.management.fesability.Feasibility;
import process_model.supplement.management.resource.Resource;
import process_model.supplement.management.resource.Resources;
import project.Project;
import process_model.process.Process;
import toolbox.Tools;
/**
 *
 * @author amb04
 */
public class TechniqueSelectionForm extends javax.swing.JFrame { 
private ModelingTechniqueSelection selectionJustification=null;
private Resource resource;
private Source source=null;
private  String scaleCategory=null;
private QualitativeMeasure qualitativeMeasure=new QualitativeMeasure();
private int selectedIndex=0;
//
String names[];
private Measure measure=null;
private MeasurmentOutcome expectedOutcome =null;

//AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
private String approaches[]={"",
    "Hypotheis-Driven",
    "Data-Driven","Other"};
private String tasks[]={"",
    "Association",                           //1
    "Classification",                        //2
    "Correlation Aanalysis",                 //3
    "Dimentionality Reduction",              //4
    "Feature Extraction and Analysis",       //5
    "Hypotheisis Testing",                   //6 
    "Regression",                            //7
    "Segmentation",                          //8    
    "Other"};                                //9    
private String goals[]={"","DESCRIPTION",
    "DISCOVERY",
    "PREDICTION",
    "VERIFICATION",
    "OTHER"};
    
    private boolean flag;

//CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
public TechniqueSelectionForm() {
     initComponents();     
     this.refresh_selection();
     this.populate_selection();
     this.Boolean_jCheckBox.setVisible(false);
     this.Result_jTextField.setVisible(false);

     this.setTitle("Technique Selection: "+Global.currentPhase.getTitle());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Performing_jLayeredPane = new javax.swing.JLayeredPane();
        Performing_Details_jDesktopPane_jDesktopPane = new javax.swing.JDesktopPane();
        Performing_Details_TabbedPane = new javax.swing.JTabbedPane();
        Performing_Performer_jDesktopPane = new javax.swing.JLayeredPane();
        Performing_Performer_jDesktopPane1 = new javax.swing.JDesktopPane();
        Planning_Planner_jDesktopPane = new javax.swing.JDesktopPane();
        Planning_Planner_info_jDesktopPane = new javax.swing.JDesktopPane();
        Planning_Planner_Name_jLabel = new javax.swing.JLabel();
        Criteria_jTextField = new javax.swing.JTextField();
        Boolean_Measure_Namej_TextField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane9 = new javax.swing.JScrollPane();
        Selected_Measures_jList = new javax.swing.JList();
        Planning_Planner_info_jDesktopPane2 = new javax.swing.JDesktopPane();
        unit_jLabel = new javax.swing.JLabel();
        Unit_jTextField = new javax.swing.JTextField();
        Planning_Planner_Name_jLabel5 = new javax.swing.JLabel();
        Min_jTextField = new javax.swing.JTextField();
        Planning_Planner_Name_jLabel6 = new javax.swing.JLabel();
        Max_jTextField = new javax.swing.JTextField();
        Quantitative_Measure_Name_jTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        Planning_Planner_info_jDesktopPane3 = new javax.swing.JDesktopPane();
        Planning_Planner_Name_jLabel7 = new javax.swing.JLabel();
        Category_jTextField = new javax.swing.JTextField();
        Scale_Add_jButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        scale_jList = new javax.swing.JList();
        Qualitative_Measure_Name_jTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        Scale_Delete_jButton = new javax.swing.JButton();
        Solution_Sources_Edit_jButton2 = new javax.swing.JButton();
        Planning_Objectives_Control_jDesktopPane7 = new javax.swing.JDesktopPane();
        Add_Quantitative_Measure_jButton = new javax.swing.JButton();
        Planning_Objectives_Control_jDesktopPane8 = new javax.swing.JDesktopPane();
        Planning_Planner_info_jDesktopPane4 = new javax.swing.JDesktopPane();
        Measure_Name_jTextField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        Add_Boolean_Measure_jButton = new javax.swing.JButton();
        Add_Qualitative_Measuret_jButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        Planning_Planner_jDesktopPane1 = new javax.swing.JDesktopPane();
        Planning_Planner_info_jDesktopPane1 = new javax.swing.JDesktopPane();
        Result_jTextField = new javax.swing.JTextField();
        Boolean_jCheckBox = new javax.swing.JCheckBox();
        Scale_jComboBox = new javax.swing.JComboBox();
        jScrollPane10 = new javax.swing.JScrollPane();
        Measurments_jList = new javax.swing.JList();
        Solution_Sources_Edit_jButton3 = new javax.swing.JButton();
        Planning_CustomisedPlanItem_jLabel1 = new javax.swing.JLabel();
        jScrollPane69 = new javax.swing.JScrollPane();
        SuccessCriteria_jTextPane = new javax.swing.JTextPane();
        Planning_Planner_Name_jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Selected_ExpectedMeasurmentOutcomes_jList = new javax.swing.JList();
        Solution_Sources_Select_jButton6 = new javax.swing.JButton();
        Planning_Objectives_Control_jDesktopPane2 = new javax.swing.JDesktopPane();
        Reporting_Customised_jDesktopPane7 = new javax.swing.JDesktopPane();
        Document_jButton = new javax.swing.JButton();
        StudyAims_jButton = new javax.swing.JButton();
        New_jButton6 = new javax.swing.JButton();
        Reporting_Customised_jDesktopPane8 = new javax.swing.JDesktopPane();
        jDesktopPane50 = new javax.swing.JDesktopPane();
        RequirmentsAvailable_jCheckBox = new javax.swing.JCheckBox();
        jDesktopPane51 = new javax.swing.JDesktopPane();
        AcheivingObjectives_jCheckBox = new javax.swing.JCheckBox();
        jDesktopPane45 = new javax.swing.JDesktopPane();
        RequireIntensiveAcclimatisation_jCheckBox = new javax.swing.JCheckBox();
        jDesktopPane52 = new javax.swing.JDesktopPane();
        SuitableForDataDistribution_jCheckBox = new javax.swing.JCheckBox();
        Reporting_Customised_jDesktopPane9 = new javax.swing.JDesktopPane();
        jDesktopPane53 = new javax.swing.JDesktopPane();
        SuitableForDataNature_jCheckBox = new javax.swing.JCheckBox();
        jDesktopPane46 = new javax.swing.JDesktopPane();
        SuitableForDataTypes_jCheckBox = new javax.swing.JCheckBox();
        jDesktopPane48 = new javax.swing.JDesktopPane();
        SuitableForDataSize_jCheckBox = new javax.swing.JCheckBox();
        jDesktopPane54 = new javax.swing.JDesktopPane();
        SuitableForDataQuality_jCheckBox = new javax.swing.JCheckBox();
        jLayeredPane39 = new javax.swing.JLayeredPane();
        Planning_Resource_jDesktopPane = new javax.swing.JDesktopPane();
        Planning_Objectives_Control_jDesktopPane1 = new javax.swing.JDesktopPane();
        Resources_Select_jButton = new javax.swing.JButton();
        Resources_UnSelect_jButton = new javax.swing.JButton();
        Resource_Edit_jButton = new javax.swing.JButton();
        Reporting_Customised_jDesktopPane3 = new javax.swing.JDesktopPane();
        Reporting_Customised_jDesktopPane4 = new javax.swing.JDesktopPane();
        RemainingTime_jTextField = new javax.swing.JTextField();
        Project_Constraint_RemainingDuration_jLabel1 = new javax.swing.JLabel();
        Reporting_Customised_jDesktopPane6 = new javax.swing.JDesktopPane();
        Project_Constraint_RemainingFunds_jLabel1 = new javax.swing.JLabel();
        RemainingFunds_jTextField = new javax.swing.JTextField();
        jScrollPane7 = new javax.swing.JScrollPane();
        Resources_jList = new javax.swing.JList();
        Reporting_Customised_jDesktopPane5 = new javax.swing.JDesktopPane();
        jScrollPane11 = new javax.swing.JScrollPane();
        Selected_Resources_jList = new javax.swing.JList();
        Resource_jDesktopPane = new javax.swing.JDesktopPane();
        PerformedActivityDuration_jLabel1 = new javax.swing.JLabel();
        Duration_jTextField = new javax.swing.JTextField();
        Feasible_jCheckBox = new javax.swing.JCheckBox();
        Performing_Justification_jLayeredPane = new javax.swing.JLayeredPane();
        jPanel2 = new javax.swing.JPanel();
        Justification_Source_jDesktopPane = new javax.swing.JDesktopPane();
        Justification_Sources_Control_jDesktopPane = new javax.swing.JDesktopPane();
        Justification_Sources_Select_jButton = new javax.swing.JButton();
        Sources_UnSelect_jButton = new javax.swing.JButton();
        Justification_Sources_Edit_jButton = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        Sources_jList = new javax.swing.JList();
        jScrollPane6 = new javax.swing.JScrollPane();
        Selected_Sources_jList = new javax.swing.JList();
        Objectives_jDesktopPane = new javax.swing.JDesktopPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        Objectives_jTextArea = new javax.swing.JTextArea();
        Navigation_jDesktopPane = new javax.swing.JDesktopPane();
        Last_jButton = new javax.swing.JButton();
        Next_jButton = new javax.swing.JButton();
        Previous_jButton = new javax.swing.JButton();
        First_jButton = new javax.swing.JButton();
        Planning_CustomisedPlan_jDesktopPane = new javax.swing.JDesktopPane();
        Performed_Plan_jPanel = new javax.swing.JPanel();
        FinalSelection_jCheckBox = new javax.swing.JCheckBox();
        jScrollPane68 = new javax.swing.JScrollPane();
        Algorithm_jTextPane = new javax.swing.JTextPane();
        Technique_jLabel = new javax.swing.JLabel();
        Planning_Planner_Role_jLabel1 = new javax.swing.JLabel();
        Approaches_jComboBox = new javax.swing.JComboBox();
        Planning_Planner_Role_jLabel2 = new javax.swing.JLabel();
        Goals_jComboBox = new javax.swing.JComboBox();
        Planning_Planner_Role_jLabel3 = new javax.swing.JLabel();
        Tasks_jComboBox = new javax.swing.JComboBox();
        Planning_Planner_Role_jLabel4 = new javax.swing.JLabel();
        Planning_CustomisedPlanItem_jLabel2 = new javax.swing.JLabel();
        jScrollPane71 = new javax.swing.JScrollPane();
        Justification_jTextPane = new javax.swing.JTextPane();
        Supervised_jCheckBox = new javax.swing.JCheckBox();
        Techniques_jComboBox = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        Technique_jTextField = new javax.swing.JTextField();
        Control_jDesktopPane = new javax.swing.JDesktopPane();
        Delete_jButton = new javax.swing.JButton();
        Save_jButton = new javax.swing.JButton();
        Refresh_jButton = new javax.swing.JButton();
        New_jDesktopPane = new javax.swing.JDesktopPane();
        New_jButton1 = new javax.swing.JButton();
        Add_jButton1 = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowDeactivated(java.awt.event.WindowEvent evt) {
                formWindowDeactivated(evt);
            }
        });

        Performing_jLayeredPane.setBackground(new java.awt.Color(255, 255, 204));
        Performing_jLayeredPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        Performing_Details_jDesktopPane_jDesktopPane.setBackground(new java.awt.Color(255, 255, 204));
        Performing_Details_jDesktopPane_jDesktopPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        Performing_Performer_jDesktopPane1.setBackground(new java.awt.Color(255, 255, 204));
        Performing_Performer_jDesktopPane1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        Planning_Planner_jDesktopPane.setBackground(new java.awt.Color(255, 255, 204));
        Planning_Planner_jDesktopPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        Planning_Planner_info_jDesktopPane.setBackground(new java.awt.Color(255, 255, 102));
        Planning_Planner_info_jDesktopPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        Planning_Planner_info_jDesktopPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Planning_Planner_info_jDesktopPaneMouseClicked(evt);
            }
        });

        Planning_Planner_Name_jLabel.setText("Criteria");
        Planning_Planner_Name_jLabel.setBounds(10, 40, 160, 20);
        Planning_Planner_info_jDesktopPane.add(Planning_Planner_Name_jLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Criteria_jTextField.setBackground(new java.awt.Color(255, 255, 204));
        Criteria_jTextField.setBounds(60, 40, 250, 20);
        Planning_Planner_info_jDesktopPane.add(Criteria_jTextField, javax.swing.JLayeredPane.DEFAULT_LAYER);
        Boolean_Measure_Namej_TextField.setBounds(60, 10, 250, 22);
        Planning_Planner_info_jDesktopPane.add(Boolean_Measure_Namej_TextField, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel4.setText("Name");
        jLabel4.setBounds(14, 10, 140, 20);
        Planning_Planner_info_jDesktopPane.add(jLabel4, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Planner_info_jDesktopPane.setBounds(10, 290, 320, 70);
        Planning_Planner_jDesktopPane.add(Planning_Planner_info_jDesktopPane, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Selected_Measures_jList.setBorder(javax.swing.BorderFactory.createTitledBorder("Objectives Measurements"));
        Selected_Measures_jList.setModel(getSelectedMeasuresModel());
        Selected_Measures_jList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                Selected_Measures_jListValueChanged(evt);
            }
        });
        jScrollPane9.setViewportView(Selected_Measures_jList);

        jScrollPane9.setBounds(410, 10, 550, 400);
        Planning_Planner_jDesktopPane.add(jScrollPane9, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Planner_info_jDesktopPane2.setBackground(new java.awt.Color(255, 255, 102));
        Planning_Planner_info_jDesktopPane2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        Planning_Planner_info_jDesktopPane2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Planning_Planner_info_jDesktopPane2MouseClicked(evt);
            }
        });

        unit_jLabel.setText("Unit");
        unit_jLabel.setBounds(10, 40, 80, 20);
        Planning_Planner_info_jDesktopPane2.add(unit_jLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Unit_jTextField.setBackground(new java.awt.Color(255, 255, 204));
        Unit_jTextField.setBounds(50, 40, 70, 20);
        Planning_Planner_info_jDesktopPane2.add(Unit_jTextField, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Planner_Name_jLabel5.setText("Min");
        Planning_Planner_Name_jLabel5.setBounds(130, 40, 60, 20);
        Planning_Planner_info_jDesktopPane2.add(Planning_Planner_Name_jLabel5, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Min_jTextField.setBackground(new java.awt.Color(255, 255, 204));
        Min_jTextField.setBounds(160, 40, 50, 20);
        Planning_Planner_info_jDesktopPane2.add(Min_jTextField, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Planner_Name_jLabel6.setText("Max");
        Planning_Planner_Name_jLabel6.setBounds(230, 40, 50, 20);
        Planning_Planner_info_jDesktopPane2.add(Planning_Planner_Name_jLabel6, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Max_jTextField.setBackground(new java.awt.Color(255, 255, 204));
        Max_jTextField.setBounds(260, 40, 50, 20);
        Planning_Planner_info_jDesktopPane2.add(Max_jTextField, javax.swing.JLayeredPane.DEFAULT_LAYER);
        Quantitative_Measure_Name_jTextField.setBounds(50, 10, 260, 22);
        Planning_Planner_info_jDesktopPane2.add(Quantitative_Measure_Name_jTextField, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel3.setText("Name");
        jLabel3.setBounds(10, 10, 80, 16);
        Planning_Planner_info_jDesktopPane2.add(jLabel3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Planner_info_jDesktopPane2.setBounds(10, 10, 320, 70);
        Planning_Planner_jDesktopPane.add(Planning_Planner_info_jDesktopPane2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Planner_info_jDesktopPane3.setBackground(new java.awt.Color(255, 255, 102));
        Planning_Planner_info_jDesktopPane3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        Planning_Planner_info_jDesktopPane3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Planning_Planner_info_jDesktopPane3MouseClicked(evt);
            }
        });

        Planning_Planner_Name_jLabel7.setText("Scale Category");
        Planning_Planner_Name_jLabel7.setBounds(10, 40, 130, 20);
        Planning_Planner_info_jDesktopPane3.add(Planning_Planner_Name_jLabel7, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Category_jTextField.setBackground(new java.awt.Color(255, 255, 204));
        Category_jTextField.setBounds(110, 40, 200, 20);
        Planning_Planner_info_jDesktopPane3.add(Category_jTextField, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Scale_Add_jButton.setText("Add +");
        Scale_Add_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Scale_Add_jButtonActionPerformed(evt);
            }
        });
        Scale_Add_jButton.setBounds(220, 60, 90, 20);
        Planning_Planner_info_jDesktopPane3.add(Scale_Add_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        scale_jList.setBackground(new java.awt.Color(255, 255, 204));
        scale_jList.setBorder(javax.swing.BorderFactory.createTitledBorder("Scale"));
        scale_jList.setModel(getSelectedScaleModel());
        scale_jList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        scale_jList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                scale_jListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(scale_jList);

        jScrollPane2.setBounds(10, 80, 300, 60);
        Planning_Planner_info_jDesktopPane3.add(jScrollPane2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        Qualitative_Measure_Name_jTextField.setBounds(110, 10, 200, 22);
        Planning_Planner_info_jDesktopPane3.add(Qualitative_Measure_Name_jTextField, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel2.setText("Name");
        jLabel2.setBounds(10, 10, 130, 20);
        Planning_Planner_info_jDesktopPane3.add(jLabel2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Scale_Delete_jButton.setText("Delete -");
        Scale_Delete_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Scale_Delete_jButtonActionPerformed(evt);
            }
        });
        Scale_Delete_jButton.setBounds(10, 140, 300, 20);
        Planning_Planner_info_jDesktopPane3.add(Scale_Delete_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Planner_info_jDesktopPane3.setBounds(10, 100, 320, 170);
        Planning_Planner_jDesktopPane.add(Planning_Planner_info_jDesktopPane3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Solution_Sources_Edit_jButton2.setText("Delete");
        Solution_Sources_Edit_jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Solution_Sources_Edit_jButton2ActionPerformed(evt);
            }
        });
        Solution_Sources_Edit_jButton2.setBounds(410, 410, 550, 20);
        Planning_Planner_jDesktopPane.add(Solution_Sources_Edit_jButton2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Objectives_Control_jDesktopPane7.setBackground(new java.awt.Color(255, 255, 204));

        Add_Quantitative_Measure_jButton.setText("+>");
        Add_Quantitative_Measure_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Add_Quantitative_Measure_jButtonActionPerformed(evt);
            }
        });
        Add_Quantitative_Measure_jButton.setBounds(0, 0, 70, 20);
        Planning_Objectives_Control_jDesktopPane7.add(Add_Quantitative_Measure_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Objectives_Control_jDesktopPane7.setBounds(330, 10, 70, 20);
        Planning_Planner_jDesktopPane.add(Planning_Objectives_Control_jDesktopPane7, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Objectives_Control_jDesktopPane8.setBackground(new java.awt.Color(255, 255, 204));
        Planning_Objectives_Control_jDesktopPane8.setBounds(330, 90, 70, 20);
        Planning_Planner_jDesktopPane.add(Planning_Objectives_Control_jDesktopPane8, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Planner_info_jDesktopPane4.setBackground(new java.awt.Color(255, 255, 102));
        Planning_Planner_info_jDesktopPane4.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        Planning_Planner_info_jDesktopPane4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Planning_Planner_info_jDesktopPane4MouseClicked(evt);
            }
        });
        Measure_Name_jTextField.setBounds(60, 10, 250, 22);
        Planning_Planner_info_jDesktopPane4.add(Measure_Name_jTextField, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel5.setText("name");
        jLabel5.setBounds(14, 10, 100, 16);
        Planning_Planner_info_jDesktopPane4.add(jLabel5, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Planner_info_jDesktopPane4.setBounds(10, 380, 320, 40);
        Planning_Planner_jDesktopPane.add(Planning_Planner_info_jDesktopPane4, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Add_Boolean_Measure_jButton.setText("+>");
        Add_Boolean_Measure_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Add_Boolean_Measure_jButtonActionPerformed(evt);
            }
        });
        Add_Boolean_Measure_jButton.setBounds(330, 290, 70, 20);
        Planning_Planner_jDesktopPane.add(Add_Boolean_Measure_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Add_Qualitative_Measuret_jButton.setText("+>");
        Add_Qualitative_Measuret_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Add_Qualitative_Measuret_jButtonActionPerformed(evt);
            }
        });
        Add_Qualitative_Measuret_jButton.setBounds(330, 110, 70, 20);
        Planning_Planner_jDesktopPane.add(Add_Qualitative_Measuret_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jButton1.setText("+>");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jButton1.setBounds(330, 380, 70, 20);
        Planning_Planner_jDesktopPane.add(jButton1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Planner_jDesktopPane.setBounds(10, 10, 970, 440);
        Performing_Performer_jDesktopPane1.add(Planning_Planner_jDesktopPane, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Performing_Performer_jDesktopPane1.setBounds(10, 0, 990, 450);
        Performing_Performer_jDesktopPane.add(Performing_Performer_jDesktopPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Performing_Details_TabbedPane.addTab("Technique Measurability", Performing_Performer_jDesktopPane);

        Planning_Planner_jDesktopPane1.setBackground(new java.awt.Color(255, 255, 204));
        Planning_Planner_jDesktopPane1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        Planning_Planner_info_jDesktopPane1.setBackground(new java.awt.Color(255, 255, 153));
        Planning_Planner_info_jDesktopPane1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        Planning_Planner_info_jDesktopPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Planning_Planner_info_jDesktopPane1MouseClicked(evt);
            }
        });
        Result_jTextField.setBounds(20, 20, 400, 30);
        Planning_Planner_info_jDesktopPane1.add(Result_jTextField, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Boolean_jCheckBox.setBackground(new java.awt.Color(255, 255, 153));
        Boolean_jCheckBox.setText("True");
        Boolean_jCheckBox.setBounds(20, 10, 100, 22);
        Planning_Planner_info_jDesktopPane1.add(Boolean_jCheckBox, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Scale_jComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "   " }));
        Scale_jComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Scale_jComboBoxActionPerformed(evt);
            }
        });
        Scale_jComboBox.setBounds(10, 10, 210, 22);
        Planning_Planner_info_jDesktopPane1.add(Scale_jComboBox, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Planner_info_jDesktopPane1.setBounds(10, 400, 440, 60);
        Planning_Planner_jDesktopPane1.add(Planning_Planner_info_jDesktopPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Measurments_jList.setBorder(javax.swing.BorderFactory.createTitledBorder("Techniques Measurements"));
        Measurments_jList.setModel(getSelectedMeasuresModel());
        Measurments_jList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                Measurments_jListValueChanged(evt);
            }
        });
        jScrollPane10.setViewportView(Measurments_jList);

        jScrollPane10.setBounds(10, 80, 440, 290);
        Planning_Planner_jDesktopPane1.add(jScrollPane10, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Solution_Sources_Edit_jButton3.setText("Delete");
        Solution_Sources_Edit_jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Solution_Sources_Edit_jButton3ActionPerformed(evt);
            }
        });
        Solution_Sources_Edit_jButton3.setBounds(520, 440, 460, 25);
        Planning_Planner_jDesktopPane1.add(Solution_Sources_Edit_jButton3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_CustomisedPlanItem_jLabel1.setText("Success Criteria");
        Planning_CustomisedPlanItem_jLabel1.setBounds(10, 10, 124, 20);
        Planning_Planner_jDesktopPane1.add(Planning_CustomisedPlanItem_jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jScrollPane69.setViewportView(SuccessCriteria_jTextPane);

        jScrollPane69.setBounds(10, 30, 970, 40);
        Planning_Planner_jDesktopPane1.add(jScrollPane69, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Planner_Name_jLabel1.setText("Expected Result");
        Planning_Planner_Name_jLabel1.setBounds(10, 380, 320, 20);
        Planning_Planner_jDesktopPane1.add(Planning_Planner_Name_jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Selected_ExpectedMeasurmentOutcomes_jList.setBorder(javax.swing.BorderFactory.createTitledBorder("Expected Measurable Outcomes"));
        Selected_ExpectedMeasurmentOutcomes_jList.setModel(getExpectedOutcomes());
        Selected_ExpectedMeasurmentOutcomes_jList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                Selected_ExpectedMeasurmentOutcomes_jListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(Selected_ExpectedMeasurmentOutcomes_jList);

        jScrollPane1.setBounds(520, 80, 460, 360);
        Planning_Planner_jDesktopPane1.add(jScrollPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Solution_Sources_Select_jButton6.setText("+>");
        Solution_Sources_Select_jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Solution_Sources_Select_jButton6ActionPerformed(evt);
            }
        });
        Solution_Sources_Select_jButton6.setBounds(450, 80, 70, 20);
        Planning_Planner_jDesktopPane1.add(Solution_Sources_Select_jButton6, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Performing_Details_TabbedPane.addTab(" Technique Success Criteria", Planning_Planner_jDesktopPane1);

        Planning_Objectives_Control_jDesktopPane2.setBackground(new java.awt.Color(255, 255, 204));

        Reporting_Customised_jDesktopPane7.setBackground(new java.awt.Color(255, 255, 153));
        Reporting_Customised_jDesktopPane7.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        Document_jButton.setText(" Review Selection Document");
        Document_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Document_jButtonActionPerformed(evt);
            }
        });
        Document_jButton.setBounds(10, 90, 270, 30);
        Reporting_Customised_jDesktopPane7.add(Document_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        StudyAims_jButton.setText(" Review Aims of Study");
        StudyAims_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StudyAims_jButtonActionPerformed(evt);
            }
        });
        StudyAims_jButton.setBounds(10, 10, 270, 30);
        Reporting_Customised_jDesktopPane7.add(StudyAims_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        New_jButton6.setText(" Review Review the data");
        New_jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                New_jButton6ActionPerformed(evt);
            }
        });
        New_jButton6.setBounds(10, 50, 270, 30);
        Reporting_Customised_jDesktopPane7.add(New_jButton6, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Reporting_Customised_jDesktopPane7.setBounds(690, 20, 290, 140);
        Planning_Objectives_Control_jDesktopPane2.add(Reporting_Customised_jDesktopPane7, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Reporting_Customised_jDesktopPane8.setBackground(new java.awt.Color(255, 255, 153));
        Reporting_Customised_jDesktopPane8.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jDesktopPane50.setBackground(new java.awt.Color(255, 255, 102));
        jDesktopPane50.setBorder(javax.swing.BorderFactory.createTitledBorder("Are the requirements of technqiue available?"));

        RequirmentsAvailable_jCheckBox.setBackground(new java.awt.Color(255, 255, 102));
        RequirmentsAvailable_jCheckBox.setText("Yes");
        RequirmentsAvailable_jCheckBox.setBounds(10, 20, 70, 20);
        jDesktopPane50.add(RequirmentsAvailable_jCheckBox, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jDesktopPane50.setBounds(20, 140, 320, 50);
        Reporting_Customised_jDesktopPane8.add(jDesktopPane50, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jDesktopPane51.setBackground(new java.awt.Color(255, 255, 102));
        jDesktopPane51.setBorder(javax.swing.BorderFactory.createTitledBorder("Are the objectives acheivable with the techniques?"));

        AcheivingObjectives_jCheckBox.setBackground(new java.awt.Color(255, 255, 102));
        AcheivingObjectives_jCheckBox.setText("Yes");
        AcheivingObjectives_jCheckBox.setBounds(10, 20, 70, 20);
        jDesktopPane51.add(AcheivingObjectives_jCheckBox, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jDesktopPane51.setBounds(20, 10, 310, 50);
        Reporting_Customised_jDesktopPane8.add(jDesktopPane51, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jDesktopPane45.setBackground(new java.awt.Color(255, 255, 102));
        jDesktopPane45.setBorder(javax.swing.BorderFactory.createTitledBorder("Does the model require intensive data acclimatisation?"));

        RequireIntensiveAcclimatisation_jCheckBox.setBackground(new java.awt.Color(255, 255, 102));
        RequireIntensiveAcclimatisation_jCheckBox.setText("Yes");
        RequireIntensiveAcclimatisation_jCheckBox.setBounds(10, 20, 70, 20);
        jDesktopPane45.add(RequireIntensiveAcclimatisation_jCheckBox, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jDesktopPane45.setBounds(20, 250, 320, 50);
        Reporting_Customised_jDesktopPane8.add(jDesktopPane45, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jDesktopPane52.setBackground(new java.awt.Color(255, 255, 102));
        jDesktopPane52.setBorder(javax.swing.BorderFactory.createTitledBorder("Does the technique handle the distribution of data?"));

        SuitableForDataDistribution_jCheckBox.setBackground(new java.awt.Color(255, 255, 102));
        SuitableForDataDistribution_jCheckBox.setText("Yes");
        SuitableForDataDistribution_jCheckBox.setBounds(10, 20, 60, 20);
        jDesktopPane52.add(SuitableForDataDistribution_jCheckBox, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jDesktopPane52.setBounds(20, 370, 310, 50);
        Reporting_Customised_jDesktopPane8.add(jDesktopPane52, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Reporting_Customised_jDesktopPane8.setBounds(10, 20, 350, 440);
        Planning_Objectives_Control_jDesktopPane2.add(Reporting_Customised_jDesktopPane8, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Reporting_Customised_jDesktopPane9.setBackground(new java.awt.Color(255, 255, 153));
        Reporting_Customised_jDesktopPane9.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jDesktopPane53.setBackground(new java.awt.Color(255, 255, 102));
        jDesktopPane53.setBorder(javax.swing.BorderFactory.createTitledBorder("Does the technique suites the nature of data?"));

        SuitableForDataNature_jCheckBox.setBackground(new java.awt.Color(255, 255, 102));
        SuitableForDataNature_jCheckBox.setText("Yes");
        SuitableForDataNature_jCheckBox.setBounds(10, 20, 70, 20);
        jDesktopPane53.add(SuitableForDataNature_jCheckBox, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jDesktopPane53.setBounds(10, 10, 290, 50);
        Reporting_Customised_jDesktopPane9.add(jDesktopPane53, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jDesktopPane46.setBackground(new java.awt.Color(255, 255, 102));
        jDesktopPane46.setBorder(javax.swing.BorderFactory.createTitledBorder("Does the tehnique handle the data types of data?"));

        SuitableForDataTypes_jCheckBox.setBackground(new java.awt.Color(255, 255, 102));
        SuitableForDataTypes_jCheckBox.setText("Yes");
        SuitableForDataTypes_jCheckBox.setBounds(10, 20, 70, 20);
        jDesktopPane46.add(SuitableForDataTypes_jCheckBox, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jDesktopPane46.setBounds(10, 130, 290, 50);
        Reporting_Customised_jDesktopPane9.add(jDesktopPane46, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jDesktopPane48.setBackground(new java.awt.Color(255, 255, 102));
        jDesktopPane48.setBorder(javax.swing.BorderFactory.createTitledBorder("Does the technique suite the size of data?"));

        SuitableForDataSize_jCheckBox.setBackground(new java.awt.Color(255, 255, 102));
        SuitableForDataSize_jCheckBox.setText("Yes");
        SuitableForDataSize_jCheckBox.setBounds(10, 20, 60, 20);
        jDesktopPane48.add(SuitableForDataSize_jCheckBox, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jDesktopPane48.setBounds(10, 250, 290, 50);
        Reporting_Customised_jDesktopPane9.add(jDesktopPane48, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jDesktopPane54.setBackground(new java.awt.Color(255, 255, 102));
        jDesktopPane54.setBorder(javax.swing.BorderFactory.createTitledBorder("Does the technique handle the quality of data?"));

        SuitableForDataQuality_jCheckBox.setBackground(new java.awt.Color(255, 255, 102));
        SuitableForDataQuality_jCheckBox.setText("Yes");
        SuitableForDataQuality_jCheckBox.setBounds(10, 20, 70, 20);
        jDesktopPane54.add(SuitableForDataQuality_jCheckBox, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jDesktopPane54.setBounds(10, 370, 290, 50);
        Reporting_Customised_jDesktopPane9.add(jDesktopPane54, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Reporting_Customised_jDesktopPane9.setBounds(370, 20, 310, 440);
        Planning_Objectives_Control_jDesktopPane2.add(Reporting_Customised_jDesktopPane9, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Performing_Details_TabbedPane.addTab("Technique Assement", Planning_Objectives_Control_jDesktopPane2);

        Planning_Resource_jDesktopPane.setBackground(new java.awt.Color(255, 255, 153));
        Planning_Resource_jDesktopPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        Planning_Resource_jDesktopPane.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Planning_Resource_jDesktopPaneFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                Planning_Resource_jDesktopPaneFocusLost(evt);
            }
        });

        Planning_Objectives_Control_jDesktopPane1.setBackground(new java.awt.Color(255, 255, 153));

        Resources_Select_jButton.setText("+>");
        Resources_Select_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Resources_Select_jButtonActionPerformed(evt);
            }
        });
        Resources_Select_jButton.setBounds(0, 0, 70, 20);
        Planning_Objectives_Control_jDesktopPane1.add(Resources_Select_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Resources_UnSelect_jButton.setText("<-");
        Resources_UnSelect_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Resources_UnSelect_jButtonActionPerformed(evt);
            }
        });
        Resources_UnSelect_jButton.setBounds(0, 20, 70, 20);
        Planning_Objectives_Control_jDesktopPane1.add(Resources_UnSelect_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Resource_Edit_jButton.setText("Edit");
        Resource_Edit_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Resource_Edit_jButtonActionPerformed(evt);
            }
        });
        Resource_Edit_jButton.setBounds(0, 40, 70, 20);
        Planning_Objectives_Control_jDesktopPane1.add(Resource_Edit_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Objectives_Control_jDesktopPane1.setBounds(380, 10, 70, 80);
        Planning_Resource_jDesktopPane.add(Planning_Objectives_Control_jDesktopPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Reporting_Customised_jDesktopPane3.setBackground(new java.awt.Color(255, 255, 204));
        Reporting_Customised_jDesktopPane3.setBorder(javax.swing.BorderFactory.createTitledBorder("Available Resources"));

        Reporting_Customised_jDesktopPane4.setBackground(new java.awt.Color(255, 255, 153));
        Reporting_Customised_jDesktopPane4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        RemainingTime_jTextField.setBackground(new java.awt.Color(255, 255, 153));
        RemainingTime_jTextField.setBounds(150, 10, 160, 25);
        Reporting_Customised_jDesktopPane4.add(RemainingTime_jTextField, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Project_Constraint_RemainingDuration_jLabel1.setText("Remaining Duration");
        Project_Constraint_RemainingDuration_jLabel1.setBounds(20, 10, 130, 25);
        Reporting_Customised_jDesktopPane4.add(Project_Constraint_RemainingDuration_jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Reporting_Customised_jDesktopPane4.setBounds(10, 360, 340, 50);
        Reporting_Customised_jDesktopPane3.add(Reporting_Customised_jDesktopPane4, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Reporting_Customised_jDesktopPane6.setBackground(new java.awt.Color(255, 255, 153));
        Reporting_Customised_jDesktopPane6.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        Project_Constraint_RemainingFunds_jLabel1.setText("Remaining Funds");
        Project_Constraint_RemainingFunds_jLabel1.setBounds(20, 10, 120, 20);
        Reporting_Customised_jDesktopPane6.add(Project_Constraint_RemainingFunds_jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        RemainingFunds_jTextField.setBackground(new java.awt.Color(255, 255, 153));
        RemainingFunds_jTextField.setBounds(150, 10, 160, 25);
        Reporting_Customised_jDesktopPane6.add(RemainingFunds_jTextField, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Reporting_Customised_jDesktopPane6.setBounds(10, 290, 340, 50);
        Reporting_Customised_jDesktopPane3.add(Reporting_Customised_jDesktopPane6, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Resources_jList.setBorder(javax.swing.BorderFactory.createTitledBorder("Project Resources"));
        Resources_jList.setModel(this.getProjectResourcesModel());
        Resources_jList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        Resources_jList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                Resources_jListValueChanged(evt);
            }
        });
        jScrollPane7.setViewportView(Resources_jList);

        jScrollPane7.setBounds(10, 30, 340, 240);
        Reporting_Customised_jDesktopPane3.add(jScrollPane7, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Reporting_Customised_jDesktopPane3.setBounds(10, 10, 370, 430);
        Planning_Resource_jDesktopPane.add(Reporting_Customised_jDesktopPane3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Reporting_Customised_jDesktopPane5.setBackground(new java.awt.Color(255, 255, 204));
        Reporting_Customised_jDesktopPane5.setBorder(javax.swing.BorderFactory.createTitledBorder("Required Resources"));

        Selected_Resources_jList.setBorder(javax.swing.BorderFactory.createTitledBorder("Expected Required Resources"));
        Selected_Resources_jList.setModel(this.getExpectedResourcesModel());
        Selected_Resources_jList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        Selected_Resources_jList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                Selected_Resources_jListValueChanged(evt);
            }
        });
        jScrollPane11.setViewportView(Selected_Resources_jList);

        jScrollPane11.setBounds(20, 30, 490, 340);
        Reporting_Customised_jDesktopPane5.add(jScrollPane11, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Resource_jDesktopPane.setBackground(new java.awt.Color(255, 255, 153));
        Resource_jDesktopPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        Resource_jDesktopPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Resource_jDesktopPaneMouseClicked(evt);
            }
        });

        PerformedActivityDuration_jLabel1.setText("Required Time");
        PerformedActivityDuration_jLabel1.setBounds(30, 10, 100, 22);
        Resource_jDesktopPane.add(PerformedActivityDuration_jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        Duration_jTextField.setBounds(130, 10, 140, 22);
        Resource_jDesktopPane.add(Duration_jTextField, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Feasible_jCheckBox.setBackground(new java.awt.Color(255, 255, 153));
        Feasible_jCheckBox.setText("Feasible");
        Feasible_jCheckBox.setBounds(290, 10, 103, 25);
        Resource_jDesktopPane.add(Feasible_jCheckBox, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Resource_jDesktopPane.setBounds(20, 380, 420, 40);
        Reporting_Customised_jDesktopPane5.add(Resource_jDesktopPane, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Reporting_Customised_jDesktopPane5.setBounds(450, 10, 530, 430);
        Planning_Resource_jDesktopPane.add(Reporting_Customised_jDesktopPane5, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Resource_jDesktopPane.setBounds(10, 0, 1000, 460);
        jLayeredPane39.add(Planning_Resource_jDesktopPane, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Performing_Details_TabbedPane.addTab("Technique Requirements", jLayeredPane39);

        jPanel2.setBackground(new java.awt.Color(255, 255, 153));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        Justification_Source_jDesktopPane.setBackground(new java.awt.Color(255, 255, 153));
        Justification_Source_jDesktopPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Sources on which the Selection is Based"));

        Justification_Sources_Control_jDesktopPane.setBackground(new java.awt.Color(255, 255, 153));

        Justification_Sources_Select_jButton.setText("+>");
        Justification_Sources_Select_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Justification_Sources_Select_jButtonActionPerformed(evt);
            }
        });
        Justification_Sources_Select_jButton.setBounds(0, 0, 60, 20);
        Justification_Sources_Control_jDesktopPane.add(Justification_Sources_Select_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Sources_UnSelect_jButton.setText("<-");
        Sources_UnSelect_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Sources_UnSelect_jButtonActionPerformed1(evt);
            }
        });
        Sources_UnSelect_jButton.setBounds(0, 22, 60, 20);
        Justification_Sources_Control_jDesktopPane.add(Sources_UnSelect_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Justification_Sources_Edit_jButton.setText("Edit");
        Justification_Sources_Edit_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Justification_Sources_Edit_jButtonActionPerformed(evt);
            }
        });
        Justification_Sources_Edit_jButton.setBounds(0, 50, 60, 20);
        Justification_Sources_Control_jDesktopPane.add(Justification_Sources_Edit_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Justification_Sources_Control_jDesktopPane.setBounds(380, 30, 60, 110);
        Justification_Source_jDesktopPane.add(Justification_Sources_Control_jDesktopPane, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Sources_jList.setBorder(javax.swing.BorderFactory.createTitledBorder("Available Sources"));
        Sources_jList.setModel(this.getSourcesModel());
        Sources_jList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        Sources_jList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                Sources_jListValueChanged(evt);
            }
        });
        jScrollPane5.setViewportView(Sources_jList);

        jScrollPane5.setBounds(20, 30, 360, 380);
        Justification_Source_jDesktopPane.add(jScrollPane5, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Selected_Sources_jList.setBorder(javax.swing.BorderFactory.createTitledBorder("Objectives Sources"));
        Selected_Sources_jList.setModel(this.getSelectedSourcesModel());
        Selected_Sources_jList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        Selected_Sources_jList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                Selected_Sources_jListValueChanged(evt);
            }
        });
        jScrollPane6.setViewportView(Selected_Sources_jList);

        jScrollPane6.setBounds(440, 30, 490, 380);
        Justification_Source_jDesktopPane.add(jScrollPane6, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Justification_Source_jDesktopPane, javax.swing.GroupLayout.DEFAULT_SIZE, 942, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Justification_Source_jDesktopPane, javax.swing.GroupLayout.DEFAULT_SIZE, 420, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel2.setBounds(10, 10, 970, 450);
        Performing_Justification_jLayeredPane.add(jPanel2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Performing_Details_TabbedPane.addTab("Technqiue Selection Bases", Performing_Justification_jLayeredPane);

        Objectives_jDesktopPane.setBackground(new java.awt.Color(255, 255, 153));
        Objectives_jDesktopPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Data Mining Objectives "));
        Objectives_jDesktopPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Objectives_jDesktopPaneMouseClicked(evt);
            }
        });

        Objectives_jTextArea.setColumns(20);
        Objectives_jTextArea.setRows(5);
        jScrollPane3.setViewportView(Objectives_jTextArea);

        jScrollPane3.setBounds(10, 20, 970, 440);
        Objectives_jDesktopPane.add(jScrollPane3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Performing_Details_TabbedPane.addTab("Data Mining Objectives", Objectives_jDesktopPane);

        Performing_Details_TabbedPane.setBounds(20, 140, 1000, 500);
        Performing_Details_jDesktopPane_jDesktopPane.add(Performing_Details_TabbedPane, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Navigation_jDesktopPane.setBackground(new java.awt.Color(255, 255, 153));
        Navigation_jDesktopPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        Last_jButton.setText("Last >>");
        Last_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Last_jButtonActionPerformed(evt);
            }
        });
        Last_jButton.setBounds(330, 10, 100, 23);
        Navigation_jDesktopPane.add(Last_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Next_jButton.setText("Next >");
        Next_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Next_jButtonActionPerformed(evt);
            }
        });
        Next_jButton.setBounds(240, 10, 90, 23);
        Navigation_jDesktopPane.add(Next_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Previous_jButton.setText("< Previous");
        Previous_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Previous_jButtonActionPerformed(evt);
            }
        });
        Previous_jButton.setBounds(130, 10, 110, 23);
        Navigation_jDesktopPane.add(Previous_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        First_jButton.setText("<< First");
        First_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                First_jButtonActionPerformed(evt);
            }
        });
        First_jButton.setBounds(10, 10, 120, 23);
        Navigation_jDesktopPane.add(First_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Navigation_jDesktopPane.setBounds(20, 650, 450, 40);
        Performing_Details_jDesktopPane_jDesktopPane.add(Navigation_jDesktopPane, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_CustomisedPlan_jDesktopPane.setBackground(new java.awt.Color(255, 255, 204));
        Planning_CustomisedPlan_jDesktopPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        Performed_Plan_jPanel.setBackground(new java.awt.Color(255, 255, 153));
        Performed_Plan_jPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        Performed_Plan_jPanel.setToolTipText("If you choose more than one technique you have to select afinal one, else the last on will be considerd as the main on."); // NOI18N
        Performed_Plan_jPanel.setLayout(null);

        FinalSelection_jCheckBox.setBackground(new java.awt.Color(255, 255, 153));
        FinalSelection_jCheckBox.setText("Selected Technique");
        Performed_Plan_jPanel.add(FinalSelection_jCheckBox);
        FinalSelection_jCheckBox.setBounds(10, 70, 180, 25);

        jScrollPane68.setViewportView(Algorithm_jTextPane);

        Performed_Plan_jPanel.add(jScrollPane68);
        jScrollPane68.setBounds(520, 20, 190, 40);

        Technique_jLabel.setText("Technique Description");
        Performed_Plan_jPanel.add(Technique_jLabel);
        Technique_jLabel.setBounds(370, 50, 150, 20);

        Planning_Planner_Role_jLabel1.setText("Data Mining Approach");
        Performed_Plan_jPanel.add(Planning_Planner_Role_jLabel1);
        Planning_Planner_Role_jLabel1.setBounds(10, 0, 150, 20);

        Approaches_jComboBox.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.background"));
        Approaches_jComboBox.setModel(new DefaultComboBoxModel(this.approaches));
        Performed_Plan_jPanel.add(Approaches_jComboBox);
        Approaches_jComboBox.setBounds(10, 20, 180, 22);

        Planning_Planner_Role_jLabel2.setText("Data Mining Goal");
        Performed_Plan_jPanel.add(Planning_Planner_Role_jLabel2);
        Planning_Planner_Role_jLabel2.setBounds(200, 0, 184, 20);

        Goals_jComboBox.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.background"));
        Goals_jComboBox.setModel(new DefaultComboBoxModel(this.goals));
        Performed_Plan_jPanel.add(Goals_jComboBox);
        Goals_jComboBox.setBounds(200, 20, 160, 22);

        Planning_Planner_Role_jLabel3.setText("Data Mining Algoritm");
        Performed_Plan_jPanel.add(Planning_Planner_Role_jLabel3);
        Planning_Planner_Role_jLabel3.setBounds(520, 0, 150, 20);

        Tasks_jComboBox.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.background"));
        Tasks_jComboBox.setModel(new DefaultComboBoxModel(this.tasks));
        Performed_Plan_jPanel.add(Tasks_jComboBox);
        Tasks_jComboBox.setBounds(200, 70, 160, 22);

        Planning_Planner_Role_jLabel4.setText("Data Mining Task");
        Performed_Plan_jPanel.add(Planning_Planner_Role_jLabel4);
        Planning_Planner_Role_jLabel4.setBounds(200, 50, 200, 20);

        Planning_CustomisedPlanItem_jLabel2.setText("Selection Justification");
        Performed_Plan_jPanel.add(Planning_CustomisedPlanItem_jLabel2);
        Planning_CustomisedPlanItem_jLabel2.setBounds(720, 0, 240, 20);

        jScrollPane71.setViewportView(Justification_jTextPane);

        Performed_Plan_jPanel.add(jScrollPane71);
        jScrollPane71.setBounds(720, 20, 250, 70);

        Supervised_jCheckBox.setBackground(new java.awt.Color(255, 255, 153));
        Supervised_jCheckBox.setText("Supervised");
        Performed_Plan_jPanel.add(Supervised_jCheckBox);
        Supervised_jCheckBox.setBounds(10, 50, 180, 25);

        Techniques_jComboBox.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.background"));
        Techniques_jComboBox.setModel(new DefaultComboBoxModel(Global.techniques));
        Techniques_jComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Techniques_jComboBoxActionPerformed(evt);
            }
        });
        Performed_Plan_jPanel.add(Techniques_jComboBox);
        Techniques_jComboBox.setBounds(370, 20, 140, 22);

        jLabel1.setText("Data Mining Technqiue");
        Performed_Plan_jPanel.add(jLabel1);
        jLabel1.setBounds(370, 0, 140, 20);
        Performed_Plan_jPanel.add(Technique_jTextField);
        Technique_jTextField.setBounds(370, 70, 140, 20);

        Performed_Plan_jPanel.setBounds(10, 10, 980, 100);
        Planning_CustomisedPlan_jDesktopPane.add(Performed_Plan_jPanel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_CustomisedPlan_jDesktopPane.setBounds(20, 10, 1000, 120);
        Performing_Details_jDesktopPane_jDesktopPane.add(Planning_CustomisedPlan_jDesktopPane, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Control_jDesktopPane.setBackground(new java.awt.Color(255, 255, 153));
        Control_jDesktopPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        Delete_jButton.setText("Delete");
        Delete_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Delete_jButtonActionPerformed(evt);
            }
        });
        Delete_jButton.setBounds(180, 10, 80, 25);
        Control_jDesktopPane.add(Delete_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Save_jButton.setText("Save");
        Save_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Save_jButtonActionPerformed(evt);
            }
        });
        Save_jButton.setBounds(100, 10, 80, 25);
        Control_jDesktopPane.add(Save_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Refresh_jButton.setText("Refresh");
        Refresh_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Refresh_jButtonActionPerformed(evt);
            }
        });
        Refresh_jButton.setBounds(10, 10, 90, 25);
        Control_jDesktopPane.add(Refresh_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Control_jDesktopPane.setBounds(490, 650, 270, 40);
        Performing_Details_jDesktopPane_jDesktopPane.add(Control_jDesktopPane, javax.swing.JLayeredPane.DEFAULT_LAYER);

        New_jDesktopPane.setBackground(new java.awt.Color(255, 255, 153));
        New_jDesktopPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        New_jButton1.setText("New");
        New_jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                New_jButton1ActionPerformed(evt);
            }
        });
        New_jButton1.setBounds(10, 10, 80, 23);
        New_jDesktopPane.add(New_jButton1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Add_jButton1.setText("Add +");
        Add_jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Add_jButton1ActionPerformed(evt);
            }
        });
        Add_jButton1.setBounds(90, 10, 90, 23);
        New_jDesktopPane.add(Add_jButton1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        New_jDesktopPane.setBounds(770, 650, 190, 40);
        Performing_Details_jDesktopPane_jDesktopPane.add(New_jDesktopPane, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Performing_Details_jDesktopPane_jDesktopPane.setBounds(10, 10, 1030, 700);
        Performing_jLayeredPane.add(Performing_Details_jDesktopPane_jDesktopPane, javax.swing.JLayeredPane.DEFAULT_LAYER);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(Performing_jLayeredPane, javax.swing.GroupLayout.PREFERRED_SIZE, 1050, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Performing_jLayeredPane, javax.swing.GroupLayout.PREFERRED_SIZE, 720, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Save_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Save_jButtonActionPerformed
this.save_selection();
}//GEN-LAST:event_Save_jButtonActionPerformed

    private void Refresh_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Refresh_jButtonActionPerformed
       this.refresh_selection();

}//GEN-LAST:event_Refresh_jButtonActionPerformed

    private void Planning_Planner_info_jDesktopPaneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Planning_Planner_info_jDesktopPaneMouseClicked
        
}//GEN-LAST:event_Planning_Planner_info_jDesktopPaneMouseClicked

    private void Selected_Measures_jListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_Selected_Measures_jListValueChanged

if (this.selectionJustification!=null && this.selectionJustification.getMeasurability()!=null
        &&this.Selected_Measures_jList.getSelectedIndex()>=0)

         this.measure= (Measure) this.selectionJustification.getMeasurability().getMeasuresList().get(this.Selected_Measures_jList.getSelectedIndex());

}//GEN-LAST:event_Selected_Measures_jListValueChanged

    private void Resources_jListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_Resources_jListValueChanged

   if (Global.project!=null&&Global.project.getSupplements()!=null && 
       Global.project.getSupplements().getManagement()!=null &&
       Global.project.getSupplements().getManagement().getResources()!=null )
       if (this.Resources_jList.getSelectedIndex()>=0)
            this.resource=Global.project.getSupplements().getManagement().
            getResources().getResource(this.Resources_jList.getSelectedIndex());

        this.populateForm();


    }//GEN-LAST:event_Resources_jListValueChanged

    private void Resources_Select_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Resources_Select_jButtonActionPerformed

 this.save_selection();
 if (this.selectionJustification!=null)
 {
        if (this.resource!=null )
        {
            
            if (this.selectionJustification.getFeasibility()==null)
                this.selectionJustification.setFeasibility(new Feasibility());

            if (this.selectionJustification.getFeasibility().getRequiredResources()==null)
                this.selectionJustification.getFeasibility().setRequiredResources(new Resources());

            this.selectionJustification.getFeasibility().getRequiredResources().save(this.resource);
        }
        this.Selected_Resources_jList.setModel(this.getExpectedResourcesModel());
        
        this.populateForm();
  }
 else
  JOptionPane.showMessageDialog(null, "No Objective added yet ...!!!");
}//GEN-LAST:event_Resources_Select_jButtonActionPerformed

    private void Resources_UnSelect_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Resources_UnSelect_jButtonActionPerformed

        if (this.selectionJustification!=null)
            this.delete_resource();
        
        this.Selected_Resources_jList.setModel(this.getExpectedResourcesModel());
        
        this.populateForm();


    }//GEN-LAST:event_Resources_UnSelect_jButtonActionPerformed

    private void Resource_jDesktopPaneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Resource_jDesktopPaneMouseClicked
        ManagementForm projectManagementForm=null;
        projectManagementForm=new ManagementForm(this.resource);
}//GEN-LAST:event_Resource_jDesktopPaneMouseClicked

    private void Justification_Sources_Select_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Justification_Sources_Select_jButtonActionPerformed
this.save_selection();
  if (this.selectionJustification!=null) {

        if (this.selectionJustification.getTraceability()==null)
            this.selectionJustification.setTraceability(new Sources());

            this.selectionJustification.getTraceability().save(this.source);
        }
       else
           JOptionPane.showMessageDialog(null, "No Objective added yet ...!!!");
        this.Selected_Sources_jList.setModel(this.getSelectedSourcesModel());
        this.populateForm();


    }//GEN-LAST:event_Justification_Sources_Select_jButtonActionPerformed

    private void Sources_UnSelect_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Sources_UnSelect_jButtonActionPerformed

    if (this.selectionJustification!=null && this.selectionJustification.getTraceability()!=null )
       this.delete_source();
        

        this.Selected_Sources_jList.setModel(this.getSourcesModel());
        
        this.populateForm();

    }//GEN-LAST:event_Sources_UnSelect_jButtonActionPerformed
//DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
//****************************************************************************
//                           Delete Solution Evidence
//DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
//****************************************************************************
 private void delete_source()
   {
    if (this.selectionJustification!=null &&this.selectionJustification.getTraceability()!=null
            && this.selectionJustification.getTraceability().getSourcesList().size()>0)
  {
        int index= this.selectionJustification.getTraceability().getSourcesList().indexOf(this.source);
        if (this.selectionJustification.getTraceability().delete(this.source)==0);
        {
            if (this.selectionJustification.getTraceability().getSourcesList().size()>0)
            {
                if (index==0)
                    this.source = (Source) this.selectionJustification.getTraceability().getSourcesList().get(index);
                else if (index>0)
                     this.source = (Source) this.selectionJustification.getTraceability().getSourcesList().get(index-1);
            }
        }          
 }
}



//DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
//****************************************************************************
//                           Delete Solution Evidence
//DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
//****************************************************************************
 private void delete_measure()
   {
    if (this.selectionJustification!=null &&this.selectionJustification.getMeasurability()!=null
            && this.selectionJustification.getMeasurability().getMeasuresList().size()>0)
  {
        int index= this.selectionJustification.getMeasurability().getMeasuresList().indexOf(this.measure);
        if (this.selectionJustification.getMeasurability().delete(this.measure)==0);
        {
            if (this.selectionJustification.getMeasurability().getMeasuresList().size()>0)
            {
                if (index==0)
                    this.measure = (Measure) this.selectionJustification.getMeasurability().getMeasuresList().get(index);
                else if (index>0)
                     this.measure = (Measure) this.selectionJustification.getMeasurability().getMeasuresList().get(index-1);
            }
        }
 }
}

//DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
//****************************************************************************
//                           Delete Solution Evidence
//DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
//****************************************************************************
  private void delete_expected_outcome() {

    if (this.selectionJustification!=null
            &&this.selectionJustification.getSuccessCriteria()!=null
            && this.selectionJustification.getSuccessCriteria().getExpectedOutcomes()!=null
            && this.selectionJustification.getSuccessCriteria().getExpectedOutcomes().getOutcomesList().size()>0)
  {
        int index= this.selectionJustification.getSuccessCriteria().
                  getExpectedOutcomes().getOutcomesList().indexOf(this.measure);
        if (this.selectionJustification.getSuccessCriteria(). getExpectedOutcomes().delete(this.expectedOutcome)==0);
        {
            if (this.selectionJustification.getSuccessCriteria().getExpectedOutcomes().getOutcomesList().size()>0)
            {
                if (index==0)
                    this.expectedOutcome = this.selectionJustification.getSuccessCriteria().getExpectedOutcomes().getOutcomesList().get(index);
                else if (index>0)
                     this.expectedOutcome = this.selectionJustification.getSuccessCriteria().getExpectedOutcomes().getOutcomesList().get(index-1);
            }
        }
 }
}


//DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
//****************************************************************************
//                              Delete Resource
//DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
//****************************************************************************
 private void delete_resource()
{
if (this.selectionJustification!=null &&
    this.selectionJustification.getFeasibility()!=null &&
    this.selectionJustification.getFeasibility().getRequiredResources()!=null &&
    this.selectionJustification.getFeasibility().getRequiredResources().getResourcesList().size()>0)
    {
        int index= this.selectionJustification.getFeasibility().getRequiredResources().getResourcesList()
                                                                            .indexOf(this.resource);
        if (this.selectionJustification.getFeasibility().getRequiredResources().delete(this.resource)==0);
        {
            if (this.selectionJustification.getFeasibility().getRequiredResources().getResourcesList().size()>0)
            {
                if (index==0)
                    this.resource = this.selectionJustification.getFeasibility().getRequiredResources().getResource(index);
                else if(index>0)
                    this.resource = this.selectionJustification.getFeasibility().getRequiredResources().getResource(index-1);

            }
        }
        // setResult process objective
 }
}



    private void Justification_Sources_Edit_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Justification_Sources_Edit_jButtonActionPerformed
        SourceForm projectSourceForm=null;
        projectSourceForm=new SourceForm((process_model.issue.tracibility.Source) this.source);

    }//GEN-LAST:event_Justification_Sources_Edit_jButtonActionPerformed

    private void Next_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Next_jButtonActionPerformed
    this.next_selection();
    }//GEN-LAST:event_Next_jButtonActionPerformed

    private void Previous_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Previous_jButtonActionPerformed
    this.previous_selection();
    }//GEN-LAST:event_Previous_jButtonActionPerformed

    private void First_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_First_jButtonActionPerformed
    this.first_selection();
    }//GEN-LAST:event_First_jButtonActionPerformed

    private void Last_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Last_jButtonActionPerformed
    this.last_selection();
    }//GEN-LAST:event_Last_jButtonActionPerformed

    private void Delete_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Delete_jButtonActionPerformed
    
    if (this.selectionJustification!=null)
    {
        this.selectionJustification.UnDeliverAsMain();
        this.delete_selection();
        this.populate_selection();
        this.populateForm();
    }
    }//GEN-LAST:event_Delete_jButtonActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
    if (this.selectionJustification==null)
        this.refresh_selection();

    this.refresh_selection_details();
    this.populate_selection();
    }//GEN-LAST:event_formWindowActivated

    private void formWindowDeactivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowDeactivated
    if(this.selectionJustification!=null)
       this.save_selection();
    }//GEN-LAST:event_formWindowDeactivated

    private void Sources_jListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_Sources_jListValueChanged
    if (Global.project !=null &&  Global.project.getSources()!=null &&
        Global.project.getSources().getSourcesList().size()>0)
     if (this.Sources_jList.getSelectedIndex()>=0)

         this.source=(Source) Global.project.getSources().
                 getSourcesList().get(this.Sources_jList.getSelectedIndex());


    }//GEN-LAST:event_Sources_jListValueChanged

    private void Selected_Sources_jListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_Selected_Sources_jListValueChanged

        if (this.selectionJustification!=null &&
            this.selectionJustification.getTraceability()!=null &&
            this.selectionJustification.getTraceability().getSourcesList().size()>0)
         if (this.Selected_Sources_jList.getSelectedIndex()>=0)

         this.source= (Source) this.selectionJustification.getTraceability().getSourcesList().get(this.Selected_Sources_jList.getSelectedIndex());

    }//GEN-LAST:event_Selected_Sources_jListValueChanged

    private void Selected_Resources_jListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_Selected_Resources_jListValueChanged

        if (this.selectionJustification!=null &&
            this.selectionJustification.getFeasibility()!=null &&
            this.selectionJustification.getFeasibility().getRequiredResources()!=null)

         if (this.selectionJustification.getFeasibility().getRequiredResources().getResourcesList().size()>=0
            && this.Selected_Resources_jList.getSelectedIndex()>=0)

             this.resource= (Resource) this.selectionJustification.getFeasibility().
             getRequiredResources().getResourcesList().get(this.Selected_Resources_jList.getSelectedIndex());

    }//GEN-LAST:event_Selected_Resources_jListValueChanged

    private void Resource_Edit_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Resource_Edit_jButtonActionPerformed
    new ManagementForm(this.resource).setVisible(true);
    }//GEN-LAST:event_Resource_Edit_jButtonActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
    System.gc();
//    System.runFinalization();
    }//GEN-LAST:event_formWindowClosed

    private void Planning_Planner_info_jDesktopPane2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Planning_Planner_info_jDesktopPane2MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_Planning_Planner_info_jDesktopPane2MouseClicked

    private void Planning_Planner_info_jDesktopPane3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Planning_Planner_info_jDesktopPane3MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_Planning_Planner_info_jDesktopPane3MouseClicked

    private void Scale_Add_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Scale_Add_jButtonActionPerformed

    if ( this.qualitativeMeasure==null)
        this.qualitativeMeasure=new QualitativeMeasure();

    if ( this.qualitativeMeasure!=null && this.qualitativeMeasure.getScale()==null)
            qualitativeMeasure.setScale(new ArrayList<String>());

    if (this.Category_jTextField.getText()!=null)
        this.qualitativeMeasure.getScale().add(Category_jTextField.getText().toString());

    Category_jTextField.setText("");
    this.scale_jList.setModel(this.getSelectedScaleModel());

    }//GEN-LAST:event_Scale_Add_jButtonActionPerformed



    private void Scale_Delete_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Scale_Delete_jButtonActionPerformed

    if (this.qualitativeMeasure!=null && this.qualitativeMeasure.getScale()!=null &&
        this.qualitativeMeasure.getScale().size()>0)
        this.qualitativeMeasure.getScale().remove(this.scaleCategory);

    Category_jTextField.setText("");
    this.scale_jList.setModel(this.getSelectedScaleModel());

    this.selectionJustification.getMeasurability().save(this.qualitativeMeasure);
    
    this.scale_jList.setModel(this.getSelectedScaleModel());

    }//GEN-LAST:event_Scale_Delete_jButtonActionPerformed

    private void Analysts_jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_Analysts_jList1ValueChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_Analysts_jList1ValueChanged

    private void scale_jListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_scale_jListValueChanged

   if ( this.qualitativeMeasure!=null && this.qualitativeMeasure.getScale()!=null && 
        this.qualitativeMeasure.getScale().size()>0 && scale_jList.getSelectedIndex()>=0)
             this.scaleCategory=qualitativeMeasure.getScale().get(scale_jList.getSelectedIndex());

    }//GEN-LAST:event_scale_jListValueChanged

    private void Solution_Sources_Edit_jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Solution_Sources_Edit_jButton2ActionPerformed


    if (this.selectionJustification!=null && this.selectionJustification.getMeasurability()!=null )
       this.delete_measure();

        this.Selected_Measures_jList.setModel(this.getSelectedMeasuresModel());
        this.populateForm();
    }//GEN-LAST:event_Solution_Sources_Edit_jButton2ActionPerformed

    private void Add_Quantitative_Measure_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Add_Quantitative_Measure_jButtonActionPerformed

 this.save_selection();
 
 if (this.selectionJustification!=null)
  {
        if ( this.selectionJustification.getMeasurability()==null)
        this.selectionJustification.setMeasurability(new Measures());

        QuantitativeMeasure quantitativeMeasure=new QuantitativeMeasure();

        if (!this.Quantitative_Measure_Name_jTextField.getText().equals(""))
            quantitativeMeasure.setName(Quantitative_Measure_Name_jTextField.getText());                    
        
        if (!this.Unit_jTextField.getText().equals(""))
            quantitativeMeasure.setUnit(Unit_jTextField.getText());
        
        try
        {            
           if (!this.Min_jTextField.getText().equals(""))
               quantitativeMeasure.setMinimum(Double.parseDouble(this.Min_jTextField.getText()));
           
           if (!this.Max_jTextField.getText().equals(""))
               quantitativeMeasure.setMaximum(Double.parseDouble(this.Max_jTextField.getText()));

        this.measure=quantitativeMeasure;
        this.selectionJustification.getMeasurability().save(this.measure);
        }
        catch(NumberFormatException nfx)
        {
               JOptionPane.showMessageDialog(null, "Value must be a number ...!!!");
        }
        
        Quantitative_Measure_Name_jTextField.setText("");
        Max_jTextField.setText("");
        Min_jTextField.setText("");
        Unit_jTextField.setText("");
        this.measure=null;
        this.refresh_selection_details();
 }
 else
  JOptionPane.showMessageDialog(null, "No Objective added yet ...!!!");

    }//GEN-LAST:event_Add_Quantitative_Measure_jButtonActionPerformed
    
    
    private void New_jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_New_jButton1ActionPerformed
        this.clear_selection();
    }//GEN-LAST:event_New_jButton1ActionPerformed

    private void Add_jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Add_jButton1ActionPerformed
    this.save_selection();
        this.clear_selection();
    }//GEN-LAST:event_Add_jButton1ActionPerformed

    private void Add_Boolean_Measure_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Add_Boolean_Measure_jButtonActionPerformed
       this.save_selection();
      if (this.selectionJustification!=null)
      {
           if (this.selectionJustification.getMeasurability()==null)
               this.selectionJustification.setMeasurability(new Measures());

            BooleanMeasure booleanMeasure=new BooleanMeasure();
            
            if (!this.Boolean_Measure_Namej_TextField.getText().equals(""))
                booleanMeasure.setName(Boolean_Measure_Namej_TextField.getText());                      
            
            if (this.Criteria_jTextField.getText()!=null)
                booleanMeasure.setCriteria(Criteria_jTextField.getText());

            this.measure=booleanMeasure;
            this.selectionJustification.getMeasurability().save(this.measure);

            Criteria_jTextField.setText("");
            Boolean_Measure_Namej_TextField.setText("");
            this.measure=null;
            this.refresh_selection_details();
     }
     else
        JOptionPane.showMessageDialog(null, "No Objective added yet ...!!!");
}//GEN-LAST:event_Add_Boolean_Measure_jButtonActionPerformed

    private void Add_Qualitative_Measuret_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Add_Qualitative_Measuret_jButtonActionPerformed

 this.save_selection();
 if (this.selectionJustification!=null)
  {
     if (this.selectionJustification.getMeasurability()==null)
         this.selectionJustification.setMeasurability(new Measures());

     if (!this.Qualitative_Measure_Name_jTextField.getText().equals(""))
         qualitativeMeasure.setName(Qualitative_Measure_Name_jTextField.getText());                      
  
     if (this.qualitativeMeasure!=null)
//      this.selectionJustification.getMeasurability().save(this.measure);
        this.selectionJustification.getMeasurability().save(this.qualitativeMeasure);
     
this.qualitativeMeasure=null;
this.measure=null;
Category_jTextField.setText("");
Qualitative_Measure_Name_jTextField.setText("");
this.refresh_selection_details();

 }
 else
  JOptionPane.showMessageDialog(null, "No Objective added yet ...!!!");
}//GEN-LAST:event_Add_Qualitative_Measuret_jButtonActionPerformed

    private void Planning_Planner_info_jDesktopPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Planning_Planner_info_jDesktopPane1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_Planning_Planner_info_jDesktopPane1MouseClicked

    private void Measurments_jListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_Measurments_jListValueChanged
   
if (this.selectionJustification!=null && this.selectionJustification.getMeasurability()!=null &&this.Measurments_jList.getSelectedIndex()>=0)
      this.measure= (Measure) this.selectionJustification.getMeasurability().getMeasuresList().get(this.Measurments_jList.getSelectedIndex());


//---------------------------------------------------------------------------        
if ( this.measure!=null && this.measure.getMeasureType()!=null && this.measure.getMeasureType().equals(MeasureType.BOOLEAN))          
  {     
     this.Boolean_jCheckBox.setVisible(true);
     this.Boolean_jCheckBox.setSelected(false);
     this.Scale_jComboBox.setVisible(false);
     this.Result_jTextField.setVisible(false);
  }
              
//---------------------------------------------------------------------------
else if ( this.measure!=null && this.measure.getMeasureType()!=null && this.measure.getMeasureType().equals(MeasureType.QUALITATIVE))
  {                         
      
           qualitativeMeasure=(QualitativeMeasure) this.measure;
           int i=0;       
           
           //------------------------------------------------------------------
           names=new String[qualitativeMeasure.getScale().size()];
           for ( Object o:qualitativeMeasure.getScale())
           {
               if (o!=null)
                    names[i]=(String)o;
               i++;
           }
           //------------------------------------------------------------------
           if (names!=null)
                this.Scale_jComboBox.setModel(new DefaultComboBoxModel(names));
           
           //------------------------------------------------------------------
          this.Boolean_jCheckBox.setVisible(false);
          this.Result_jTextField.setVisible(false);
          this.Scale_jComboBox.setVisible(true);
          
          this.Scale_jComboBox.setModel(this.getSelectedScaleModel());                
                    
   }
          
  //---------------------------------------------------------------------------
  else if ( this.measure!=null && this.measure.getMeasureType()!=null && this.measure.getMeasureType().equals(MeasureType.QUANTITATIVE))
  {               
     this.Boolean_jCheckBox.setVisible(false);
     this.Scale_jComboBox.setVisible(false);
     this.Result_jTextField.setVisible(true);
     this.Result_jTextField.setText("");
          
   }
          
 //---------------------------------------------------------------------------          
 else if ( this.measure!=null && this.measure.getMeasureType()!=null && this.measure.getMeasureType().equals(MeasureType.OTHER))   
 {           
     this.Boolean_jCheckBox.setVisible(false);
     this.Scale_jComboBox.setVisible(false);
     this.Result_jTextField.setVisible(true);
     this.Result_jTextField.setText("");     
 }
      
//this.populateForm();

    }//GEN-LAST:event_Measurments_jListValueChanged

    private void Analysts_jList2ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_Analysts_jList2ValueChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_Analysts_jList2ValueChanged

    private void Solution_Sources_Edit_jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Solution_Sources_Edit_jButton3ActionPerformed

    if (this.selectionJustification!=null && this.selectionJustification.getSuccessCriteria().getExpectedOutcomes()!=null )
       this.delete_expected_outcome();

        this.Selected_ExpectedMeasurmentOutcomes_jList.setModel(this.getExpectedOutcomes());

        this.populateForm();

    }//GEN-LAST:event_Solution_Sources_Edit_jButton3ActionPerformed

    private void Solution_Sources_Select_jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Solution_Sources_Select_jButton6ActionPerformed
 boolean unSuccessfull=false;
 
 if (this.selectionJustification!=null)
 {
    this.expectedOutcome=new MeasurmentOutcome();

    //------------------------------------------------------------------------    
    if ( this.measure!=null && this.measure.getMeasureType().equals(MeasureType.BOOLEAN))
    {
        BooleanMeasureResult  booleanMeasureResult= new BooleanMeasureResult();
        booleanMeasureResult.setOutcome(this.Boolean_jCheckBox.isSelected());
        
        this.expectedOutcome.setMeasure((BooleanMeasure)this.measure);
        this.expectedOutcome.setOutcome(booleanMeasureResult);
     }
           
    //------------------------------------------------------------------------           
    else if ( this.measure!=null && this.measure.getMeasureType().equals(MeasureType.QUANTITATIVE))
    {
        QuantitativeMeasureResult  quantitativeMeasureResult= new QuantitativeMeasureResult();
        //
        try{
        double result=0.0;
        //
        if (!this.Result_jTextField.getText().equals(""))
            result=Double.parseDouble(this.Result_jTextField.getText());
        
        quantitativeMeasureResult.setValue(result);
        this.expectedOutcome.setMeasure((QuantitativeMeasure)this.measure);
        this.expectedOutcome.setOutcome(quantitativeMeasureResult.clone());
        }catch ( java.lang.NumberFormatException ex)
        {
            unSuccessfull=true;
            JOptionPane.showMessageDialog(null, "Quantitative value must be a number ...!!!");
        }
    }
            
    //------------------------------------------------------------------------
    else if ( this.measure!=null && this.measure.getMeasureType().equals(MeasureType.QUALITATIVE))
    {                
        QualitativeMeasureResult qualitativeMeasureResult = new QualitativeMeasureResult();
        QualitativeMeasure qualMeasure = (QualitativeMeasure) this.measure;
        //int index = -1;
        if (this.Scale_jComboBox.getSelectedIndex() >= 0) {
            //index = this.Scale_jComboBox.getSelectedIndex();
             //JOptionPane.showMessageDialog(null, index+"");
            String rank = qualMeasure.getScaleCategory(this.Scale_jComboBox.getSelectedIndex());
            qualitativeMeasureResult.setRank(rank);
        }
        this.expectedOutcome.setMeasure(qualMeasure);
        this.expectedOutcome.setOutcome(qualitativeMeasureResult);
        this.Scale_jComboBox.setModel(this.getSelectedScaleModel());      
    }
            
    //------------------------------------------------------------------------            
    else if ( this.measure!=null && this.measure.getMeasureType().equals(MeasureType.OTHER))
    {                
        MeasureResult  measureResult= new MeasureResult();
        String result=null;
        
        if (!this.Result_jTextField.getText().equals(""))
            result=this.Result_jTextField.getText();
        
        measureResult.setResult(result);
        this.expectedOutcome.setMeasure(this.measure);
        this.expectedOutcome.setOutcome(measureResult);                
    }
            
    //------------------------------------------------------------------------
    else if ( this.measure!=null )
    {                     
        MeasureResult  measureResult= new MeasureResult();
        String result=null;

        if (!this.Result_jTextField.getText().equals(""))
            result=this.Result_jTextField.getText();

        measureResult.setResult(result);

        this.expectedOutcome.setMeasure(this.measure);
        this.expectedOutcome.setOutcome(measureResult);                            
    }
  
  //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

if (unSuccessfull==false)    
{    
  if (this.selectionJustification!=null && this.selectionJustification.getSuccessCriteria()==null)
      this.selectionJustification.setSuccessCriteria(new SuccessCriteria());

  if (this.selectionJustification.getSuccessCriteria().getExpectedOutcomes()==null)
      this.selectionJustification.getSuccessCriteria().setExpectedOutcomes(new MeasurmentOutcomes());

  if (this.expectedOutcome!=null && this.selectionJustification.getSuccessCriteria()!=null && this.selectionJustification.getSuccessCriteria().getExpectedOutcomes()!=null)
      this.selectionJustification.getSuccessCriteria().getExpectedOutcomes().save(expectedOutcome);
    
   if (!SuccessCriteria_jTextPane.getText().equals(""))
       this.selectionJustification.getSuccessCriteria().setRational(SuccessCriteria_jTextPane.getText());

   this.Selected_ExpectedMeasurmentOutcomes_jList.setModel(this.getExpectedOutcomes());
 }
}
   
this.save_selection();
this.populateForm();
//this.measure=null;

    }//GEN-LAST:event_Solution_Sources_Select_jButton6ActionPerformed

    private void Selected_ExpectedMeasurmentOutcomes_jListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_Selected_ExpectedMeasurmentOutcomes_jListValueChanged

    if (   this.selectionJustification!=null
        && this.selectionJustification.getSuccessCriteria()!=null
        && this.selectionJustification.getSuccessCriteria().getExpectedOutcomes()!=null
        && this.selectionJustification.getSuccessCriteria().getExpectedOutcomes().getOutcomesList().size()>0  &&
        Selected_ExpectedMeasurmentOutcomes_jList.getSelectedIndex()>=0
        )

         this.expectedOutcome=  this.selectionJustification.getSuccessCriteria().
                                getExpectedOutcomes().getOutcomesList().
                                get(Selected_ExpectedMeasurmentOutcomes_jList.getSelectedIndex());

    }//GEN-LAST:event_Selected_ExpectedMeasurmentOutcomes_jListValueChanged

    private void Sources_UnSelect_jButtonActionPerformed1(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Sources_UnSelect_jButtonActionPerformed1
         if (this.selectionJustification!=null )
             this.delete_source();
        this.Selected_Sources_jList.setModel(this.getSelectedSourcesModel());

        this.populateForm();
    }//GEN-LAST:event_Sources_UnSelect_jButtonActionPerformed1

    private void Planning_Resource_jDesktopPaneFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Planning_Resource_jDesktopPaneFocusGained
    if (Global.project!=null && Global.project.getSupplements()!=null &&
        Global.project.getSupplements().getManagement()!=null &&
        Global.project.getSupplements().getManagement().getConstraint()!=null)
        {
            this.RemainingTime_jTextField.setText(Global.project.getSupplements().getManagement().getConstraint().getRemainingTime()+"");
            this.RemainingFunds_jTextField.setText(Global.project.getSupplements().getManagement().getConstraint().getRemainingFunds()+"");
        }
    //------------------------------------------------------------------------
    if (this.selectionJustification!=null && this.selectionJustification.getFeasibility()!=null)
         {
            this.Duration_jTextField.setText(this.selectionJustification.getFeasibility().getRequiredTime()+"");
            this.Feasible_jCheckBox.setSelected(this.selectionJustification.getFeasibility().isFeasible());
         }


    }//GEN-LAST:event_Planning_Resource_jDesktopPaneFocusGained

    private void Planning_Resource_jDesktopPaneFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Planning_Resource_jDesktopPaneFocusLost
    if (this.selectionJustification!=null && this.selectionJustification.getFeasibility()!=null
       && !this.Duration_jTextField.getText().equals(""))
    {
       this.selectionJustification.getFeasibility().setRequiredTime(Double.parseDouble(this.Duration_jTextField.getText()));
       this.selectionJustification.getFeasibility().setFeasible(this.Feasible_jCheckBox.isSelected());
     }
    }//GEN-LAST:event_Planning_Resource_jDesktopPaneFocusLost

    private void Document_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Document_jButtonActionPerformed
    Tools.viewAnyFile(new File(Config.helpLocation + "techniqueSelection.pdf"));
        

    }//GEN-LAST:event_Document_jButtonActionPerformed

    private void StudyAims_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StudyAims_jButtonActionPerformed
        new StudyForm().setVisible(true);
    }//GEN-LAST:event_StudyAims_jButtonActionPerformed

    private void New_jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_New_jButton6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_New_jButton6ActionPerformed

    private void Objectives_jDesktopPaneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Objectives_jDesktopPaneMouseClicked
        // TODO add your handling code here:
}//GEN-LAST:event_Objectives_jDesktopPaneMouseClicked

    private void Scale_jComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Scale_jComboBoxActionPerformed
   // this code is very weired since it is a solution fo a big problem where the selection of the combo box changes itself for a reason
   // with this code it is working
   int index=this.Scale_jComboBox.getSelectedIndex();
   this.Scale_jComboBox.setModel(this.getSelectedScaleModel());
   this.Scale_jComboBox.setSelectedIndex(index);
    }//GEN-LAST:event_Scale_jComboBoxActionPerformed

    private void Techniques_jComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Techniques_jComboBoxActionPerformed
   
   int index=this.Techniques_jComboBox.getSelectedIndex();
   this.Techniques_jComboBox.setSelectedIndex(index);
   
   if (index<Global.techniques.length)   
   {    
       Technique_jTextField.setText(Global.techniques[index]);
       Technique_jTextField.setVisible(false);
       Technique_jLabel.setVisible(false);
       
       if (index==1 && flag==false)
       {
        this.add_association_measures();
       }
       else if (index==2 && flag==false)
       {
        this.add_classification_measures();           
       }                  
       else if (index==3 && flag==false)
       {
        this.add_classification_measures();           
       }                  
       else if (index==4 && flag==false)
       {
        this.add_hca_clustering_measures();           
       }                  
       else if (index==5 && flag==false)
       {
        this.add_regression_measures();
       }                
       else if (index==6 && flag==false)
       {
        this.add_classification_measures();           
       }           
       else if (index==7 && flag==false)
       {
        this.add_clustering_measures();           
       }    
               
       else if (index==8 && flag==false)
       {
        this.add_pca_measures();           
       }    
       else if (index==9 && flag==false)
       {
        this.add_classification_measures();           
       }    
       else if (index==10 && flag==false)
       {
        this.add_som_measures();           
       }    
               
               
               
        else if (index==0 && flag==false)
       {
         this.reset_measures();         
       }                         
       else if (index ==Global.techniques.length-1 && flag==false)
       {
         this.reset_measures();         
         Technique_jTextField.setText("");
         Technique_jTextField.setVisible(true);
         Technique_jLabel.setVisible(true);           
       }

   }
   

    }//GEN-LAST:event_Techniques_jComboBoxActionPerformed

    private void Planning_Planner_info_jDesktopPane4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Planning_Planner_info_jDesktopPane4MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_Planning_Planner_info_jDesktopPane4MouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

   this.save_selection();
   if (this.selectionJustification!=null)
    {
             if (this.selectionJustification.getMeasurability()==null)
                 this.selectionJustification.setMeasurability(new Measures());

             this.measure=new Measure();

             if (!this.Measure_Name_jTextField.getText().equals(""))
                 measure.setName(Measure_Name_jTextField.getText());

             if (this.measure!=null)
                 this.selectionJustification.getMeasurability().save(this.measure);

        this.measure=null;
        this.Measure_Name_jTextField.setText("");    
        this.refresh_selection_details();

    }
    else
      JOptionPane.showMessageDialog(null, "No selection Justification yet...!!!");
   
    }//GEN-LAST:event_jButton1ActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        
//    if (this.selectionJustification!=null)
        this.save_selection();    
    }//GEN-LAST:event_formWindowClosing

    
private void reset_measures()
{    
    this.save_selection();
    this.selectionJustification.setMeasurability(new Measures());   
    this.refresh_selection_details();            
}       
    
private void add_som_measures()
{
    this.save_selection();
    this.selectionJustification.setMeasurability(new Measures());
       
   // error
   //-------------------------------------------------------------------------   
   this.add_quantitative_measure("Error Rate","percentage", 0.0, 100.0);
   
   this.add_quantitative_measure("Mean Absolute Error","real number", 0.0, 1.0);
   this.add_quantitative_measure("Mean Prior Absolute Error","real number", 0.0, 1.0);
   
   this.add_quantitative_measure("Relative Absolute Error","real number", 0.0, 100.0);
   
   this.add_quantitative_measure("Root Mean Squared Error","real number", 0.0, 1.0);
   this.add_quantitative_measure("Root Mean Prior Squared Error","real number", 0.0, 1.0);
   this.add_quantitative_measure("Root Relative Squared Error","real number", 0.0, 100.0);
           
   // confusion matrix
   //-------------------------------------------------------------------------
   this.add_measure("Confusion Matrix");   
   this.add_measure("Classification Details");   
   
   // fitness
   //-------------------------------------------------------------------------
   this.add_boolean_measure("Model Fitness", "Is the model fit?");
   this.add_boolean_measure("Model Under Fitness", "Is the model underfit?");   
   this.add_boolean_measure("Model Performance", "Is the model performance acceptable?");
   
   
this.refresh_selection_details();   
}   

private void add_classification_measures()
{
    this.save_selection();
    this.selectionJustification.setMeasurability(new Measures());
    
   // classification
   //-------------------------------------------------------------------------
   this.add_quantitative_measure("Correctly Classified Percentage","percentage", 0.0, 100.0);
   this.add_quantitative_measure("Incorrectly Classified Percentage","percentage", 0.0, 100.0);
    
   this.add_quantitative_measure("Correctly Classified Count","count", 0.0, Double.POSITIVE_INFINITY);
   this.add_quantitative_measure("Incorrectly Classified Count","count",0.0,Double.POSITIVE_INFINITY);  
   
   this.add_quantitative_measure("Kappa","real number", 0.0, 100);
   
   
   // error
   //-------------------------------------------------------------------------   
   this.add_quantitative_measure("Error Rate","percentage", 0.0, 100.0);
   
   this.add_quantitative_measure("Mean Absolute Error","real number", 0.0, 1.0);
   this.add_quantitative_measure("Mean Prior Absolute Error","real number", 0.0, 1.0);
   
   this.add_quantitative_measure("Relative Absolute Error","real number", 0.0, 100.0);
   
   this.add_quantitative_measure("Root Mean Squared Error","real number", 0.0, 1.0);
   this.add_quantitative_measure("Root Mean Prior Squared Error","real number", 0.0, 1.0);
   this.add_quantitative_measure("Root Relative Squared Error","real number", 0.0, 100.0);
           
   // confusion matrix
   //-------------------------------------------------------------------------
   this.add_measure("Confusion Matrix");   
   this.add_measure("Classification Details");   
   
   // fitness
   //-------------------------------------------------------------------------
   this.add_boolean_measure("Model Fitness", "Is the model fit?");
   this.add_boolean_measure("Model Under Fitness", "Is the model underfit?");   
   this.add_boolean_measure("Model Performance", "Is the model performance acceptable?");
   
   
this.refresh_selection_details();   
}   

private void add_regression_measures()
{
   this.save_selection();
   this.selectionJustification.setMeasurability(new Measures());
   
    // classification
   //-------------------------------------------------------------------------    
   this.add_quantitative_measure("Correlation Coefficient","real number", 0.0, 1.0);

   this.add_quantitative_measure("Mean Absolute Error","real number", 0.0, 1.0);      
   //
   this.add_quantitative_measure("Relative Absolute Error","real number", 0.0, 100.0);   
   //
   this.add_quantitative_measure("Root Mean Squared Error","real number", 0.0, 1.0);     
   //
   this.add_quantitative_measure("Root Relative Squared Error","real number", 0.0, 100.0);

   // fitness
   //-------------------------------------------------------------------------
   this.add_boolean_measure("Model Fitness", "Is the model fit?");
   this.add_boolean_measure("Model Under Fitness", "Is the model underfit?");   
   this.add_boolean_measure("Model Performance", "Is the model performance acceptable?");
   
this.refresh_selection_details();         
}   


private void add_hca_clustering_measures()
{   
    this.save_selection();
    this.selectionJustification.setMeasurability(new Measures());
    //
    this.add_measure("Clustered Instances");
    this.add_measure("Classes To Clusteres");
    this.add_quantitative_measure("Incorrectly Clustered Instances Count","count", 0.0, Double.POSITIVE_INFINITY);
    this.add_quantitative_measure("Incorrectly Clustered Instances Percentage","percentage", 0.0, 100.0);                
this.refresh_selection_details();    
}

private void add_association_measures()
{
   this.save_selection();   
   this.selectionJustification.setMeasurability(new Measures());
   this.add_measure("Generic Evaluation");
   //
   //ArrayList<String> scale= new ArrayList<String>();
   //this.add_qualitative_measure("name",scale);
   this.refresh_selection_details();   
}   

private void add_clustering_measures()
{
   this.save_selection();   
   this.selectionJustification.setMeasurability(new Measures());
   this.add_measure("Generic Evaluation");   
   this.refresh_selection_details();   
}   

private void add_generic_measures()
{
   this.save_selection();   
   this.selectionJustification.setMeasurability(new Measures());
   this.add_measure("Generic Evaluation");   
   this.refresh_selection_details();   
}   

private void add_pca_measures()
{
   this.save_selection();   
   this.selectionJustification.setMeasurability(new Measures());
   this.add_measure("Variance Covered");   
   this.refresh_selection_details();   
}   

//-----------------------------------------------------------------------------
private void add_measure(String name)
{ 
     if (this.selectionJustification!=null)
      {
            if (this.selectionJustification.getMeasurability()==null)
                this.selectionJustification.setMeasurability(new Measures());
            
            measure=new Measure();            
            measure.setName(name);            
            this.selectionJustification.getMeasurability().save(this.measure);
                                    
       }
        else
          JOptionPane.showMessageDialog(null, "No selection Justification yet...!!!");
}   


//-----------------------------------------------------------------------------
private void add_boolean_measure(String name,String booleanCriteria)
{      
     if (this.selectionJustification!=null)
      {
            if (this.selectionJustification.getMeasurability()==null)
                this.selectionJustification.setMeasurability(new Measures());
            
            BooleanMeasure booleanMeasure=new BooleanMeasure(name, booleanCriteria);            
            this.selectionJustification.getMeasurability().save(booleanMeasure);                  
            
       }
        else
          JOptionPane.showMessageDialog(null, "No selection Justification yet...!!!");
}   

//-----------------------------------------------------------------------------    
private void add_qualitative_measure(String name, ArrayList<String> scale)
{ 
     if (this.selectionJustification!=null)
      {
            if (this.selectionJustification.getMeasurability()==null)
                this.selectionJustification.setMeasurability(new Measures());

            QualitativeMeasure thisQualitativeMeasure=new QualitativeMeasure();            
            
            thisQualitativeMeasure.setName(name);
            thisQualitativeMeasure.setScale(scale);                              
            
            this.selectionJustification.getMeasurability().save(thisQualitativeMeasure);                                                      
            
       }
        else
            JOptionPane.showMessageDialog(null, "No selection Justification yet...!!!");
}   

//-----------------------------------------------------------------------------    
private void add_quantitative_measure(String name, String unit, double min, double max)
{
if (this.selectionJustification!=null)
  {
        if (this.selectionJustification.getMeasurability()==null)
            this.selectionJustification.setMeasurability(new Measures());

        QuantitativeMeasure quantitativeMeasure=new QuantitativeMeasure();                
        
        quantitativeMeasure.setUnit(unit);                
        quantitativeMeasure.setName(name);
                        
        quantitativeMeasure.setMinimum(min);         
        quantitativeMeasure.setMaximum(max);
        
        this.selectionJustification.getMeasurability().save(quantitativeMeasure);        
 }
 else
      JOptionPane.showMessageDialog(null, "No selection Justification yet...!!!");
}   
    

//-----------------------------------------------------------------------------
//*****************************************************************************
//                     Resources Funds Calculations
//*****************************************************************************
//-----------------------------------------------------------------------------
private void addResourceFunds()
{
if (Global.project!=null &&
                Global.project.getSupplements()!=null &&
                Global.project.getSupplements().getManagement()!=null &&
                Global.project.getSupplements().getManagement().getConstraint()!=null)
                {
                      Double curruntUsedFunds=Global.project.getSupplements().getManagement().getConstraint().getUsedFunds();
                      Double totalFunds=Global.project.getSupplements().getManagement().getConstraint().getTotalFunds();

                      Double resourceCost=0.0;

                      if (this.resource!=null)
                              resourceCost= this.resource.getCost();

                      Double newUsedFunds=curruntUsedFunds+resourceCost;

                      if (newUsedFunds>totalFunds)
                          JOptionPane.showMessageDialog(null, "Exceeded the project Total Funds,"
                                                           +" Used Funds = "+newUsedFunds
                                                           +" Project Planned Total Funds = "+totalFunds);

                     Global.project.getSupplements().getManagement().getConstraint().setUsedFunds(newUsedFunds);

                }
}

//*****************************************************************************
private void deductResourceFunds()
{
 //------------------------------------------------------------------
            if (Global.project!=null &&
                Global.project.getSupplements()!=null &&
                Global.project.getSupplements().getManagement()!=null &&
                Global.project.getSupplements().getManagement().getConstraint()!=null)
                {
                      Double curruntUsedFunds=Global.project.getSupplements().getManagement().getConstraint().getUsedFunds();
                      Double totalFunds=Global.project.getSupplements().getManagement().getConstraint().getTotalFunds();

                      Double resourceCost=0.0;

                      if (this.resource!=null)
                              resourceCost= this.resource.getCost();

                      Double newUsedFunds=curruntUsedFunds-resourceCost;

                      if (newUsedFunds>totalFunds)
                          JOptionPane.showMessageDialog(null, "Exceeded the project Total Funds,"
                                                           +" Used Funds = "+newUsedFunds
                                                           +" Project Planned Total Funds = "+totalFunds);

                     Global.project.getSupplements().getManagement().getConstraint().setUsedFunds(newUsedFunds);

                }
}

//SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
//****************************************************************************
//                              Save Plan
//****************************************************************************
//SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS

 private void save_selection()
 {
     if (this.selectionJustification==null)
        this.selectionJustification=new ModelingTechniqueSelection();

     if (this.Technique_jTextField.getText()!=null && !this.Technique_jTextField.getText().equals(""))
        this.selectionJustification.setTechnique(this.Technique_jTextField.getText());
     else
        this.selectionJustification.setTechnique(null);

      if (this.Algorithm_jTextPane.getText()!=null && !this.Algorithm_jTextPane.getText().equals(""))
        this.selectionJustification.setAlgorithm(this.Algorithm_jTextPane.getText());

     if (this.Justification_jTextPane.getText()!=null && !this.Justification_jTextPane.getText().equals(""))
        this.selectionJustification.setSelectionJustification(this.Justification_jTextPane.getText());

    if (this.Approaches_jComboBox.getSelectedIndex()>0)
        this.selectionJustification.setApproach(this.Approaches_jComboBox.getSelectedIndex());

    if (this.Goals_jComboBox.getSelectedIndex()>0)
        this.selectionJustification.setGoalIndex(this.Goals_jComboBox.getSelectedIndex());

     if (this.Tasks_jComboBox.getSelectedIndex()>0)
        this.selectionJustification.setTaskIndex(this.Tasks_jComboBox.getSelectedIndex());
          
     
    //---------------------------------------------------------------------------------------------------------------------
    if (this.selectionJustification.getAcheivability()==null) 
        this.selectionJustification.setAcheivability(new Acheivability());        
            
    if (this.selectionJustification.getAcheivability()!=null)
        this.selectionJustification.getAcheivability().setSuitableForDataNature(this.SuitableForDataNature_jCheckBox.isSelected());

    if (this.selectionJustification.getAcheivability()!=null)
        this.selectionJustification.getAcheivability().setSuitableForDataTypes(this.SuitableForDataTypes_jCheckBox.isSelected());

    if (this.selectionJustification.getAcheivability()!=null)
        this.selectionJustification.getAcheivability().setSuitableForDataSize(this.SuitableForDataSize_jCheckBox.isSelected());

    if (this.selectionJustification.getAcheivability()!=null)
        this.selectionJustification.getAcheivability().setSuitableForDataQuality(this.SuitableForDataQuality_jCheckBox.isSelected());

    if (this.selectionJustification.getAcheivability()!=null)
        this.selectionJustification.getAcheivability().setSuitableForDataDistribution(this.SuitableForDataDistribution_jCheckBox.isSelected());

    if (this.selectionJustification.getAcheivability()!=null)
        this.selectionJustification.getAcheivability().setAcheivingObjectives(this.AcheivingObjectives_jCheckBox.isSelected());

    if (this.selectionJustification.getAcheivability()!=null)
        this.selectionJustification.getAcheivability().setRequirmentsAvailable(this.RequirmentsAvailable_jCheckBox.isSelected());

    if (this.selectionJustification.getAcheivability()!=null)
        this.selectionJustification.getAcheivability().setRequireIntensiveAcclimatisation(this.RequireIntensiveAcclimatisation_jCheckBox.isSelected());

    if (this.selectionJustification!=null)
        this.selectionJustification.setSupervised(this.Supervised_jCheckBox.isSelected());

     if (this.selectionJustification!=null)
        this.selectionJustification.setFinalSelection(FinalSelection_jCheckBox.isSelected());

    //-------------------------------------------------------------------------
    if (this.selectionJustification.getTraceability()==null)
        this.selectionJustification.setTraceability(new Sources());

    if (this.selectionJustification.getFeasibility()==null)
        this.selectionJustification.setFeasibility(new Feasibility());

    if (this.selectionJustification.getFeasibility()!=null)
        this.selectionJustification.getFeasibility().setFeasible(this.FinalSelection_jCheckBox.isSelected());

   if (!this.Duration_jTextField.getText().equals(""))
         this.selectionJustification.getFeasibility().setRequiredTime(Double.parseDouble(this.Duration_jTextField.getText()));
   
   this.selectionJustification.getFeasibility().setFeasible(this.Feasible_jCheckBox.isSelected());
    
    //----------------------------------------------------------------------------
    if (this.selectionJustification.getMeasurability()==null)
        this.selectionJustification.setMeasurability(new Measures());

     if (this.selectionJustification.getSuccessCriteria()==null)
         this.selectionJustification.setSuccessCriteria(new SuccessCriteria());

   if (this.selectionJustification!=null && this.selectionJustification.getSuccessCriteria()!=null)
     if (this.SuccessCriteria_jTextPane.getText()!=null && !this.SuccessCriteria_jTextPane.getText().equals(""))
        this.selectionJustification.getSuccessCriteria().setRational(this.SuccessCriteria_jTextPane.getText());
    


      //if (this.selectionJustification.isFinalSelection())
  this.selectionJustification.UnDeliver();
  this.selectionJustification.deliverAsMain();
      // else
       //   this.selectionJustification.deliverAsSupplement();

      this.populate_selection();
  }



//PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
//                         Populate Plan Form
//PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
 private void populate_selection()
{
if (this.selectionJustification!=null)
     {
         if (this.selectionJustification.getTechnique()!=null)
            this.Technique_jTextField.setText(this.selectionJustification.getTechnique());
         else
           this.Technique_jTextField.setText("");

         if (this.selectionJustification.getSelectionJustification()!=null)
            this.Justification_jTextPane.setText(this.selectionJustification.getSelectionJustification());
         else
           this.Justification_jTextPane.setText("");
         
        if (this.selectionJustification.getAlgorithm()!=null)
            this.Algorithm_jTextPane.setText(this.selectionJustification.getAlgorithm());
         else
           this.Algorithm_jTextPane.setText("");

         if (this.selectionJustification.getTechnique()!=null)
         {            
            // by default others
            //----------------------------------------------------------------
            this.flag=true;
            this.Techniques_jComboBox.setSelectedIndex(Global.techniques.length-1);
            this.flag=false;
            Technique_jLabel.setVisible(true);
            Technique_jTextField.setVisible(true);
            Technique_jTextField.setText(this.selectionJustification.getTechnique());             
            
            
            // if it is simillar to any item in the array disable diting and set index to the corrosponding combo box index
            //----------------------------------------------------------------            
            for (int i=0; i<Global.techniques.length-1;i++)
            {
               if (Global.techniques[i].toLowerCase().equals(this.selectionJustification.getTechnique().toLowerCase()))
               {        
                   this.flag=true;
                   this.Techniques_jComboBox.setSelectedIndex(i);
                   Technique_jTextField.setText(this.selectionJustification.getTechnique());
                   Technique_jLabel.setVisible(false);
                   Technique_jTextField.setVisible(false);
                   this.flag=false;
               } 
            }
         }
         else
         {
            this.Technique_jTextField.setText("");
            Technique_jLabel.setVisible(false);
            Technique_jTextField.setVisible(false);           
            this.flag=true;
            this.Techniques_jComboBox.setSelectedIndex(0);
            this.flag=false;
         }

         //--------------------------------------------------------------------
         if (this.selectionJustification.getDataMiningApproach()!=null)
             this.Approaches_jComboBox.setSelectedIndex(this.selectionJustification.getDataMiningApproach().ordinal()+1);
         else
             this.Approaches_jComboBox.setSelectedIndex(0);

         if (this.selectionJustification.getDataMiningGoal()!=null)
             this.Goals_jComboBox.setSelectedIndex(this.selectionJustification.getDataMiningGoal().ordinal()+1);
         else
             this.Goals_jComboBox.setSelectedIndex(0);

         if (this.selectionJustification.getDataMiningTask()!=null)
             this.Tasks_jComboBox.setSelectedIndex(this.selectionJustification.getDataMiningTask().ordinal()+1);
         else
             this.Tasks_jComboBox.setSelectedIndex(0);

         //--------------------------------------------------------------------
         if (this.selectionJustification.getAcheivability()!=null)
             this.RequirmentsAvailable_jCheckBox.setSelected(this.selectionJustification.getAcheivability().isRequirmentsAvailable());
         else
             this.RequirmentsAvailable_jCheckBox.setSelected(false);

         
         if (this.selectionJustification.getAcheivability()!=null)
             this.SuitableForDataSize_jCheckBox.setSelected(this.selectionJustification.getAcheivability().isSuitableForDataSize());
         else
             this.SuitableForDataSize_jCheckBox.setSelected(false);
         
         if (this.selectionJustification.getAcheivability()!=null)
             this.SuitableForDataTypes_jCheckBox.setSelected(this.selectionJustification.getAcheivability().isSuitableForDataTypes());
         else
             this.SuitableForDataTypes_jCheckBox.setSelected(false);
         
         if (this.selectionJustification.getAcheivability()!=null)
             this.SuitableForDataNature_jCheckBox.setSelected(this.selectionJustification.getAcheivability().isSuitableForDataNature());
         else
             this.SuitableForDataNature_jCheckBox.setSelected(false);
         
         if (this.selectionJustification.getAcheivability()!=null)
             this.RequireIntensiveAcclimatisation_jCheckBox.setSelected(this.selectionJustification.getAcheivability().isRequireIntensiveAcclimatisation());
         else
             this.RequireIntensiveAcclimatisation_jCheckBox.setSelected(false);
         
         if (this.selectionJustification.getAcheivability()!=null)
             this.AcheivingObjectives_jCheckBox.setSelected(this.selectionJustification.getAcheivability().isAcheivingObjectives());
         else
             this.AcheivingObjectives_jCheckBox.setSelected(false);
         
         if (this.selectionJustification.getAcheivability()!=null)
             this.SuitableForDataDistribution_jCheckBox.setSelected(this.selectionJustification.getAcheivability().isSuitableForDataDistribution());
         else
             this.SuitableForDataDistribution_jCheckBox.setSelected(false);
         
         if (this.selectionJustification.getAcheivability()!=null)
             this.SuitableForDataQuality_jCheckBox.setSelected(this.selectionJustification.getAcheivability().isSuitableForDataQuality());
         else
             this.SuitableForDataQuality_jCheckBox.setSelected(false);
                  

         this.Supervised_jCheckBox.setSelected(this.selectionJustification.isSupervised());                      
         this.FinalSelection_jCheckBox.setSelected(this.selectionJustification.isFinalSelection());
         
         //--------------------------------------------------------------------
        if ( this.selectionJustification!=null && this.selectionJustification.getSuccessCriteria()!=null
          && this.selectionJustification.getSuccessCriteria().getRational()!=null)
            this.SuccessCriteria_jTextPane.setText(this.selectionJustification.getSuccessCriteria().getRational());
        else
            this.SuccessCriteria_jTextPane.setText("");
         
         if (this.selectionJustification!=null && this.selectionJustification!=null && this.selectionJustification.getFeasibility()!=null)
         {
            this.Duration_jTextField.setText(this.selectionJustification.getFeasibility().getRequiredTime()+"");
            this.Feasible_jCheckBox.setSelected(this.selectionJustification.getFeasibility().isFeasible());
         }
         //--------------------------------------------------------------------
        if (Global.project!=null && Global.project.getSupplements()!=null &&
            Global.project.getSupplements().getManagement()!=null &&
            Global.project.getSupplements().getManagement().getConstraint()!=null)
        {
            this.RemainingTime_jTextField.setText(Global.project.getSupplements().getManagement().getConstraint().getRemainingTime()+"");
            this.RemainingFunds_jTextField.setText(Global.project.getSupplements().getManagement().getConstraint().getRemainingFunds()+"");
        }

        this.refresh_selection_details();
     }

this.Selected_Sources_jList.setModel(this.getSelectedSourcesModel());
this.Selected_Measures_jList.setModel(this.getSelectedMeasuresModel());
this.Selected_ExpectedMeasurmentOutcomes_jList.setModel(this.getExpectedOutcomes());
this.Selected_Resources_jList.setModel(this.getExpectedResourcesModel());

this.populateForm();

}


 //RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR
//****************************************************************************
//                              Refresh
//****************************************************************************
//RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR

private void refresh_selection()
{
//*****************************************************************************
Result<ModelingTechniqueSelection> selectionJustificationResult=new Result<ModelingTechniqueSelection>();

//*****************************************************************************

if (Global.currentPhase!=null &&
    Global.currentPhase.getResult()!=null)
{
    selectionJustificationResult=Global.currentPhase.getResult();

        if (selectionJustificationResult.getSupplementDeliveries()!=null &&
             selectionJustificationResult.getSupplementDeliveries().getFirst()!=null)
        this.selectionJustification= (ModelingTechniqueSelection) selectionJustificationResult.getSupplementDeliveries().getFirst();
}
else
 this.selectionJustification=new ModelingTechniqueSelection();
 
//*****************************************************************************
 if (  Global.project.getProcess()!=null &&
    Global.project.getProcess().getResults()!=null &&    
    Global.project.getProcess().getResults().getResult(1)!=null)
{
     DataMiningObjective processObjective=null;
       if (Global.project.getProcess().getResults().getResult(1).getMainDelivery()!=null)
            processObjective = (DataMiningObjective) Global.project.getProcess().getResults().getResult(1).getMainDelivery();
       else  if (Global.project.getProcess().getResults().getResult(1).getSupplementDeliveries()!=null
              && Global.project.getProcess().getResults().getResult(1).getSupplementDeliveries().getFirst()!=null)
                    processObjective= (DataMiningObjective) Global.project.getProcess().getResults().getResult(1).getSupplementDeliveries().getFirst();
     if (processObjective!=null)
         this.Objectives_jTextArea.setText(processObjective.toMyString());    
}
 
//*****************************************************************************
this.refresh_selection_details();
this.populate_selection();
}


 //RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR
 //                         Refresh Plan Details
 //RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR

 private void refresh_selection_details()
 {
      this.Sources_jList.setModel(this.getSourcesModel());
      this.Resources_jList.setModel(this.getProjectResourcesModel());
      this.scale_jList.setModel(this.getSelectedScaleModel());
      this.Measurments_jList.setModel(this.getSelectedMeasuresModel());
      
      this.Selected_Sources_jList.setModel(this.getSelectedSourcesModel());
      this.Selected_Measures_jList.setModel(this.getSelectedMeasuresModel());
      this.Selected_ExpectedMeasurmentOutcomes_jList.setModel(this.getExpectedOutcomes());
      this.Selected_Resources_jList.setModel(this.getExpectedResourcesModel());
      this.populateForm();
 }

//DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
//****************************************************************************
//                              Delete Plan
//DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
//****************************************************************************
 private void delete_selection()
    {
    if (this.selectionJustification!=null &&
        Global.currentPhase.getResult()!=null &&
        Global.currentPhase.getResult().getSupplementDeliveries()!=null &&
        Global.currentPhase.getResult().getSupplementDeliveries().getDeliveriesList().size()>0)
    {
      int index= Global.currentPhase.getResult().getSupplementDeliveries().getDeliveriesList().indexOf(this.selectionJustification);
          if (Global.currentPhase.getResult().getSupplementDeliveries().delete(this.selectionJustification)>-1);
        {
            if (Global.currentPhase.getResult().getSupplementDeliveries().getDeliveriesList().size()>0)
            {
                if (index==0 && Global.currentPhase.getResult().getSupplementDeliveries().getDelivery(index)!=null)
                    this.selectionJustification = (ModelingTechniqueSelection) Global.currentPhase.getResult().getSupplementDeliveries().getDelivery(index);
                else if(index>0)
                    this.selectionJustification = (ModelingTechniqueSelection) Global.currentPhase.getResult().getSupplementDeliveries().getDelivery(index-1);

                //this.refresh_plan_details();
                this.refresh_selection_details();
                this.populate_selection();
                /*
                if (selectionJustification.isFinalSelection()|| index==0)
                    selectionJustification.deliverAsMain();
                else
                   selectionJustification.deliverAsSupplement();
                */
            }
            else
            {
                selectionJustification.UnDeliver();
                this.clear_selection();
            }

        }
    //this.save_selection();
    this.populateForm();
 }
 }



//CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
//****************************************************************************
//                     Clear Resource Plan & Resource
//****************************************************************************
 //CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

 private void clear_selection()
{
this.selectionJustification=null;
clear_selection_details();
clear_selectionForm();
 }

 private void clear_selection_details()
{
     this.resource=null;
     this.source=null;
     this.measure=null;
     this.expectedOutcome=null;
     this.Selected_Sources_jList.setModel(this.getSelectedSourcesModel());
     this.Selected_Measures_jList.setModel(this.getSelectedMeasuresModel());
     this.Selected_ExpectedMeasurmentOutcomes_jList.setModel(this.getExpectedOutcomes());
     this.Selected_Resources_jList.setModel(this.getExpectedResourcesModel());
 }

 private void clear_selectionForm()
 {
     
     this.SuccessCriteria_jTextPane.setText("");
     //-----------------------------------------------------------------------
     this.Justification_jTextPane.setText("");
     this.Technique_jTextField.setText("");
     this.Algorithm_jTextPane.setText("");
     this.Techniques_jComboBox.setSelectedIndex(0);
     //-----------------------------------------------------------------------
     this.RequirmentsAvailable_jCheckBox.setSelected(false);
     this.SuitableForDataSize_jCheckBox.setSelected(false);
     this.SuitableForDataTypes_jCheckBox.setSelected(false);
     this.SuitableForDataNature_jCheckBox.setSelected(false);
     this.RequireIntensiveAcclimatisation_jCheckBox.setSelected(false);
     this.AcheivingObjectives_jCheckBox.setSelected(false);
     this.SuitableForDataDistribution_jCheckBox.setSelected(false);
     this.SuitableForDataQuality_jCheckBox.setSelected(false);
     //--------------------------------------------------------------------
     this.Supervised_jCheckBox.setSelected(false);
     this.FinalSelection_jCheckBox.setSelected(false);
    //--------------------------------------------------------------------
    this.Approaches_jComboBox.setSelectedIndex(0);
    this.Goals_jComboBox.setSelectedIndex(0);
    this.Tasks_jComboBox.setSelectedIndex(0);
    this.populateForm();
 }

//FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
//****************************************************************************
//                            First & Last Plan
//****************************************************************************
//FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF

 private void first_selection()
    {
       if (Global.currentPhase.getResult()!=null &&
             Global.currentPhase.getResult().getSupplementDeliveries()!=null &&
                Global.currentPhase.getResult().getSupplementDeliveries().getFirst()!=null )
            {
                this.save_selection();
                this.selectionJustification= (ModelingTechniqueSelection) Global.currentPhase.getResult().getSupplementDeliveries().getFirst();
                this.clear_selection_details();
                this.refresh_selection_details();
                //
                this.populate_selection();
            }
    }


 //NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
//****************************************************************************
//                                Last Selection
//****************************************************************************
//NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
 private void last_selection()
    {
       if (Global.currentPhase.getResult()!=null &&
             Global.currentPhase.getResult().getSupplementDeliveries()!=null &&
                Global.currentPhase.getResult().getSupplementDeliveries().getLast()!=null )
            {
                this.save_selection();
                this.selectionJustification= (ModelingTechniqueSelection) Global.currentPhase.getResult().getSupplementDeliveries().getLast();
                this.clear_selection_details();
                this.refresh_selection_details();
                //
                this.populate_selection();
            }
    }




//NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
//****************************************************************************
//                                Next Selection
//****************************************************************************
//NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
 private void next_selection()
    {

            if (this.selectionJustification!=null)
            {
            if (Global.currentPhase.getResult()!=null &&
                Global.currentPhase.getResult().getSupplementDeliveries()!=null &&
                Global.currentPhase.getResult().getSupplementDeliveries().getNext(this.selectionJustification)!=null
                )
                {
                    this.save_selection();
                    this.selectionJustification= (ModelingTechniqueSelection) Global.currentPhase.getResult().getSupplementDeliveries().getNext(this.selectionJustification);
                    this.clear_selection_details();
                    this.refresh_selection_details();
                    //
                    this.populate_selection();
                }
            }        
    }


//PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
//****************************************************************************
//                     Previous Plan& Resource
//****************************************************************************
//PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
private void previous_selection()
    {

            if (this.selectionJustification!=null)
            {
            if (Global.currentPhase.getResult()!=null &&
                Global.currentPhase.getResult().getSupplementDeliveries()!=null &&
                Global.currentPhase.getResult().getSupplementDeliveries().getPrevious(this.selectionJustification)!=null
                )
                {
                    this.save_selection();
                    this.selectionJustification= (ModelingTechniqueSelection) Global.currentPhase.getResult().getSupplementDeliveries().getPrevious(this.selectionJustification);
                    this.clear_selection_details();
                    this.refresh_selection_details();
                    //
                    this.populate_selection();
                }
            }

    }

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    if (Global.project == null) 
                        Global.project = new Project();

                    if (Global.project.getProcess() == null) 
                        Global.project.setProcess(new Process());
                     
                    Global.project.getProcess().setVersion(1);

                    if (Global.currentPhase==null)
                            Global.currentPhase=new Phase("ObjectivesDefinition");
                    
                    new TechniqueSelectionForm().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(TechniqueSelectionForm.class.getName()).log(Level.SEVERE, null, ex);
                } catch (Exception ex) {
                    Logger.getLogger(TechniqueSelectionForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox AcheivingObjectives_jCheckBox;
    private javax.swing.JButton Add_Boolean_Measure_jButton;
    private javax.swing.JButton Add_Qualitative_Measuret_jButton;
    private javax.swing.JButton Add_Quantitative_Measure_jButton;
    private javax.swing.JButton Add_jButton1;
    private javax.swing.JTextPane Algorithm_jTextPane;
    private javax.swing.JComboBox Approaches_jComboBox;
    private javax.swing.JTextField Boolean_Measure_Namej_TextField;
    private javax.swing.JCheckBox Boolean_jCheckBox;
    private javax.swing.JTextField Category_jTextField;
    private javax.swing.JDesktopPane Control_jDesktopPane;
    private javax.swing.JTextField Criteria_jTextField;
    private javax.swing.JButton Delete_jButton;
    private javax.swing.JButton Document_jButton;
    private javax.swing.JTextField Duration_jTextField;
    private javax.swing.JCheckBox Feasible_jCheckBox;
    private javax.swing.JCheckBox FinalSelection_jCheckBox;
    private javax.swing.JButton First_jButton;
    private javax.swing.JComboBox Goals_jComboBox;
    private javax.swing.JDesktopPane Justification_Source_jDesktopPane;
    private javax.swing.JDesktopPane Justification_Sources_Control_jDesktopPane;
    private javax.swing.JButton Justification_Sources_Edit_jButton;
    private javax.swing.JButton Justification_Sources_Select_jButton;
    private javax.swing.JTextPane Justification_jTextPane;
    private javax.swing.JButton Last_jButton;
    private javax.swing.JTextField Max_jTextField;
    private javax.swing.JTextField Measure_Name_jTextField;
    private javax.swing.JList Measurments_jList;
    private javax.swing.JTextField Min_jTextField;
    private javax.swing.JDesktopPane Navigation_jDesktopPane;
    private javax.swing.JButton New_jButton1;
    private javax.swing.JButton New_jButton6;
    private javax.swing.JDesktopPane New_jDesktopPane;
    private javax.swing.JButton Next_jButton;
    private javax.swing.JDesktopPane Objectives_jDesktopPane;
    private javax.swing.JTextArea Objectives_jTextArea;
    private javax.swing.JLabel PerformedActivityDuration_jLabel1;
    private javax.swing.JPanel Performed_Plan_jPanel;
    private javax.swing.JTabbedPane Performing_Details_TabbedPane;
    private javax.swing.JDesktopPane Performing_Details_jDesktopPane_jDesktopPane;
    private javax.swing.JLayeredPane Performing_Justification_jLayeredPane;
    private javax.swing.JLayeredPane Performing_Performer_jDesktopPane;
    private javax.swing.JDesktopPane Performing_Performer_jDesktopPane1;
    private javax.swing.JLayeredPane Performing_jLayeredPane;
    private javax.swing.JLabel Planning_CustomisedPlanItem_jLabel1;
    private javax.swing.JLabel Planning_CustomisedPlanItem_jLabel2;
    private javax.swing.JDesktopPane Planning_CustomisedPlan_jDesktopPane;
    private javax.swing.JDesktopPane Planning_Objectives_Control_jDesktopPane1;
    private javax.swing.JDesktopPane Planning_Objectives_Control_jDesktopPane2;
    private javax.swing.JDesktopPane Planning_Objectives_Control_jDesktopPane7;
    private javax.swing.JDesktopPane Planning_Objectives_Control_jDesktopPane8;
    private javax.swing.JLabel Planning_Planner_Name_jLabel;
    private javax.swing.JLabel Planning_Planner_Name_jLabel1;
    private javax.swing.JLabel Planning_Planner_Name_jLabel5;
    private javax.swing.JLabel Planning_Planner_Name_jLabel6;
    private javax.swing.JLabel Planning_Planner_Name_jLabel7;
    private javax.swing.JLabel Planning_Planner_Role_jLabel1;
    private javax.swing.JLabel Planning_Planner_Role_jLabel2;
    private javax.swing.JLabel Planning_Planner_Role_jLabel3;
    private javax.swing.JLabel Planning_Planner_Role_jLabel4;
    private javax.swing.JDesktopPane Planning_Planner_info_jDesktopPane;
    private javax.swing.JDesktopPane Planning_Planner_info_jDesktopPane1;
    private javax.swing.JDesktopPane Planning_Planner_info_jDesktopPane2;
    private javax.swing.JDesktopPane Planning_Planner_info_jDesktopPane3;
    private javax.swing.JDesktopPane Planning_Planner_info_jDesktopPane4;
    private javax.swing.JDesktopPane Planning_Planner_jDesktopPane;
    private javax.swing.JDesktopPane Planning_Planner_jDesktopPane1;
    private javax.swing.JDesktopPane Planning_Resource_jDesktopPane;
    private javax.swing.JButton Previous_jButton;
    private javax.swing.JLabel Project_Constraint_RemainingDuration_jLabel1;
    private javax.swing.JLabel Project_Constraint_RemainingFunds_jLabel1;
    private javax.swing.JTextField Qualitative_Measure_Name_jTextField;
    private javax.swing.JTextField Quantitative_Measure_Name_jTextField;
    private javax.swing.JButton Refresh_jButton;
    private javax.swing.JTextField RemainingFunds_jTextField;
    private javax.swing.JTextField RemainingTime_jTextField;
    private javax.swing.JDesktopPane Reporting_Customised_jDesktopPane3;
    private javax.swing.JDesktopPane Reporting_Customised_jDesktopPane4;
    private javax.swing.JDesktopPane Reporting_Customised_jDesktopPane5;
    private javax.swing.JDesktopPane Reporting_Customised_jDesktopPane6;
    private javax.swing.JDesktopPane Reporting_Customised_jDesktopPane7;
    private javax.swing.JDesktopPane Reporting_Customised_jDesktopPane8;
    private javax.swing.JDesktopPane Reporting_Customised_jDesktopPane9;
    private javax.swing.JCheckBox RequireIntensiveAcclimatisation_jCheckBox;
    private javax.swing.JCheckBox RequirmentsAvailable_jCheckBox;
    private javax.swing.JButton Resource_Edit_jButton;
    private javax.swing.JDesktopPane Resource_jDesktopPane;
    private javax.swing.JButton Resources_Select_jButton;
    private javax.swing.JButton Resources_UnSelect_jButton;
    private javax.swing.JList Resources_jList;
    private javax.swing.JTextField Result_jTextField;
    private javax.swing.JButton Save_jButton;
    private javax.swing.JButton Scale_Add_jButton;
    private javax.swing.JButton Scale_Delete_jButton;
    private javax.swing.JComboBox Scale_jComboBox;
    private javax.swing.JList Selected_ExpectedMeasurmentOutcomes_jList;
    private javax.swing.JList Selected_Measures_jList;
    private javax.swing.JList Selected_Resources_jList;
    private javax.swing.JList Selected_Sources_jList;
    private javax.swing.JButton Solution_Sources_Edit_jButton2;
    private javax.swing.JButton Solution_Sources_Edit_jButton3;
    private javax.swing.JButton Solution_Sources_Select_jButton6;
    private javax.swing.JButton Sources_UnSelect_jButton;
    private javax.swing.JList Sources_jList;
    private javax.swing.JButton StudyAims_jButton;
    private javax.swing.JTextPane SuccessCriteria_jTextPane;
    private javax.swing.JCheckBox SuitableForDataDistribution_jCheckBox;
    private javax.swing.JCheckBox SuitableForDataNature_jCheckBox;
    private javax.swing.JCheckBox SuitableForDataQuality_jCheckBox;
    private javax.swing.JCheckBox SuitableForDataSize_jCheckBox;
    private javax.swing.JCheckBox SuitableForDataTypes_jCheckBox;
    private javax.swing.JCheckBox Supervised_jCheckBox;
    private javax.swing.JComboBox Tasks_jComboBox;
    private javax.swing.JLabel Technique_jLabel;
    private javax.swing.JTextField Technique_jTextField;
    private javax.swing.JComboBox Techniques_jComboBox;
    private javax.swing.JTextField Unit_jTextField;
    private javax.swing.JButton jButton1;
    private javax.swing.JDesktopPane jDesktopPane45;
    private javax.swing.JDesktopPane jDesktopPane46;
    private javax.swing.JDesktopPane jDesktopPane48;
    private javax.swing.JDesktopPane jDesktopPane50;
    private javax.swing.JDesktopPane jDesktopPane51;
    private javax.swing.JDesktopPane jDesktopPane52;
    private javax.swing.JDesktopPane jDesktopPane53;
    private javax.swing.JDesktopPane jDesktopPane54;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLayeredPane jLayeredPane39;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane68;
    private javax.swing.JScrollPane jScrollPane69;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane71;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JList scale_jList;
    private javax.swing.JLabel unit_jLabel;
    // End of variables declaration//GEN-END:variables


//PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
//****************************************************************************
//                             Populate
//****************************************************************************
//PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP

private void populateForm()
{
            this.repaint();
            this.pack();
 }

//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
//                       Get Planned Objectives Model
//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
public  DefaultComboBoxModel getSelectedScaleModel()
{
  DefaultComboBoxModel dcm=null;
  ArrayList<String> selectedScaleList=new ArrayList<String>();
  String[] scaleArrayNames = null;
  if (this.qualitativeMeasure!=null)
  {
      if (this.qualitativeMeasure.getScale().size()>0)
      {
        selectedScaleList=this.qualitativeMeasure.getScale();
        int size=selectedScaleList.size();
        scaleArrayNames = new String[size];
        int i=0;
        for (Object o:selectedScaleList)
            {
              //--------------------------------------------------------------
              String thisCause=(String) o;
              //--------------------------------------------------------------
              scaleArrayNames[i]=thisCause;
              i=i+1;
              //--------------------------------------------------------------
             }
        dcm=new DefaultComboBoxModel(scaleArrayNames);
        return dcm;
        }
     else
      {
        String thisNames[] ={"<No category yet>"};
        dcm=new DefaultComboBoxModel(thisNames);
        return dcm;
      }
  }
 else
    {
    String thisNames[] ={"<No category yet>"};
    dcm=new DefaultComboBoxModel(thisNames);
     return dcm;
    }
 }


//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
//                       Get Project Resources Model
//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
public  DefaultComboBoxModel getSourcesModel()
{
  DefaultComboBoxModel dcm=null;
  ArrayList<Source> sourcesList=new ArrayList<Source>();
  String[] sourcesArrayNames = null;
  if (Global.project!=null && Global.project.getSources()!=null)
  {
      if ( Global.project.getSources().getSourcesList().size()>0)
      {
        sourcesList=Global.project.getSources().getSourcesList();
        int size=sourcesList.size();
        sourcesArrayNames = new String[size];
        int i=0;
        for (Object o:sourcesList)
            {
            String result="";
             if (o.getClass().getSimpleName().equals("InternalSource"))
              {
                  InternalSource thisSource=(InternalSource) o;
                  result=thisSource.toString();
              }
              else if (o.getClass().getSimpleName().equals("ExternalSource"))
              {
                  ExternalSource thisSource=(ExternalSource) o;
                  result=thisSource.toString();
              }
              else if (o.getClass().getSimpleName().equals("HumanSource"))
              {
                  HumanSource thisSource=(HumanSource) o;
                  result=thisSource.toString();
              }
              sourcesArrayNames[i]=result;
              i=i+1;
              //--------------------------------------------------------------
             }
        dcm=new DefaultComboBoxModel(sourcesArrayNames);
        return dcm;
        }
     else
      {
        String thisNames[] ={"<No sources available yet>"};
        dcm=new DefaultComboBoxModel(thisNames);
        return dcm;
      }
  }
 else
    {
    String thisNames[] ={"<No sources available yet>"};
    dcm=new DefaultComboBoxModel(thisNames);
     return dcm;
    }
 }

//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
//                       Get Project Remeasures Model
//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
public  DefaultComboBoxModel getSelectedMeasuresModel()
{
  DefaultComboBoxModel dcm=null;
  ArrayList<Measure> measuresList=new ArrayList<Measure>();
  String[] measuresArrayNames = null;
  if (this.selectionJustification!=null && this.selectionJustification.getMeasurability()!=null)
  {
      if ( this.selectionJustification.getMeasurability().getMeasuresList().size()>0)
      {
        measuresList=this.selectionJustification.getMeasurability().getMeasuresList();
        int size=measuresList.size();
        measuresArrayNames = new String[size];
        int i=0;
        for (Object o:measuresList)
            {
            String result="";
             if (o.getClass().getSimpleName().equals("BooleanMeasure"))
              {
                  BooleanMeasure thisMeasure=(BooleanMeasure) o;
                  result=thisMeasure.toString();
              }
              else if (o.getClass().getSimpleName().equals("QualitativeMeasure"))
              {
                  QualitativeMeasure thisMeasure=(QualitativeMeasure) o;
                  result=thisMeasure.toString();
              }
              else if (o.getClass().getSimpleName().equals("QuantitativeMeasure"))
              {
                  QuantitativeMeasure thisMeasure=(QuantitativeMeasure) o;
                  result=thisMeasure.toString();
              }
              else 
              {
                  Measure thisMeasure=(Measure) o;
                  result=thisMeasure.toString();                  
              }
              measuresArrayNames[i]=result;
              i=i+1;
              //--------------------------------------------------------------
             }
        dcm=new DefaultComboBoxModel(measuresArrayNames);
        return dcm;
        }
     else
      {
        String myNames[] ={"<No measure selected yet>"};
        dcm=new DefaultComboBoxModel(myNames);
        return dcm;
      }
  }
 else
    {
    String myNames[] ={"<No measures selected yet>"};
    dcm=new DefaultComboBoxModel(myNames);
     return dcm;
    }
 }

//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
//                       Get Project Resources Model
//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
public  DefaultComboBoxModel getSelectedSourcesModel()
{
  DefaultComboBoxModel dcm=null;
  ArrayList<Source> selectedSourcesList=new ArrayList<Source>();
  String[] sourcesArrayNames = null;
  if (this.selectionJustification!=null && this.selectionJustification.getTraceability()!=null)
  {
      if (this.selectionJustification.getTraceability().getSourcesList().size()>0)
      {
        selectedSourcesList=this.selectionJustification.getTraceability().getSourcesList();
        int size=selectedSourcesList.size();
        sourcesArrayNames = new String[size];
        int i=0;
        for (Object o:selectedSourcesList)
            {
              String result="";
             if (o.getClass().getSimpleName().equals("InternalSource"))
              {
                  InternalSource thisSource=(InternalSource) o;
                  result=thisSource.toString();
              }
              else if (o.getClass().getSimpleName().equals("ExternalSource"))
              {
                  ExternalSource thisSource=(ExternalSource) o;
                  result=thisSource.toString();
              }
              else if (o.getClass().getSimpleName().equals("HumanSource"))
              {
                  HumanSource thisSource=(HumanSource) o;
                  result=thisSource.toString();
              }
              sourcesArrayNames[i]=result;
              i=i+1;
             }
        dcm=new DefaultComboBoxModel(sourcesArrayNames);
        return dcm;
        }
     else
      {
        String myNames[] ={"<No source selected yet>"};
        dcm=new DefaultComboBoxModel(myNames);
        return dcm;
      }
  }
 else
    {
    String myNames[] ={"<No source selected yet>"};
    dcm=new DefaultComboBoxModel(myNames);
     return dcm;
    }
 }




//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
//                       Get Project Resources Model
//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
public  DefaultComboBoxModel getProjectResourcesModel()
{
  DefaultComboBoxModel dcm=null;
  ArrayList<Resource> resourcesList=new ArrayList<Resource>();
  String[] resourcesArrayNames = null;
  if (Global.project!=null
          && Global.project.getSupplements()!=null
          && Global.project.getSupplements().getManagement()!=null )
  {
      if (  Global.project.getSupplements().getManagement().getResources()!=null
              && Global.project.getSupplements().getManagement().getResources().getResourcesList().size()>0)
      {
        resourcesList=Global.project.getSupplements().getManagement().getResources().getResourcesList();
        int size=resourcesList.size();
        resourcesArrayNames = new String[size];
        int i=0;
        for (Object o:resourcesList)
            {
              Resource thisResource=(Resource) o;
              String result="";
              if (thisResource.getResourceType()!=null)
                  result=thisResource.getResourceType().toString()+"  ";
              if (thisResource.getDescription()!=null)
                   result=result+ thisResource.getDescription();
              resourcesArrayNames[i]=result;
              i=i+1;
             }
        dcm=new DefaultComboBoxModel(resourcesArrayNames);
        return dcm;
        }
     else
      {
        String thisNames[] ={"<No resource available yet>"};
        dcm=new DefaultComboBoxModel(thisNames);
        return dcm;
      }
  }
 else
    {
    String thisNames[] ={"<No resource available yet>"};
    dcm=new DefaultComboBoxModel(thisNames);
     return dcm;
    }
 }


//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
//                       Get Project Remeasures Model
//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
public  DefaultComboBoxModel getExpectedOutcomes()
{

 //private MeasurmentOutcome expectedOutcome =null;
  DefaultComboBoxModel dcm=null;
  ArrayList<MeasurmentOutcome> expectedOutcomesList=new ArrayList<MeasurmentOutcome>();
  String[] expectedOutcomesArrayNames = null;
  if (this.selectionJustification!=null &&this.selectionJustification.getSuccessCriteria()!=null &&
      this.selectionJustification.getSuccessCriteria().getExpectedOutcomes()!=null)
  {
      if ( this.selectionJustification.getSuccessCriteria().getExpectedOutcomes().getOutcomesList().size()>0)
      {
        expectedOutcomesList=this.selectionJustification.getSuccessCriteria().getExpectedOutcomes().getOutcomesList();
        int size=expectedOutcomesList.size();
        expectedOutcomesArrayNames = new String[size];
        int i=0;
        for (Object o:expectedOutcomesList)
            {
            String result="";
            MeasurmentOutcome  measurmentOutcome=(MeasurmentOutcome) o;

                  result=measurmentOutcome.toString();

              expectedOutcomesArrayNames[i]=result;
              i=i+1;
              //--------------------------------------------------------------
             }
        dcm=new DefaultComboBoxModel(expectedOutcomesArrayNames);
        return dcm;
        }
     else
      {
        String thisNames[] ={"<No expected outcome selected yet>"};
        dcm=new DefaultComboBoxModel(thisNames);
        return dcm;
      }
  }
 else
    {
    String thisNames[] ={"<No expected outcome selected yet>"};
    dcm=new DefaultComboBoxModel(thisNames);
     return dcm;
    }
 }

//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
//                       Get Planned Resources Model
//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
public  DefaultComboBoxModel getExpectedResourcesModel()
{
  DefaultComboBoxModel dcm=null;
  ArrayList<Resource> resourcesList=new ArrayList<Resource>();
  String[] resourcesArrayNames = null;

 if (this.selectionJustification!=null &&
     this.selectionJustification.getFeasibility()!=null &&
     this.selectionJustification.getFeasibility().getRequiredResources()!=null)

  {
      if (this.selectionJustification.getFeasibility().getRequiredResources().getResourcesList().size()>0)
      {
        resourcesList=this.selectionJustification.getFeasibility().getRequiredResources().getResourcesList();
        int size=resourcesList.size();
        resourcesArrayNames = new String[size];
        int i=0;
        for (Object o:resourcesList)
            {
              Resource thisResource=(Resource) o;
              String result="";
              if (thisResource.getResourceType()!=null)
                  result=thisResource.getResourceType().toString()+"  ";
              if (thisResource.getDescription()!=null)
                   result=result+ thisResource.getDescription();
              resourcesArrayNames[i]=result;
              i=i+1;
             }
        dcm=new DefaultComboBoxModel(resourcesArrayNames);
        return dcm;
        }
     else
      {
        String thisNames[] ={"<No selected resource yet>"};
        dcm=new DefaultComboBoxModel(thisNames);
        return dcm;
      }
  }
 else
    {
    String thisNames[] ={"<No selected resource yet>"};
    dcm=new DefaultComboBoxModel(thisNames);
     return dcm;
    }
 }

}
