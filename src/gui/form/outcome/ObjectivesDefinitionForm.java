/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PerformingForm.java
 *
 * Created on 04-Oct-2010, 12:08:43
 */

package gui.form.outcome;

import global.Global;

import gui.form.supplement.ManagementForm;
import gui.form.supplement.SourceForm;
import java.io.IOException;

import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;


import process_model.general.SuccessCriteria;
import process_model.issue.measurement.BooleanMeasure;
import process_model.issue.measurement.BooleanMeasureResult;
import process_model.issue.measurement.Measure;
import process_model.issue.measurement.Measure.MeasureType;
import process_model.issue.measurement.Measures;
import process_model.issue.measurement.MeasurmentOutcome;
import process_model.issue.measurement.MeasurmentOutcomes;
import process_model.issue.measurement.QualitativeMeasure;
import process_model.issue.measurement.QualitativeMeasureResult;
import process_model.issue.measurement.QuantitativeMeasure;
import process_model.issue.measurement.QuantitativeMeasureResult;
import process_model.issue.tracibility.ExternalSource;
import process_model.issue.tracibility.HumanSource;
import process_model.issue.tracibility.InternalSource;
import process_model.issue.tracibility.Source;
import process_model.issue.tracibility.Sources;
import process_model.phase.Phase;
import process_model.process.result.Result;
import process_model.phase.delivery.process_objective.Acheivability;
import process_model.phase.delivery.process_objective.DataMiningObjective;
import process_model.supplement.management.fesability.Feasibility;
import process_model.supplement.management.resource.Resource;
import process_model.supplement.management.resource.Resources;
import project.Project;
import process_model.process.Process;
/**
 *
 * @author amb04
 */
public class ObjectivesDefinitionForm extends javax.swing.JFrame {
 private DataMiningObjective processObjective=null;
 //private Delivery processObjective=null;
 //private Delivery processObjective= new DataMiningObjective();
String names[];
private Resource resource;
private Source source=null;
private Measure measure=null;
private MeasurmentOutcome expectedOutcome =null;
//boolean viewOnly=false;


//AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
    private String approaches[]={"","Hypotheis-Driven", "Data-Driven","Other"};    
    //
    /** Creates new form PlanningForm */
//CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
public ObjectivesDefinitionForm() {
    
     initComponents();
     this.refresh_processObjective();
     this.populate_processObjective();    
     this.Boolean_jCheckBox.setVisible(false);
     this.Result_jTextField.setVisible(false);
     this.setTitle("Objectives Definition: "+Global.currentPhase.getTitle());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Performing_jLayeredPane = new javax.swing.JLayeredPane();
        Performing_Details_jDesktopPane_jDesktopPane = new javax.swing.JDesktopPane();
        Performing_Details_TabbedPane = new javax.swing.JTabbedPane();
        Performing_Justification_jLayeredPane = new javax.swing.JLayeredPane();
        jPanel2 = new javax.swing.JPanel();
        Justification_Source_jDesktopPane = new javax.swing.JDesktopPane();
        Justification_Sources_Control_jDesktopPane = new javax.swing.JDesktopPane();
        Justification_Sources_Select_jButton = new javax.swing.JButton();
        Sources_UnSelect_jButton = new javax.swing.JButton();
        Justification_Sources_Edit_jButton = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        Sources_jList = new javax.swing.JList();
        jScrollPane6 = new javax.swing.JScrollPane();
        Selected_Sources_jList = new javax.swing.JList();
        Performing_Performer_jDesktopPane = new javax.swing.JLayeredPane();
        Performing_Performer_jDesktopPane1 = new javax.swing.JDesktopPane();
        Planning_Planner_jDesktopPane = new javax.swing.JDesktopPane();
        Planning_Planner_info_jDesktopPane = new javax.swing.JDesktopPane();
        Planning_Planner_Name_jLabel = new javax.swing.JLabel();
        Criteria_jTextField = new javax.swing.JTextField();
        jScrollPane9 = new javax.swing.JScrollPane();
        Selected_Measures_jList = new javax.swing.JList();
        Planning_Planner_info_jDesktopPane2 = new javax.swing.JDesktopPane();
        unit_jLabel = new javax.swing.JLabel();
        Unit_jTextField = new javax.swing.JTextField();
        Planning_Planner_Name_jLabel5 = new javax.swing.JLabel();
        Min_jTextField = new javax.swing.JTextField();
        Planning_Planner_Name_jLabel6 = new javax.swing.JLabel();
        Max_jTextField = new javax.swing.JTextField();
        Planning_Planner_info_jDesktopPane3 = new javax.swing.JDesktopPane();
        Planning_Planner_Name_jLabel7 = new javax.swing.JLabel();
        Category_jTextField = new javax.swing.JTextField();
        Scale_Add_jButton = new javax.swing.JButton();
        Scale_Delete_jButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        scale_jList = new javax.swing.JList();
        CategoryName_jTextField = new javax.swing.JTextField();
        Planning_Planner_Name_jLabel8 = new javax.swing.JLabel();
        Planning_Objectives_Control_jDesktopPane6 = new javax.swing.JDesktopPane();
        Solution_Sources_Select_jButton2 = new javax.swing.JButton();
        Solution_Sources_Edit_jButton2 = new javax.swing.JButton();
        Planning_Objectives_Control_jDesktopPane7 = new javax.swing.JDesktopPane();
        Solution_Sources_Select_jButton3 = new javax.swing.JButton();
        Planning_Objectives_Control_jDesktopPane8 = new javax.swing.JDesktopPane();
        Solution_Sources_Select_jButton4 = new javax.swing.JButton();
        Planning_Planner_jDesktopPane1 = new javax.swing.JDesktopPane();
        jScrollPane10 = new javax.swing.JScrollPane();
        Measurments_jList = new javax.swing.JList();
        Solution_Sources_Edit_jButton3 = new javax.swing.JButton();
        Planning_CustomisedPlanItem_jLabel1 = new javax.swing.JLabel();
        jScrollPane69 = new javax.swing.JScrollPane();
        SuccessCriteria_jTextPane = new javax.swing.JTextPane();
        Planning_Objectives_Control_jDesktopPane10 = new javax.swing.JDesktopPane();
        Solution_Sources_Select_jButton6 = new javax.swing.JButton();
        Planning_Planner_Name_jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Selected_ExpectedMeasurmentOutcomes_jList = new javax.swing.JList();
        Planning_Planner_info_jDesktopPane1 = new javax.swing.JDesktopPane();
        Result_jTextField = new javax.swing.JTextField();
        Boolean_jCheckBox = new javax.swing.JCheckBox();
        Scale_jComboBox = new javax.swing.JComboBox();
        jLayeredPane39 = new javax.swing.JLayeredPane();
        Planning_Resource_jDesktopPane = new javax.swing.JDesktopPane();
        Planning_Objectives_Control_jDesktopPane1 = new javax.swing.JDesktopPane();
        Resources_Select_jButton = new javax.swing.JButton();
        Resources_UnSelect_jButton = new javax.swing.JButton();
        Resource_Edit_jButton = new javax.swing.JButton();
        Reporting_Customised_jDesktopPane3 = new javax.swing.JDesktopPane();
        Reporting_Customised_jDesktopPane4 = new javax.swing.JDesktopPane();
        RemainingTime_jTextField = new javax.swing.JTextField();
        Project_Constraint_RemainingDuration_jLabel1 = new javax.swing.JLabel();
        Reporting_Customised_jDesktopPane6 = new javax.swing.JDesktopPane();
        Project_Constraint_RemainingFunds_jLabel1 = new javax.swing.JLabel();
        RemainingFunds_jTextField = new javax.swing.JTextField();
        jScrollPane7 = new javax.swing.JScrollPane();
        Resources_jList = new javax.swing.JList();
        Reporting_Customised_jDesktopPane5 = new javax.swing.JDesktopPane();
        jScrollPane11 = new javax.swing.JScrollPane();
        Selected_Resources_jList = new javax.swing.JList();
        Resource_jDesktopPane = new javax.swing.JDesktopPane();
        PerformedActivityDuration_jLabel1 = new javax.swing.JLabel();
        Duration_jTextField = new javax.swing.JTextField();
        Feasible_jCheckBox = new javax.swing.JCheckBox();
        Planning_CustomisedPlan_jDesktopPane = new javax.swing.JDesktopPane();
        Performed_Plan_jPanel = new javax.swing.JPanel();
        Fulfilled_jCheckBox = new javax.swing.JCheckBox();
        jScrollPane68 = new javax.swing.JScrollPane();
        Description_jTextPane = new javax.swing.JTextPane();
        Planning_CustomisedPlanItem_jLabel = new javax.swing.JLabel();
        Planning_Planner_Role_jLabel1 = new javax.swing.JLabel();
        Approaches_jComboBox = new javax.swing.JComboBox();
        jDesktopPane45 = new javax.swing.JDesktopPane();
        DataRelivant_jCheckBox = new javax.swing.JCheckBox();
        jDesktopPane46 = new javax.swing.JDesktopPane();
        AcheivableWithData_jCheckBox = new javax.swing.JCheckBox();
        jDesktopPane47 = new javax.swing.JDesktopPane();
        DataSufficient_jCheckBox = new javax.swing.JCheckBox();
        Control_jDesktopPane = new javax.swing.JDesktopPane();
        Save_jButton = new javax.swing.JButton();
        Refresh_jButton = new javax.swing.JButton();
        Delete_jButton = new javax.swing.JButton();
        New_jDesktopPane = new javax.swing.JDesktopPane();
        New_jButton1 = new javax.swing.JButton();
        Add_jButton1 = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowDeactivated(java.awt.event.WindowEvent evt) {
                formWindowDeactivated(evt);
            }
        });

        Performing_jLayeredPane.setBackground(new java.awt.Color(255, 255, 204));
        Performing_jLayeredPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        Performing_Details_jDesktopPane_jDesktopPane.setBackground(new java.awt.Color(255, 255, 204));
        Performing_Details_jDesktopPane_jDesktopPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel2.setBackground(new java.awt.Color(255, 255, 153));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        Justification_Source_jDesktopPane.setBackground(new java.awt.Color(255, 255, 153));
        Justification_Source_jDesktopPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Supporting Evidences"));

        Justification_Sources_Control_jDesktopPane.setBackground(new java.awt.Color(255, 255, 153));

        Justification_Sources_Select_jButton.setText("+>");
        Justification_Sources_Select_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Justification_Sources_Select_jButtonActionPerformed(evt);
            }
        });
        Justification_Sources_Select_jButton.setBounds(0, 0, 60, 20);
        Justification_Sources_Control_jDesktopPane.add(Justification_Sources_Select_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Sources_UnSelect_jButton.setText("<+");
        Sources_UnSelect_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Sources_UnSelect_jButtonActionPerformed1(evt);
            }
        });
        Sources_UnSelect_jButton.setBounds(0, 22, 60, 20);
        Justification_Sources_Control_jDesktopPane.add(Sources_UnSelect_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Justification_Sources_Edit_jButton.setText("Edit");
        Justification_Sources_Edit_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Justification_Sources_Edit_jButtonActionPerformed(evt);
            }
        });
        Justification_Sources_Edit_jButton.setBounds(0, 50, 60, 20);
        Justification_Sources_Control_jDesktopPane.add(Justification_Sources_Edit_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Justification_Sources_Control_jDesktopPane.setBounds(430, 20, 60, 110);
        Justification_Source_jDesktopPane.add(Justification_Sources_Control_jDesktopPane, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Sources_jList.setBorder(javax.swing.BorderFactory.createTitledBorder("Available Sources"));
        Sources_jList.setModel(this.getSourcesModel());
        Sources_jList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        Sources_jList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                Sources_jListValueChanged(evt);
            }
        });
        jScrollPane5.setViewportView(Sources_jList);

        jScrollPane5.setBounds(20, 20, 410, 300);
        Justification_Source_jDesktopPane.add(jScrollPane5, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Selected_Sources_jList.setBorder(javax.swing.BorderFactory.createTitledBorder("Objectives Sources"));
        Selected_Sources_jList.setModel(this.getSelectedSourcesModel());
        Selected_Sources_jList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        Selected_Sources_jList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                Selected_Sources_jListValueChanged(evt);
            }
        });
        jScrollPane6.setViewportView(Selected_Sources_jList);

        jScrollPane6.setBounds(490, 20, 390, 300);
        Justification_Source_jDesktopPane.add(jScrollPane6, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Justification_Source_jDesktopPane, javax.swing.GroupLayout.DEFAULT_SIZE, 892, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Justification_Source_jDesktopPane, javax.swing.GroupLayout.DEFAULT_SIZE, 330, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel2.setBounds(0, 0, 920, 360);
        Performing_Justification_jLayeredPane.add(jPanel2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Performing_Details_TabbedPane.addTab("Tracibility", Performing_Justification_jLayeredPane);

        Performing_Performer_jDesktopPane1.setBackground(new java.awt.Color(255, 255, 204));
        Performing_Performer_jDesktopPane1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        Planning_Planner_jDesktopPane.setBackground(new java.awt.Color(255, 255, 204));
        Planning_Planner_jDesktopPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        Planning_Planner_info_jDesktopPane.setBackground(new java.awt.Color(255, 255, 153));
        Planning_Planner_info_jDesktopPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        Planning_Planner_info_jDesktopPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Planning_Planner_info_jDesktopPaneMouseClicked(evt);
            }
        });

        Planning_Planner_Name_jLabel.setText("Criteria");
        Planning_Planner_Name_jLabel.setBounds(10, 10, 80, 20);
        Planning_Planner_info_jDesktopPane.add(Planning_Planner_Name_jLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Criteria_jTextField.setBackground(new java.awt.Color(255, 255, 204));
        Criteria_jTextField.setBounds(10, 30, 280, 20);
        Planning_Planner_info_jDesktopPane.add(Criteria_jTextField, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Planner_info_jDesktopPane.setBounds(10, 290, 320, 60);
        Planning_Planner_jDesktopPane.add(Planning_Planner_info_jDesktopPane, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Selected_Measures_jList.setBorder(javax.swing.BorderFactory.createTitledBorder("Objectives Measurements"));
        Selected_Measures_jList.setModel(getSelectedMeasuresModel());
        Selected_Measures_jList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                Selected_Measures_jListValueChanged(evt);
            }
        });
        jScrollPane9.setViewportView(Selected_Measures_jList);

        jScrollPane9.setBounds(410, 10, 470, 310);
        Planning_Planner_jDesktopPane.add(jScrollPane9, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Planner_info_jDesktopPane2.setBackground(new java.awt.Color(255, 255, 153));
        Planning_Planner_info_jDesktopPane2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        Planning_Planner_info_jDesktopPane2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Planning_Planner_info_jDesktopPane2MouseClicked(evt);
            }
        });

        unit_jLabel.setText("Unit");
        unit_jLabel.setBounds(20, 10, 80, 20);
        Planning_Planner_info_jDesktopPane2.add(unit_jLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Unit_jTextField.setBackground(new java.awt.Color(255, 255, 204));
        Unit_jTextField.setBounds(20, 30, 90, 20);
        Planning_Planner_info_jDesktopPane2.add(Unit_jTextField, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Planner_Name_jLabel5.setText("Minimum Value");
        Planning_Planner_Name_jLabel5.setBounds(120, 10, 100, 20);
        Planning_Planner_info_jDesktopPane2.add(Planning_Planner_Name_jLabel5, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Min_jTextField.setBackground(new java.awt.Color(255, 255, 204));
        Min_jTextField.setBounds(120, 30, 70, 20);
        Planning_Planner_info_jDesktopPane2.add(Min_jTextField, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Planner_Name_jLabel6.setText("Maximum value");
        Planning_Planner_Name_jLabel6.setBounds(220, 10, 100, 20);
        Planning_Planner_info_jDesktopPane2.add(Planning_Planner_Name_jLabel6, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Max_jTextField.setBackground(new java.awt.Color(255, 255, 204));
        Max_jTextField.setBounds(220, 30, 70, 20);
        Planning_Planner_info_jDesktopPane2.add(Max_jTextField, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Planner_info_jDesktopPane2.setBounds(10, 10, 320, 70);
        Planning_Planner_jDesktopPane.add(Planning_Planner_info_jDesktopPane2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Planner_info_jDesktopPane3.setBackground(new java.awt.Color(255, 255, 153));
        Planning_Planner_info_jDesktopPane3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        Planning_Planner_info_jDesktopPane3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Planning_Planner_info_jDesktopPane3MouseClicked(evt);
            }
        });

        Planning_Planner_Name_jLabel7.setText("Name");
        Planning_Planner_Name_jLabel7.setBounds(10, 10, 60, 20);
        Planning_Planner_info_jDesktopPane3.add(Planning_Planner_Name_jLabel7, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Category_jTextField.setBackground(new java.awt.Color(255, 255, 204));
        Category_jTextField.setBounds(110, 40, 200, 20);
        Planning_Planner_info_jDesktopPane3.add(Category_jTextField, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Scale_Add_jButton.setText("+");
        Scale_Add_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Scale_Add_jButtonActionPerformed(evt);
            }
        });
        Scale_Add_jButton.setBounds(10, 70, 50, 20);
        Planning_Planner_info_jDesktopPane3.add(Scale_Add_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Scale_Delete_jButton.setText("-");
        Scale_Delete_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Scale_Delete_jButtonActionPerformed(evt);
            }
        });
        Scale_Delete_jButton.setBounds(60, 70, 50, 20);
        Planning_Planner_info_jDesktopPane3.add(Scale_Delete_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        scale_jList.setBackground(new java.awt.Color(255, 255, 204));
        scale_jList.setBorder(javax.swing.BorderFactory.createTitledBorder("Scale"));
        scale_jList.setModel(getSelectedScaleModel());
        scale_jList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        scale_jList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                scale_jListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(scale_jList);

        jScrollPane2.setBounds(10, 90, 300, 80);
        Planning_Planner_info_jDesktopPane3.add(jScrollPane2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        CategoryName_jTextField.setBackground(new java.awt.Color(255, 255, 204));
        CategoryName_jTextField.setBounds(50, 10, 260, 20);
        Planning_Planner_info_jDesktopPane3.add(CategoryName_jTextField, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Planner_Name_jLabel8.setText("Scale Category");
        Planning_Planner_Name_jLabel8.setBounds(10, 40, 110, 20);
        Planning_Planner_info_jDesktopPane3.add(Planning_Planner_Name_jLabel8, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Planner_info_jDesktopPane3.setBounds(10, 90, 320, 190);
        Planning_Planner_jDesktopPane.add(Planning_Planner_info_jDesktopPane3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Objectives_Control_jDesktopPane6.setBackground(new java.awt.Color(255, 255, 153));

        Solution_Sources_Select_jButton2.setText("+>");
        Solution_Sources_Select_jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Solution_Sources_Select_jButton2ActionPerformed(evt);
            }
        });
        Solution_Sources_Select_jButton2.setBounds(0, 0, 70, 20);
        Planning_Objectives_Control_jDesktopPane6.add(Solution_Sources_Select_jButton2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Objectives_Control_jDesktopPane6.setBounds(330, 290, 70, 20);
        Planning_Planner_jDesktopPane.add(Planning_Objectives_Control_jDesktopPane6, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Solution_Sources_Edit_jButton2.setText("Delete");
        Solution_Sources_Edit_jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Solution_Sources_Edit_jButton2ActionPerformed(evt);
            }
        });
        Solution_Sources_Edit_jButton2.setBounds(410, 320, 470, 20);
        Planning_Planner_jDesktopPane.add(Solution_Sources_Edit_jButton2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Objectives_Control_jDesktopPane7.setBackground(new java.awt.Color(255, 255, 204));

        Solution_Sources_Select_jButton3.setText("+>");
        Solution_Sources_Select_jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Solution_Sources_Select_jButton3ActionPerformed(evt);
            }
        });
        Solution_Sources_Select_jButton3.setBounds(0, 0, 70, 20);
        Planning_Objectives_Control_jDesktopPane7.add(Solution_Sources_Select_jButton3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Objectives_Control_jDesktopPane7.setBounds(330, 10, 70, 20);
        Planning_Planner_jDesktopPane.add(Planning_Objectives_Control_jDesktopPane7, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Objectives_Control_jDesktopPane8.setBackground(new java.awt.Color(255, 255, 204));

        Solution_Sources_Select_jButton4.setText("+>");
        Solution_Sources_Select_jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Solution_Sources_Select_jButton4ActionPerformed(evt);
            }
        });
        Solution_Sources_Select_jButton4.setBounds(0, 0, 70, 20);
        Planning_Objectives_Control_jDesktopPane8.add(Solution_Sources_Select_jButton4, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Objectives_Control_jDesktopPane8.setBounds(330, 90, 70, 20);
        Planning_Planner_jDesktopPane.add(Planning_Objectives_Control_jDesktopPane8, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Planner_jDesktopPane.setBounds(10, 10, 900, 360);
        Performing_Performer_jDesktopPane1.add(Planning_Planner_jDesktopPane, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Performing_Performer_jDesktopPane1.setBounds(10, 0, 920, 380);
        Performing_Performer_jDesktopPane.add(Performing_Performer_jDesktopPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Performing_Details_TabbedPane.addTab("Measurability", Performing_Performer_jDesktopPane);

        Planning_Planner_jDesktopPane1.setBackground(new java.awt.Color(255, 255, 204));
        Planning_Planner_jDesktopPane1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        Measurments_jList.setBorder(javax.swing.BorderFactory.createTitledBorder("Objectives Measurements"));
        Measurments_jList.setModel(getSelectedMeasuresModel());
        Measurments_jList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                Measurments_jListValueChanged(evt);
            }
        });
        jScrollPane10.setViewportView(Measurments_jList);

        jScrollPane10.setBounds(10, 80, 320, 180);
        Planning_Planner_jDesktopPane1.add(jScrollPane10, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Solution_Sources_Edit_jButton3.setText("Delete");
        Solution_Sources_Edit_jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Solution_Sources_Edit_jButton3ActionPerformed(evt);
            }
        });
        Solution_Sources_Edit_jButton3.setBounds(400, 330, 470, 25);
        Planning_Planner_jDesktopPane1.add(Solution_Sources_Edit_jButton3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_CustomisedPlanItem_jLabel1.setText("Success Criteria");
        Planning_CustomisedPlanItem_jLabel1.setBounds(10, 10, 124, 20);
        Planning_Planner_jDesktopPane1.add(Planning_CustomisedPlanItem_jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jScrollPane69.setViewportView(SuccessCriteria_jTextPane);

        jScrollPane69.setBounds(10, 30, 860, 40);
        Planning_Planner_jDesktopPane1.add(jScrollPane69, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Objectives_Control_jDesktopPane10.setBackground(new java.awt.Color(255, 255, 204));

        Solution_Sources_Select_jButton6.setText("+>");
        Solution_Sources_Select_jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Solution_Sources_Select_jButton6ActionPerformed(evt);
            }
        });
        Solution_Sources_Select_jButton6.setBounds(0, 0, 70, 20);
        Planning_Objectives_Control_jDesktopPane10.add(Solution_Sources_Select_jButton6, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Objectives_Control_jDesktopPane10.setBounds(330, 80, 70, 40);
        Planning_Planner_jDesktopPane1.add(Planning_Objectives_Control_jDesktopPane10, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Planner_Name_jLabel1.setText("Expected Result");
        Planning_Planner_Name_jLabel1.setBounds(10, 270, 80, 20);
        Planning_Planner_jDesktopPane1.add(Planning_Planner_Name_jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Selected_ExpectedMeasurmentOutcomes_jList.setBorder(javax.swing.BorderFactory.createTitledBorder("Expected Measurable Outcomes"));
        Selected_ExpectedMeasurmentOutcomes_jList.setModel(getSelectedExpectedOutcomes());
        Selected_ExpectedMeasurmentOutcomes_jList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                Selected_ExpectedMeasurmentOutcomes_jListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(Selected_ExpectedMeasurmentOutcomes_jList);

        jScrollPane1.setBounds(400, 80, 470, 250);
        Planning_Planner_jDesktopPane1.add(jScrollPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Planner_info_jDesktopPane1.setBackground(new java.awt.Color(255, 255, 153));
        Planning_Planner_info_jDesktopPane1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        Planning_Planner_info_jDesktopPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Planning_Planner_info_jDesktopPane1MouseClicked(evt);
            }
        });
        Result_jTextField.setBounds(30, 10, 150, 22);
        Planning_Planner_info_jDesktopPane1.add(Result_jTextField, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Boolean_jCheckBox.setBackground(new java.awt.Color(255, 255, 153));
        Boolean_jCheckBox.setText("True");
        Boolean_jCheckBox.setBounds(10, 10, 70, 22);
        Planning_Planner_info_jDesktopPane1.add(Boolean_jCheckBox, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Scale_jComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "   " }));
        Scale_jComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Scale_jComboBoxActionPerformed(evt);
            }
        });
        Scale_jComboBox.setBounds(10, 10, 200, 22);
        Planning_Planner_info_jDesktopPane1.add(Scale_jComboBox, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Planner_info_jDesktopPane1.setBounds(10, 290, 320, 70);
        Planning_Planner_jDesktopPane1.add(Planning_Planner_info_jDesktopPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Performing_Details_TabbedPane.addTab("Success Criteria", Planning_Planner_jDesktopPane1);

        Planning_Resource_jDesktopPane.setBackground(new java.awt.Color(255, 255, 153));
        Planning_Resource_jDesktopPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        Planning_Resource_jDesktopPane.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Planning_Resource_jDesktopPaneFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                Planning_Resource_jDesktopPaneFocusLost(evt);
            }
        });

        Planning_Objectives_Control_jDesktopPane1.setBackground(new java.awt.Color(255, 255, 153));

        Resources_Select_jButton.setText("+>");
        Resources_Select_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Resources_Select_jButtonActionPerformed(evt);
            }
        });
        Resources_Select_jButton.setBounds(0, 0, 70, 20);
        Planning_Objectives_Control_jDesktopPane1.add(Resources_Select_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Resources_UnSelect_jButton.setText("<-");
        Resources_UnSelect_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Resources_UnSelect_jButtonActionPerformed(evt);
            }
        });
        Resources_UnSelect_jButton.setBounds(0, 20, 70, 20);
        Planning_Objectives_Control_jDesktopPane1.add(Resources_UnSelect_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Resource_Edit_jButton.setText("Edit");
        Resource_Edit_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Resource_Edit_jButtonActionPerformed(evt);
            }
        });
        Resource_Edit_jButton.setBounds(0, 40, 70, 20);
        Planning_Objectives_Control_jDesktopPane1.add(Resource_Edit_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Objectives_Control_jDesktopPane1.setBounds(380, 10, 70, 80);
        Planning_Resource_jDesktopPane.add(Planning_Objectives_Control_jDesktopPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Reporting_Customised_jDesktopPane3.setBackground(new java.awt.Color(255, 255, 204));
        Reporting_Customised_jDesktopPane3.setBorder(javax.swing.BorderFactory.createTitledBorder("Available Resources"));

        Reporting_Customised_jDesktopPane4.setBackground(new java.awt.Color(255, 255, 153));
        Reporting_Customised_jDesktopPane4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        RemainingTime_jTextField.setBackground(new java.awt.Color(255, 255, 153));
        RemainingTime_jTextField.setBounds(150, 10, 160, 25);
        Reporting_Customised_jDesktopPane4.add(RemainingTime_jTextField, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Project_Constraint_RemainingDuration_jLabel1.setText("Remaining Duration");
        Project_Constraint_RemainingDuration_jLabel1.setBounds(20, 10, 130, 25);
        Reporting_Customised_jDesktopPane4.add(Project_Constraint_RemainingDuration_jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Reporting_Customised_jDesktopPane4.setBounds(10, 290, 340, 50);
        Reporting_Customised_jDesktopPane3.add(Reporting_Customised_jDesktopPane4, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Reporting_Customised_jDesktopPane6.setBackground(new java.awt.Color(255, 255, 153));
        Reporting_Customised_jDesktopPane6.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        Project_Constraint_RemainingFunds_jLabel1.setText("Remaining Funds");
        Project_Constraint_RemainingFunds_jLabel1.setBounds(20, 10, 120, 20);
        Reporting_Customised_jDesktopPane6.add(Project_Constraint_RemainingFunds_jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        RemainingFunds_jTextField.setBackground(new java.awt.Color(255, 255, 153));
        RemainingFunds_jTextField.setBounds(150, 10, 160, 25);
        Reporting_Customised_jDesktopPane6.add(RemainingFunds_jTextField, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Reporting_Customised_jDesktopPane6.setBounds(10, 230, 340, 50);
        Reporting_Customised_jDesktopPane3.add(Reporting_Customised_jDesktopPane6, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Resources_jList.setBorder(javax.swing.BorderFactory.createTitledBorder("Project Resources"));
        Resources_jList.setModel(this.getProjectResourcesModel());
        Resources_jList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        Resources_jList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                Resources_jListValueChanged(evt);
            }
        });
        jScrollPane7.setViewportView(Resources_jList);

        jScrollPane7.setBounds(10, 30, 340, 190);
        Reporting_Customised_jDesktopPane3.add(jScrollPane7, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Reporting_Customised_jDesktopPane3.setBounds(10, 10, 370, 360);
        Planning_Resource_jDesktopPane.add(Reporting_Customised_jDesktopPane3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Reporting_Customised_jDesktopPane5.setBackground(new java.awt.Color(255, 255, 204));
        Reporting_Customised_jDesktopPane5.setBorder(javax.swing.BorderFactory.createTitledBorder("Required Resources"));

        Selected_Resources_jList.setBorder(javax.swing.BorderFactory.createTitledBorder("Objective Required Resources"));
        Selected_Resources_jList.setModel(this.getSelectedResourcesModel());
        Selected_Resources_jList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        Selected_Resources_jList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                Selected_Resources_jListValueChanged(evt);
            }
        });
        jScrollPane11.setViewportView(Selected_Resources_jList);

        jScrollPane11.setBounds(20, 30, 420, 190);
        Reporting_Customised_jDesktopPane5.add(jScrollPane11, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Resource_jDesktopPane.setBackground(new java.awt.Color(255, 255, 153));
        Resource_jDesktopPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        Resource_jDesktopPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Resource_jDesktopPaneMouseClicked(evt);
            }
        });

        PerformedActivityDuration_jLabel1.setText("Required Time");
        PerformedActivityDuration_jLabel1.setBounds(40, 40, 100, 22);
        Resource_jDesktopPane.add(PerformedActivityDuration_jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        Duration_jTextField.setBounds(140, 40, 140, 22);
        Resource_jDesktopPane.add(Duration_jTextField, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Feasible_jCheckBox.setBackground(new java.awt.Color(255, 255, 153));
        Feasible_jCheckBox.setText("Feasible");
        Feasible_jCheckBox.setBounds(300, 40, 103, 25);
        Resource_jDesktopPane.add(Feasible_jCheckBox, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Resource_jDesktopPane.setBounds(20, 230, 420, 110);
        Reporting_Customised_jDesktopPane5.add(Resource_jDesktopPane, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Reporting_Customised_jDesktopPane5.setBounds(450, 10, 460, 360);
        Planning_Resource_jDesktopPane.add(Reporting_Customised_jDesktopPane5, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Resource_jDesktopPane.setBounds(0, 0, 930, 380);
        jLayeredPane39.add(Planning_Resource_jDesktopPane, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Performing_Details_TabbedPane.addTab("Feasibility", jLayeredPane39);

        Performing_Details_TabbedPane.setBounds(10, 210, 940, 400);
        Performing_Details_jDesktopPane_jDesktopPane.add(Performing_Details_TabbedPane, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_CustomisedPlan_jDesktopPane.setBackground(new java.awt.Color(255, 255, 204));
        Planning_CustomisedPlan_jDesktopPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        Performed_Plan_jPanel.setBackground(new java.awt.Color(255, 255, 153));
        Performed_Plan_jPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        Performed_Plan_jPanel.setLayout(null);

        Fulfilled_jCheckBox.setBackground(new java.awt.Color(255, 255, 153));
        Fulfilled_jCheckBox.setText("Fullfilled");
        Performed_Plan_jPanel.add(Fulfilled_jCheckBox);
        Fulfilled_jCheckBox.setBounds(400, 130, 90, 30);

        jScrollPane68.setViewportView(Description_jTextPane);

        Performed_Plan_jPanel.add(jScrollPane68);
        jScrollPane68.setBounds(82, 10, 530, 110);

        Planning_CustomisedPlanItem_jLabel.setText("Objective");
        Performed_Plan_jPanel.add(Planning_CustomisedPlanItem_jLabel);
        Planning_CustomisedPlanItem_jLabel.setBounds(10, 10, 70, 20);

        Planning_Planner_Role_jLabel1.setText("Data Mining Approach");
        Performed_Plan_jPanel.add(Planning_Planner_Role_jLabel1);
        Planning_Planner_Role_jLabel1.setBounds(10, 130, 150, 20);

        Approaches_jComboBox.setBackground(new java.awt.Color(255, 255, 204));
        Approaches_jComboBox.setModel(new DefaultComboBoxModel(this.approaches));
        Performed_Plan_jPanel.add(Approaches_jComboBox);
        Approaches_jComboBox.setBounds(180, 130, 170, 22);

        Performed_Plan_jPanel.setBounds(10, 10, 630, 170);
        Planning_CustomisedPlan_jDesktopPane.add(Performed_Plan_jPanel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jDesktopPane45.setBackground(new java.awt.Color(255, 255, 153));
        jDesktopPane45.setBorder(javax.swing.BorderFactory.createTitledBorder("Are the data relivent to the objective?"));

        DataRelivant_jCheckBox.setBackground(new java.awt.Color(255, 255, 153));
        DataRelivant_jCheckBox.setText("Yes");
        DataRelivant_jCheckBox.setBounds(10, 20, 70, 20);
        jDesktopPane45.add(DataRelivant_jCheckBox, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jDesktopPane45.setBounds(650, 10, 270, 50);
        Planning_CustomisedPlan_jDesktopPane.add(jDesktopPane45, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jDesktopPane46.setBackground(new java.awt.Color(255, 255, 153));
        jDesktopPane46.setBorder(javax.swing.BorderFactory.createTitledBorder("Are the data sufficient to acheive the objective"));

        AcheivableWithData_jCheckBox.setBackground(new java.awt.Color(255, 255, 153));
        AcheivableWithData_jCheckBox.setText("Yes");
        AcheivableWithData_jCheckBox.setBounds(10, 20, 60, 20);
        jDesktopPane46.add(AcheivableWithData_jCheckBox, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jDesktopPane46.setBounds(650, 130, 270, 50);
        Planning_CustomisedPlan_jDesktopPane.add(jDesktopPane46, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jDesktopPane47.setBackground(new java.awt.Color(255, 255, 153));
        jDesktopPane47.setBorder(javax.swing.BorderFactory.createTitledBorder("Are the data sufficient to acheive the objective"));

        DataSufficient_jCheckBox.setBackground(new java.awt.Color(255, 255, 153));
        DataSufficient_jCheckBox.setText("Yes");
        DataSufficient_jCheckBox.setBounds(10, 20, 70, 20);
        jDesktopPane47.add(DataSufficient_jCheckBox, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jDesktopPane47.setBounds(650, 70, 270, 50);
        Planning_CustomisedPlan_jDesktopPane.add(jDesktopPane47, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_CustomisedPlan_jDesktopPane.setBounds(10, 10, 930, 190);
        Performing_Details_jDesktopPane_jDesktopPane.add(Planning_CustomisedPlan_jDesktopPane, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Control_jDesktopPane.setBackground(new java.awt.Color(255, 255, 153));
        Control_jDesktopPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        Save_jButton.setText("Save");
        Save_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Save_jButtonActionPerformed(evt);
            }
        });
        Save_jButton.setBounds(110, 10, 80, 25);
        Control_jDesktopPane.add(Save_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Refresh_jButton.setText("Refresh");
        Refresh_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Refresh_jButtonActionPerformed(evt);
            }
        });
        Refresh_jButton.setBounds(20, 10, 90, 25);
        Control_jDesktopPane.add(Refresh_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Delete_jButton.setText("Delete");
        Delete_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Delete_jButtonActionPerformed(evt);
            }
        });
        Delete_jButton.setBounds(190, 10, 80, 25);
        Control_jDesktopPane.add(Delete_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Control_jDesktopPane.setBounds(440, 620, 290, 50);
        Performing_Details_jDesktopPane_jDesktopPane.add(Control_jDesktopPane, javax.swing.JLayeredPane.DEFAULT_LAYER);

        New_jDesktopPane.setBackground(new java.awt.Color(255, 255, 153));
        New_jDesktopPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        New_jButton1.setText("New");
        New_jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                New_jButton1ActionPerformed(evt);
            }
        });
        New_jButton1.setBounds(20, 10, 80, 25);
        New_jDesktopPane.add(New_jButton1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Add_jButton1.setText("Add +");
        Add_jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Add_jButton1ActionPerformed(evt);
            }
        });
        Add_jButton1.setBounds(100, 10, 90, 25);
        New_jDesktopPane.add(Add_jButton1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        New_jDesktopPane.setBounds(750, 620, 210, 50);
        Performing_Details_jDesktopPane_jDesktopPane.add(New_jDesktopPane, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Performing_Details_jDesktopPane_jDesktopPane.setBounds(10, 10, 970, 680);
        Performing_jLayeredPane.add(Performing_Details_jDesktopPane_jDesktopPane, javax.swing.JLayeredPane.DEFAULT_LAYER);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(Performing_jLayeredPane, javax.swing.GroupLayout.PREFERRED_SIZE, 990, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Performing_jLayeredPane, javax.swing.GroupLayout.DEFAULT_SIZE, 700, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Save_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Save_jButtonActionPerformed
this.save_processObjective();
}//GEN-LAST:event_Save_jButtonActionPerformed

    private void Refresh_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Refresh_jButtonActionPerformed
       this.refresh_processObjective();
       this.populate_processObjective();
       this.populateForm();

}//GEN-LAST:event_Refresh_jButtonActionPerformed

    private void Planning_Planner_info_jDesktopPaneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Planning_Planner_info_jDesktopPaneMouseClicked
        
}//GEN-LAST:event_Planning_Planner_info_jDesktopPaneMouseClicked

    private void Selected_Measures_jListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_Selected_Measures_jListValueChanged

if (this.processObjective!=null && 
    this.processObjective.getMeasurability()!=null &&
    this.processObjective.getMeasurability().getMeasuresList()!=null &&
    this.processObjective.getMeasurability().getMeasuresList().size()>0 &&
    this.Selected_Measures_jList.getSelectedIndex()>=0)

         this.measure= (Measure) this.processObjective.getMeasurability().getMeasuresList().get(this.Selected_Measures_jList.getSelectedIndex());

}//GEN-LAST:event_Selected_Measures_jListValueChanged

    private void Resources_jListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_Resources_jListValueChanged

   if (Global.project!=null&&Global.project.getSupplements()!=null && 
       Global.project.getSupplements().getManagement()!=null &&
       Global.project.getSupplements().getManagement().getResources()!=null )
       if (this.Resources_jList.getSelectedIndex()>=0)
            this.resource=Global.project.getSupplements().getManagement().
            getResources().getResource(this.Resources_jList.getSelectedIndex());

        this.populateForm();

    }//GEN-LAST:event_Resources_jListValueChanged

    private void Resources_Select_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Resources_Select_jButtonActionPerformed

 this.save_processObjective();
 if (this.processObjective!=null)
 {
        if (this.resource!=null )
        {            
            if (this.processObjective.getFeasibility()==null)
                this.processObjective.setFeasibility(new Feasibility());

            if (this.processObjective.getFeasibility().getRequiredResources()==null)
                this.processObjective.getFeasibility().setRequiredResources(new Resources());

            this.processObjective.getFeasibility().getRequiredResources().save(this.resource);
        }
        this.Selected_Resources_jList.setModel(this.getSelectedResourcesModel());
        
        this.populateForm();
  }
 //else
  //System.out.print("No Objective added yet ...!!!");
}//GEN-LAST:event_Resources_Select_jButtonActionPerformed

    private void Resources_UnSelect_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Resources_UnSelect_jButtonActionPerformed

        if (this.processObjective!=null)
            this.delete_resource();
        //
        this.Selected_Resources_jList.setModel(this.getSelectedResourcesModel());
        //
        this.Selected_Resources_jList.setSelectedIndex(
                this.processObjective.getFeasibility().getRequiredResources().
                getResourcesList().indexOf(this.resource));
        
        this.populateForm();


    }//GEN-LAST:event_Resources_UnSelect_jButtonActionPerformed

    private void Resource_jDesktopPaneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Resource_jDesktopPaneMouseClicked
        ManagementForm projectManagementForm=null;
        projectManagementForm=new ManagementForm(this.resource);
}//GEN-LAST:event_Resource_jDesktopPaneMouseClicked

    private void Justification_Sources_Select_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Justification_Sources_Select_jButtonActionPerformed
this.save_processObjective();
  if (this.processObjective!=null) {

        if (this.processObjective.getTraceability()==null)
            this.processObjective.setTraceability(new Sources());

            this.processObjective.getTraceability().save(this.source);
        }
       else
       {
        //System.out.print("No Objective added yet ...!!!");
        }
        this.Selected_Sources_jList.setModel(this.getSelectedSourcesModel());
        this.populateForm();


    }//GEN-LAST:event_Justification_Sources_Select_jButtonActionPerformed

    private void Sources_UnSelect_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Sources_UnSelect_jButtonActionPerformed

    if (this.processObjective!=null && this.processObjective.getTraceability()!=null )
       this.delete_source();
        

        this.Selected_Sources_jList.setModel(this.getSourcesModel());
        
        this.populateForm();

    }//GEN-LAST:event_Sources_UnSelect_jButtonActionPerformed
//DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
//****************************************************************************
//                           Delete Solution Evidence
//DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
//****************************************************************************
 private void delete_source()
   {
    if (this.processObjective!=null &&this.processObjective.getTraceability()!=null
            && this.processObjective.getTraceability().getSourcesList().size()>0)
  {
        int index= this.processObjective.getTraceability().getSourcesList().indexOf(this.source);
        if (this.processObjective.getTraceability().delete(this.source)==0);
        {
            if (this.processObjective.getTraceability().getSourcesList().size()>0)
            {
                if (index==0)
                    this.source = (Source) this.processObjective.getTraceability().getSourcesList().get(index);
                else if (index>0)
                     this.source = (Source) this.processObjective.getTraceability().getSourcesList().get(index-1);
            }
        }          
 }
}



//DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
//****************************************************************************
//                           Delete Solution Evidence
//DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
//****************************************************************************
 private void delete_measure()
   {
    if (this.processObjective!=null &&this.processObjective.getMeasurability()!=null
            && this.processObjective.getMeasurability().getMeasuresList().size()>0)
  {
        int index= this.processObjective.getMeasurability().getMeasuresList().indexOf(this.measure);
        if (this.processObjective.getMeasurability().delete(this.measure)==0);
        {
            if (this.processObjective.getMeasurability().getMeasuresList().size()>0)
            {
                if (index==0)
                    this.measure = (Measure) this.processObjective.getMeasurability().getMeasuresList().get(index);
                else if (index>0)
                     this.measure = (Measure) this.processObjective.getMeasurability().getMeasuresList().get(index-1);
            }
        }
 }
}

//DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
//****************************************************************************
//                           Delete Solution Evidence
//DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
//****************************************************************************
  private void delete_expected_outcome() {

    if (this.processObjective!=null
            &&this.processObjective.getSuccessCriteria()!=null
            && this.processObjective.getSuccessCriteria().getExpectedOutcomes()!=null
            && this.processObjective.getSuccessCriteria().getExpectedOutcomes().getOutcomesList().size()>0)
  {
        int index= this.processObjective.getSuccessCriteria().
                  getExpectedOutcomes().getOutcomesList().indexOf(this.measure);
        if (this.processObjective.getSuccessCriteria(). getExpectedOutcomes().delete(this.expectedOutcome)==0);
        {
            if (this.processObjective.getSuccessCriteria().getExpectedOutcomes().getOutcomesList().size()>0)
            {
                if (index==0)
                    this.expectedOutcome = this.processObjective.getSuccessCriteria().getExpectedOutcomes().getOutcomesList().get(index);
                else if (index>0)
                     this.expectedOutcome = this.processObjective.getSuccessCriteria().getExpectedOutcomes().getOutcomesList().get(index-1);
            }
        }
 }
}


//DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
//****************************************************************************
//                              Delete Resource
//DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
//****************************************************************************
 private void delete_resource()
{
if (this.processObjective!=null &&
    this.processObjective.getFeasibility()!=null &&
    this.processObjective.getFeasibility().getRequiredResources()!=null &&
    this.processObjective.getFeasibility().getRequiredResources().getResourcesList().size()>0)
    {
        int index= this.processObjective.getFeasibility().getRequiredResources().getResourcesList()
                                                                            .indexOf(this.resource);
        if (this.processObjective.getFeasibility().getRequiredResources().delete(this.resource)==0);
        {
            if (this.processObjective.getFeasibility().getRequiredResources().getResourcesList().size()>0)
            {
                if (index==0)
                    this.resource = this.processObjective.getFeasibility().getRequiredResources().getResource(index);
                else if(index>0)
                    this.resource = this.processObjective.getFeasibility().getRequiredResources().getResource(index-1);
            }
        }
        // setResult process objective
 }
}



    private void Justification_Sources_Edit_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Justification_Sources_Edit_jButtonActionPerformed
        SourceForm projectSourceForm=null;
        projectSourceForm=new SourceForm((process_model.issue.tracibility.Source) this.source);

    }//GEN-LAST:event_Justification_Sources_Edit_jButtonActionPerformed

    private void Delete_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Delete_jButtonActionPerformed

        if (this.processObjective!=null)
        {            
            this.processObjective.UnDeliver();
            //this.delete_processObjective();
            this.clear_processObjective();
            this.populate_processObjective();
            this.populateForm();
        }

    }//GEN-LAST:event_Delete_jButtonActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
    if (this.processObjective==null)
        this.refresh_processObjective();

    this.refresh_processObjective_details();
    this.populate_processObjective();

    }//GEN-LAST:event_formWindowActivated

    private void formWindowDeactivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowDeactivated
    if (this.processObjective!=null)
        this.save_processObjective();
    }//GEN-LAST:event_formWindowDeactivated

    private void Sources_jListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_Sources_jListValueChanged
    if (Global.project !=null &&  Global.project.getSources()!=null &&
        Global.project.getSources().getSourcesList().size()>0)
     if (this.Sources_jList.getSelectedIndex()>=0)

         this.source=(Source) Global.project.getSources().
                 getSourcesList().get(this.Sources_jList.getSelectedIndex());


    }//GEN-LAST:event_Sources_jListValueChanged

    private void Selected_Sources_jListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_Selected_Sources_jListValueChanged

        if (this.processObjective!=null && this.processObjective.getTraceability()!=null)
         if (this.Selected_Sources_jList.getSelectedIndex()>=0)

         this.source= (Source) this.processObjective.getTraceability().getSourcesList().get(this.Selected_Sources_jList.getSelectedIndex());

    }//GEN-LAST:event_Selected_Sources_jListValueChanged

    private void Selected_Resources_jListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_Selected_Resources_jListValueChanged

        if (this.processObjective!=null &&
            this.processObjective.getFeasibility()!=null &&
            this.processObjective.getFeasibility().getRequiredResources()!=null)

         if (this.processObjective.getFeasibility().getRequiredResources().getResourcesList().size()>=0
            && this.Selected_Resources_jList.getSelectedIndex()>=0)

             this.resource= (Resource) this.processObjective.getFeasibility().
             getRequiredResources().getResourcesList().get(this.Selected_Resources_jList.getSelectedIndex());

    }//GEN-LAST:event_Selected_Resources_jListValueChanged

    private void Resource_Edit_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Resource_Edit_jButtonActionPerformed
    new ManagementForm(this.resource).setVisible(true);
    }//GEN-LAST:event_Resource_Edit_jButtonActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
    System.gc();
    //System.runFinalization();
    }//GEN-LAST:event_formWindowClosed

    private void Planning_Planner_info_jDesktopPane2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Planning_Planner_info_jDesktopPane2MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_Planning_Planner_info_jDesktopPane2MouseClicked

    private void Planning_Planner_info_jDesktopPane3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Planning_Planner_info_jDesktopPane3MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_Planning_Planner_info_jDesktopPane3MouseClicked

    private void Scale_Add_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Scale_Add_jButtonActionPerformed
    
    if ( this.qualitativeMeasure==null)
        this.qualitativeMeasure=new QualitativeMeasure();
    
    if ( this.qualitativeMeasure!=null && this.qualitativeMeasure.getScale()==null)
            qualitativeMeasure.setScale(new ArrayList<String>());   
    
    if (!this.Category_jTextField.getText().equals(""))
        this.qualitativeMeasure.getScale().add(Category_jTextField.getText().toString()); 
    
    Category_jTextField.setText("");    
            
    this.scale_jList.setModel(this.getSelectedScaleModel());

    }//GEN-LAST:event_Scale_Add_jButtonActionPerformed



    private void Scale_Delete_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Scale_Delete_jButtonActionPerformed

    if (this.qualitativeMeasure!=null && this.qualitativeMeasure.getScale()!=null &&
        this.qualitativeMeasure.getScale().size()>0)
        this.qualitativeMeasure.getScale().remove(this.scaleCategory);

    Category_jTextField.setText("");
    this.scale_jList.setModel(this.getSelectedScaleModel());

    this.processObjective.getMeasurability().save(this.qualitativeMeasure);
    
    this.scale_jList.setModel(this.getSelectedScaleModel());

    }//GEN-LAST:event_Scale_Delete_jButtonActionPerformed

    private void Analysts_jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_Analysts_jList1ValueChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_Analysts_jList1ValueChanged

    private void scale_jListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_scale_jListValueChanged

   if ( this.qualitativeMeasure!=null && this.qualitativeMeasure.getScale()!=null && 
        this.qualitativeMeasure.getScale().size()>0 && scale_jList.getSelectedIndex()>=0)
             this.scaleCategory=qualitativeMeasure.getScale().get(scale_jList.getSelectedIndex());

    }//GEN-LAST:event_scale_jListValueChanged

    private void Solution_Sources_Edit_jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Solution_Sources_Edit_jButton2ActionPerformed


    if (this.processObjective!=null && this.processObjective.getMeasurability()!=null )
       this.delete_measure();

        this.Selected_Measures_jList.setModel(this.getSelectedMeasuresModel());
        this.populateForm();
    }//GEN-LAST:event_Solution_Sources_Edit_jButton2ActionPerformed

    private void Solution_Sources_Select_jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Solution_Sources_Select_jButton3ActionPerformed

  this.save_processObjective();
  if (this.processObjective!=null)
  {
        if ( this.processObjective.getMeasurability()==null)
        this.processObjective.setMeasurability(new Measures());

    QuantitativeMeasure quantitativeMeasure=new QuantitativeMeasure();

    if (!this.Unit_jTextField.getText().equals(""))
        quantitativeMeasure.setUnit(Unit_jTextField.getText());
   try{
        if (!this.Min_jTextField.getText().equals(""))
            quantitativeMeasure.setMinimum(Double.parseDouble(this.Min_jTextField.getText()));

        if (!this.Max_jTextField.getText().equals(""))
            quantitativeMeasure.setMaximum(Double.parseDouble(this.Max_jTextField.getText()));

        this.measure=quantitativeMeasure;
        this.processObjective.getMeasurability().save(this.measure);
      }
   catch(NumberFormatException nfx){
        JOptionPane.showMessageDialog(null, "Quantitative value must be a number ...!!!");
    }
    
Max_jTextField.setText("");
Min_jTextField.setText("");
Unit_jTextField.setText("");
this.measure=null;
this.refresh_processObjective_details();
 }

    }//GEN-LAST:event_Solution_Sources_Select_jButton3ActionPerformed

    private void New_jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_New_jButton1ActionPerformed
        this.clear_processObjective();
    }//GEN-LAST:event_New_jButton1ActionPerformed

    private void Solution_Sources_Select_jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Solution_Sources_Select_jButton2ActionPerformed
    this.save_processObjective();
  if (this.processObjective!=null)
  {
        if (this.processObjective.getMeasurability()==null)
        this.processObjective.setMeasurability(new Measures());

    BooleanMeasure booleanMeasure=new BooleanMeasure();

    if (this.Criteria_jTextField.getText()!=null)
        booleanMeasure.setCriteria(Criteria_jTextField.getText());

    this.measure=booleanMeasure;
   this.processObjective.getMeasurability().save(this.measure);

    Criteria_jTextField.setText("");
    this.measure=null;
    this.refresh_processObjective_details();
 }
}//GEN-LAST:event_Solution_Sources_Select_jButton2ActionPerformed

    private void Solution_Sources_Select_jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Solution_Sources_Select_jButton4ActionPerformed

 this.save_processObjective();
 if (this.processObjective!=null)
  {
        if (this.processObjective.getMeasurability()==null)
            this.processObjective.setMeasurability(new Measures());
        //----------------------------------------------------------------------
        if (this.qualitativeMeasure!=null)
        {
           if (!this.CategoryName_jTextField.getText().equals(""))
                this.qualitativeMeasure.setName(this.CategoryName_jTextField.getText());
           
            this.processObjective.getMeasurability().save(this.qualitativeMeasure);                     
            CategoryName_jTextField.setText("");
        }
        
//------------------------------------------------------------------------------
this.qualitativeMeasure=null;
this.measure=null;
this.refresh_processObjective_details();
 } 
}//GEN-LAST:event_Solution_Sources_Select_jButton4ActionPerformed

    private void Measurments_jListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_Measurments_jListValueChanged

    if (this.processObjective!=null && this.processObjective.getMeasurability()!=null &&
            this.processObjective.getMeasurability().getMeasuresList().size()>0 &&
            this.Measurments_jList.getSelectedIndex()>=0)
    {
        
         this.measure= (Measure) this.processObjective. getMeasurability().getMeasuresList().get(this.Measurments_jList.getSelectedIndex());
         //System.out.print(this.measure.toString());
     }

  if ( this.measure!=null && this.measure.getMeasureType().equals(MeasureType.BOOLEAN))
  {
      this.Boolean_jCheckBox.setVisible(true);
      this.Scale_jComboBox.setVisible(false);
      this.Result_jTextField.setVisible(false);
   }
   else if ( this.measure!=null && this.measure.getMeasureType().equals(MeasureType.QUALITATIVE))
  {
       QualitativeMeasure qMeasure= (QualitativeMeasure) measure;
       int i=0;       
       names=new String[qMeasure.getScale().size()];
       for ( Object o:qMeasure.getScale())
       {
           if (o!=null)
                names[i]=(String)o;
           i++;
      }

       if (names!=null)       
           this.Scale_jComboBox.setModel(new DefaultComboBoxModel(names));

       this.Boolean_jCheckBox.setVisible(false);
       this.Result_jTextField.setVisible(false);
       this.Scale_jComboBox.setVisible(true);

   }
  else
  {
     this.Boolean_jCheckBox.setVisible(false);
     this.Scale_jComboBox.setVisible(false);
     this.Result_jTextField.setVisible(true);
   }
    this.populateForm();

    }//GEN-LAST:event_Measurments_jListValueChanged

    private void Analysts_jList2ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_Analysts_jList2ValueChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_Analysts_jList2ValueChanged

    private void Solution_Sources_Edit_jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Solution_Sources_Edit_jButton3ActionPerformed

    if (this.processObjective!=null && this.processObjective.getSuccessCriteria().getExpectedOutcomes()!=null )
       this.delete_expected_outcome();

        this.Selected_ExpectedMeasurmentOutcomes_jList.setModel(this.getSelectedExpectedOutcomes());

        this.populateForm();

    }//GEN-LAST:event_Solution_Sources_Edit_jButton3ActionPerformed

    private void Solution_Sources_Select_jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Solution_Sources_Select_jButton6ActionPerformed
this.save_processObjective();
 if (this.processObjective!=null)
 {
    this.expectedOutcome=new MeasurmentOutcome();

   if ( this.measure!=null && this.measure.getMeasureType().equals(MeasureType.BOOLEAN))
    {
        BooleanMeasureResult  booleanMeasureResult= new BooleanMeasureResult();
        booleanMeasureResult.setOutcome(this.Boolean_jCheckBox.isSelected());

        this.expectedOutcome.setMeasure((BooleanMeasure)this.measure);
        this.expectedOutcome.setOutcome(booleanMeasureResult);
    }
    else if ( this.measure!=null && this.measure.getMeasureType().equals(MeasureType.QUANTITATIVE))
    {
        QuantitativeMeasureResult  quantitativeMeasureResult= new QuantitativeMeasureResult();
        //
        try{
        double result=0.0;
        //
        if (!this.Result_jTextField.getText().equals(""))
            result=Double.parseDouble(this.Result_jTextField.getText());        
        quantitativeMeasureResult.setValue(result);        
        this.expectedOutcome.setMeasure((QuantitativeMeasure)this.measure);        
        this.expectedOutcome.setOutcome(quantitativeMeasureResult);
        }catch ( java.lang.NumberFormatException ex)
        {
            JOptionPane.showMessageDialog(null, "Quantitative value must be a number ...!!!");
        }
    }
    else if ( this.measure!=null && this.measure.getMeasureType().equals(MeasureType.QUALITATIVE))
    {                
                    QualitativeMeasureResult qualitativeMeasureResult = new QualitativeMeasureResult();
                    QualitativeMeasure qualMeasure = (QualitativeMeasure) this.measure;                    
                    //int index = -1;
                    if (this.Scale_jComboBox.getSelectedIndex() >= 0) {
                        //index = this.Scale_jComboBox.getSelectedIndex();
                         //JOptionPane.showMessageDialog(null, index+"");
                        String rank = qualMeasure.getScaleCategory(this.Scale_jComboBox.getSelectedIndex());
                        qualitativeMeasureResult.setRank(rank);
                    }
                    this.expectedOutcome.setMeasure(qualMeasure.clone());
                    this.expectedOutcome.setOutcome(qualitativeMeasureResult.clone());
                
    }
    if (this.processObjective!=null && this.processObjective.getSuccessCriteria()==null)
        this.processObjective.setSuccessCriteria(new SuccessCriteria());

   if (this.processObjective.getSuccessCriteria().getExpectedOutcomes()==null)
       this.processObjective.getSuccessCriteria().setExpectedOutcomes(new MeasurmentOutcomes());

   if (this.expectedOutcome!=null &&
       this.processObjective.getSuccessCriteria()!=null &&
       this.processObjective.getSuccessCriteria().getExpectedOutcomes()!=null)

       this.processObjective.getSuccessCriteria().getExpectedOutcomes().save(expectedOutcome);
    //
        if (!SuccessCriteria_jTextPane.getText().equals(""))
            this.processObjective.getSuccessCriteria().setRational(SuccessCriteria_jTextPane.getText());

   this.Selected_ExpectedMeasurmentOutcomes_jList.setModel(this.getSelectedExpectedOutcomes());
   this.save_processObjective();
   
   this.populateForm();
}


    }//GEN-LAST:event_Solution_Sources_Select_jButton6ActionPerformed

    private void Selected_ExpectedMeasurmentOutcomes_jListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_Selected_ExpectedMeasurmentOutcomes_jListValueChanged

    if (   this.processObjective!=null
        && this.processObjective.getSuccessCriteria()!=null
        && this.processObjective.getSuccessCriteria().getExpectedOutcomes()!=null
        && this.processObjective.getSuccessCriteria().getExpectedOutcomes().getOutcomesList().size()>0  &&
        Selected_ExpectedMeasurmentOutcomes_jList.getSelectedIndex()>=0
        )

         this.expectedOutcome=  this.processObjective.getSuccessCriteria().
                                getExpectedOutcomes().getOutcomesList().
                                get(Selected_ExpectedMeasurmentOutcomes_jList.getSelectedIndex());

    }//GEN-LAST:event_Selected_ExpectedMeasurmentOutcomes_jListValueChanged

    private void Sources_UnSelect_jButtonActionPerformed1(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Sources_UnSelect_jButtonActionPerformed1
         if (this.processObjective!=null )
             this.delete_source();
        this.Selected_Sources_jList.setModel(this.getSelectedSourcesModel());

        this.populateForm();
    }//GEN-LAST:event_Sources_UnSelect_jButtonActionPerformed1

    private void Planning_Resource_jDesktopPaneFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Planning_Resource_jDesktopPaneFocusGained
    if (Global.project!=null && Global.project.getSupplements()!=null &&
        Global.project.getSupplements().getManagement()!=null &&
        Global.project.getSupplements().getManagement().getConstraint()!=null)
        {
            this.RemainingTime_jTextField.setText(Global.project.getSupplements().getManagement().getConstraint().getRemainingTime()+"");
            this.RemainingFunds_jTextField.setText(Global.project.getSupplements().getManagement().getConstraint().getRemainingFunds()+"");
        }
    //------------------------------------------------------------------------
    if (this.processObjective!=null && this.processObjective.getFeasibility()!=null)
         {
            this.Duration_jTextField.setText(this.processObjective.getFeasibility().getRequiredTime()+"");
            this.Feasible_jCheckBox.setSelected(this.processObjective.getFeasibility().isFeasible());
         }


    }//GEN-LAST:event_Planning_Resource_jDesktopPaneFocusGained

    private void Planning_Resource_jDesktopPaneFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Planning_Resource_jDesktopPaneFocusLost
    if (this.processObjective!=null && this.processObjective.getFeasibility()!=null
       && !this.Duration_jTextField.getText().equals(""))
    {
       this.processObjective.getFeasibility().setRequiredTime(Double.parseDouble(this.Duration_jTextField.getText()));
       this.processObjective.getFeasibility().setFeasible(this.Feasible_jCheckBox.isSelected());
     }
    }//GEN-LAST:event_Planning_Resource_jDesktopPaneFocusLost

    private void Planning_Planner_info_jDesktopPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Planning_Planner_info_jDesktopPane1MouseClicked
        // TODO add your handling code here:
}//GEN-LAST:event_Planning_Planner_info_jDesktopPane1MouseClicked

    private void Scale_jComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Scale_jComboBoxActionPerformed
   // this code is very weired since it is a solution fo a big problem where the selection of the combo box changes itself for a reason
   // with this code it is working
   int index=this.Scale_jComboBox.getSelectedIndex();
   this.Measurments_jList.setModel(this.getSelectedMeasuresModel());
   this.Scale_jComboBox.setSelectedIndex(index);
    }//GEN-LAST:event_Scale_jComboBoxActionPerformed

    private void Add_jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Add_jButton1ActionPerformed
        this.save_processObjective();
        this.clear_processObjective();

}//GEN-LAST:event_Add_jButton1ActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
   //if (this.processObjective!=null)
       this.save_processObjective();
    }//GEN-LAST:event_formWindowClosing

//SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
//****************************************************************************
//                              Save
//****************************************************************************
//SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
 private void save_processObjective()
 {
     if (this.processObjective==null)        
        this.processObjective= new DataMiningObjective();

     if (this.Description_jTextPane.getText()!=null && !this.Description_jTextPane.getText().equals(""))
        this.processObjective.setDescription(this.Description_jTextPane.getText());

    if (this.Approaches_jComboBox.getSelectedIndex()>0)
        this.processObjective.setApproach(this.Approaches_jComboBox.getSelectedIndex());

     this.processObjective.setFulfilled(this.Fulfilled_jCheckBox.isSelected());

    //---------------------------------------------------------------------------------------------------------------------
    if (this.processObjective.getAcheivability()==null)
        this.processObjective.setAcheivability(new Acheivability());

     this.processObjective.getAcheivability().setAcheivableWithData(this.AcheivableWithData_jCheckBox.isSelected());
     this.processObjective.getAcheivability().setDataRelivent(this.DataRelivant_jCheckBox.isSelected());
     this.processObjective.getAcheivability().setDataSufficient(this.DataSufficient_jCheckBox.isSelected());
    //---------------------------------------------------------------------------------------------------------------------
    if (this.processObjective.getTraceability()==null)
        this.processObjective.setTraceability(new Sources());

    if (this.processObjective.getFeasibility()==null)
        this.processObjective.setFeasibility(new Feasibility());

    if (this.processObjective.getMeasurability()==null)
        this.processObjective.setMeasurability(new Measures());

     if (this.processObjective.getSuccessCriteria()==null)
         this.processObjective.setSuccessCriteria(new SuccessCriteria());

     if (this.processObjective!=null && this.processObjective.getSuccessCriteria()!=null)
        if (this.SuccessCriteria_jTextPane.getText()!=null && !this.SuccessCriteria_jTextPane.getText().equals(""))
            this.processObjective.getSuccessCriteria().setRational(this.SuccessCriteria_jTextPane.getText());

     if (!this.Duration_jTextField.getText().equals(""))
         this.processObjective.getFeasibility().setRequiredTime(Double.parseDouble(this.Duration_jTextField.getText()));
      this.processObjective.getFeasibility().setFeasible(this.Feasible_jCheckBox.isSelected());

      this.processObjective.UnDeliver();
      this.processObjective.deliverAsMain();
      
     this.populate_processObjective();
   }



//PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
//                         Populate Plan Form
//PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
 private void populate_processObjective()
{
if (this.processObjective!=null)
     {
         if (this.processObjective.getDescription()!=null)
            this.Description_jTextPane.setText(this.processObjective.getDescription());
         else
           this.Description_jTextPane.setText("");
         //
         this.Fulfilled_jCheckBox.setSelected(this.processObjective.isFulfilled());
         //
         if (this.processObjective.getAcheivability()!=null)
             this.AcheivableWithData_jCheckBox.setSelected(this.processObjective.getAcheivability().isAcheivableWithData());
         else
             this.AcheivableWithData_jCheckBox.setSelected(false);
         //--------------------------------------------------------------------
         if (this.processObjective.getAcheivability()!=null)
             this.DataRelivant_jCheckBox.setSelected(this.processObjective.getAcheivability().isDataRelivent());
         else
             this.DataRelivant_jCheckBox.setSelected(false);

         //--------------------------------------------------------------------
         if (this.processObjective.getAcheivability()!=null)
             this.DataSufficient_jCheckBox.setSelected(this.processObjective.getAcheivability().isDataSufficient());
         else
             this.DataSufficient_jCheckBox.setSelected(false);
         //--------------------------------------------------------------------
         if (this.processObjective!=null&& this.processObjective.getDataMiningApproach()!=null)
             this.Approaches_jComboBox.setSelectedIndex(this.processObjective.getDataMiningApproach().ordinal()+1);
         else
             this.Approaches_jComboBox.setSelectedIndex(0);
         //--------------------------------------------------------------------
        if ( this.processObjective.getSuccessCriteria()!=null 
          && this.processObjective.getSuccessCriteria().getRational()!=null)
            this.SuccessCriteria_jTextPane.setText(this.processObjective.getSuccessCriteria().getRational());
        else
            this.SuccessCriteria_jTextPane.setText("");
         //--------------------------------------------------------------------
         if (this.processObjective!=null && this.processObjective.getFeasibility()!=null)
         {
            this.Duration_jTextField.setText(this.processObjective.getFeasibility().getRequiredTime()+"");
            this.Feasible_jCheckBox.setSelected(this.processObjective.getFeasibility().isFeasible());
         }
         //--------------------------------------------------------------------
        if (Global.project!=null && Global.project.getSupplements()!=null &&
            Global.project.getSupplements().getManagement()!=null &&
            Global.project.getSupplements().getManagement().getConstraint()!=null)
        {
            this.RemainingTime_jTextField.setText(Global.project.getSupplements().getManagement().getConstraint().getRemainingTime()+"");
            this.RemainingFunds_jTextField.setText(Global.project.getSupplements().getManagement().getConstraint().getRemainingFunds()+"");
        }

        this.refresh_processObjective_details();
     }
this.Selected_Sources_jList.setModel(this.getSelectedSourcesModel());
this.Selected_Measures_jList.setModel(this.getSelectedMeasuresModel());
this.Selected_ExpectedMeasurmentOutcomes_jList.setModel(this.getSelectedExpectedOutcomes());
this.Selected_Resources_jList.setModel(this.getSelectedResourcesModel());

this.populateForm();

}


 //RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR
//****************************************************************************
//                              Refresh
//****************************************************************************
//RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR

 private void refresh_processObjective()
 {
Result<DataMiningObjective> processObjectivesResult=new Result<DataMiningObjective>();

//*****************************************************************************
if (Global.currentPhase!=null &&
    Global.currentPhase.getResult()!=null)
{
    processObjectivesResult=Global.currentPhase.getResult();
    if (processObjectivesResult.getMainDelivery()!=null)    
        this.processObjective= (DataMiningObjective) processObjectivesResult.getMainDelivery();    
}

else
 this.processObjective=new DataMiningObjective();


}
//RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR
//                         Refresh Plan Details
//RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR

 private void refresh_processObjective_details()
 {
      this.Sources_jList.setModel(this.getSourcesModel());
      this.Resources_jList.setModel(this.getProjectResourcesModel());
      this.scale_jList.setModel(this.getSelectedScaleModel());
      this.Measurments_jList.setModel(this.getSelectedMeasuresModel());
      
      this.Selected_Sources_jList.setModel(this.getSelectedSourcesModel());
      this.Selected_Measures_jList.setModel(this.getSelectedMeasuresModel());
      this.Selected_ExpectedMeasurmentOutcomes_jList.setModel(this.getSelectedExpectedOutcomes());
      this.Selected_Resources_jList.setModel(this.getSelectedResourcesModel());
      this.populateForm();
 }

//DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
//****************************************************************************
//                              Delete Plan
//DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
//****************************************************************************
 private void delete_processObjective()
    {
    if (this.processObjective!=null &&
        Global.currentPhase.getResult()!=null &&
        Global.currentPhase.getResult().getSupplementDeliveries()!=null &&
        Global.currentPhase.getResult().getSupplementDeliveries().getDeliveriesList()!=null)
    {
      int index= Global.currentPhase.getResult().getSupplementDeliveries().getDeliveriesList().indexOf(this.processObjective);
          if (Global.currentPhase.getResult().getSupplementDeliveries().delete(this.processObjective)>=0);
        {
            if (Global.currentPhase.getResult().getSupplementDeliveries().getDeliveriesList().size()>0)
            {
                if (index==0 && Global.currentPhase.getResult().getSupplementDeliveries().getDeliveriesList().get(index)!=null)
                    this.processObjective = (DataMiningObjective) Global.currentPhase.getResult().getSupplementDeliveries().getDeliveriesList().get(index);
                else if(index>0)
                    this.processObjective = (DataMiningObjective) Global.currentPhase.getResult().getSupplementDeliveries().getDeliveriesList().get(index-1);

                //this.refresh_plan_details();
                this.refresh_processObjective_details();
                this.populate_processObjective();
            }
            else
                this.clear_processObjective();
        }
     this.save_processObjective();     
 }
 }



//CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
//****************************************************************************
//                     Clear Resource Plan & Resource
//****************************************************************************
 //CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

 private void clear_processObjective()
{
this.processObjective=null;
clear_processObjective_details();
clear_processObjectiveForm();
 }

 private void clear_processObjective_details()
{
     this.resource=null;
     this.source=null;
     this.measure=null;
     this.expectedOutcome=null;
     this.Selected_Sources_jList.setModel(this.getSelectedSourcesModel());
     this.Selected_Measures_jList.setModel(this.getSelectedMeasuresModel());
     this.Selected_ExpectedMeasurmentOutcomes_jList.setModel(this.getSelectedExpectedOutcomes());
     this.Selected_Resources_jList.setModel(this.getSelectedResourcesModel());     
 }

 private void clear_processObjectiveForm()
 {
    this.Description_jTextPane.setText("");
    this.SuccessCriteria_jTextPane.setText("");
    this.Fulfilled_jCheckBox.setSelected(false);
    this.AcheivableWithData_jCheckBox.setSelected(false);
    //--------------------------------------------------------------------
    this.DataRelivant_jCheckBox.setSelected(false);
    //--------------------------------------------------------------------
    this.DataSufficient_jCheckBox.setSelected(false);
    //--------------------------------------------------------------------
    this.Approaches_jComboBox.setSelectedIndex(0);
    this.populateForm();

 }

//FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
//****************************************************************************
//                            First & Last Plan
//****************************************************************************
//FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF

 private void first_processObjective()
    {
             if (Global.currentPhase != null && Global.currentPhase.getResult()!=null &&
                 Global.currentPhase.getResult().getSupplementDeliveries()!=null)
                {
                    this.save_processObjective();
                    this.processObjective=(DataMiningObjective) Global.currentPhase.
                    getResult().getSupplementDeliveries().getFirst();
                    this.clear_processObjective_details();
                    this.refresh_processObjective_details();
                    this.populate_processObjective();
                }
             //else
                //System.out.print("No Process Objective is found ");
    }

 //****************************************************************************
 private void last_processObjective()
    {
             if (Global.currentPhase != null && Global.currentPhase.getResult()!=null &&
                 Global.currentPhase.getResult().getSupplementDeliveries()!=null)
                {
                    this.save_processObjective();
                    this.processObjective=(DataMiningObjective) Global.currentPhase.
                    getResult().getSupplementDeliveries().getLast();
                    this.clear_processObjective_details();
                    this.refresh_processObjective_details();
                    this.populate_processObjective();
                }
             //else
                //System.out.print("No Process Objective is found ");
    }



//NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
//****************************************************************************
//                                Next Plan
//****************************************************************************
//NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
 private void next_processObjective()
    {      
            if (this.processObjective!=null)
            {
             if (Global.currentPhase != null && Global.currentPhase.getResult()!=null &&
                 Global.currentPhase.getResult().getSupplementDeliveries()!=null)
                {
                    this.save_processObjective();
                    this.processObjective=(DataMiningObjective) Global.currentPhase.
                    getResult().getSupplementDeliveries().getNext(this.processObjective);
                    this.clear_processObjective_details();
                    this.refresh_processObjective_details();                    
                    this.populate_processObjective();
                }
            }      
        //else
            //System.out.print("No Process Objective is foundis found ");
    }

//PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
//****************************************************************************
//                     Previous Plan& Resource
//****************************************************************************
//PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
private void previous_processObjective()
    {

            if (this.processObjective!=null)
            {
             if (Global.currentPhase != null && Global.currentPhase.getResult()!=null &&
                 Global.currentPhase.getResult().getSupplementDeliveries()!=null)
                {
                    this.save_processObjective();
                    this.processObjective=(DataMiningObjective) Global.currentPhase.
                    getResult().getSupplementDeliveries().getPrevious(this.processObjective);
                    this.clear_processObjective_details();
                    this.refresh_processObjective_details();
                    this.populate_processObjective();
                }
            }
        //else
            //System.out.print("No Process Objective is foundis found ");
    }


    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    if (Global.project == null) 
                        Global.project = new Project();

                    if (Global.project.getProcess() == null) 
                        Global.project.setProcess(new Process());
                     
                    Global.project.getProcess().setVersion(1);

                    if (Global.currentPhase==null)
                            Global.currentPhase=new Phase("ObjectivesDefinition");
                    
                    new ObjectivesDefinitionForm().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(ObjectivesDefinitionForm.class.getName()).log(Level.SEVERE, null, ex);
                } catch (Exception ex) {
                    Logger.getLogger(ObjectivesDefinitionForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox AcheivableWithData_jCheckBox;
    private javax.swing.JButton Add_jButton1;
    private javax.swing.JComboBox Approaches_jComboBox;
    private javax.swing.JCheckBox Boolean_jCheckBox;
    private javax.swing.JTextField CategoryName_jTextField;
    private javax.swing.JTextField Category_jTextField;
    private javax.swing.JDesktopPane Control_jDesktopPane;
    private javax.swing.JTextField Criteria_jTextField;
    private javax.swing.JCheckBox DataRelivant_jCheckBox;
    private javax.swing.JCheckBox DataSufficient_jCheckBox;
    private javax.swing.JButton Delete_jButton;
    private javax.swing.JTextPane Description_jTextPane;
    private javax.swing.JTextField Duration_jTextField;
    private javax.swing.JCheckBox Feasible_jCheckBox;
    private javax.swing.JCheckBox Fulfilled_jCheckBox;
    private javax.swing.JDesktopPane Justification_Source_jDesktopPane;
    private javax.swing.JDesktopPane Justification_Sources_Control_jDesktopPane;
    private javax.swing.JButton Justification_Sources_Edit_jButton;
    private javax.swing.JButton Justification_Sources_Select_jButton;
    private javax.swing.JTextField Max_jTextField;
    private javax.swing.JList Measurments_jList;
    private javax.swing.JTextField Min_jTextField;
    private javax.swing.JButton New_jButton1;
    private javax.swing.JDesktopPane New_jDesktopPane;
    private javax.swing.JLabel PerformedActivityDuration_jLabel1;
    private javax.swing.JPanel Performed_Plan_jPanel;
    private javax.swing.JTabbedPane Performing_Details_TabbedPane;
    private javax.swing.JDesktopPane Performing_Details_jDesktopPane_jDesktopPane;
    private javax.swing.JLayeredPane Performing_Justification_jLayeredPane;
    private javax.swing.JLayeredPane Performing_Performer_jDesktopPane;
    private javax.swing.JDesktopPane Performing_Performer_jDesktopPane1;
    private javax.swing.JLayeredPane Performing_jLayeredPane;
    private javax.swing.JLabel Planning_CustomisedPlanItem_jLabel;
    private javax.swing.JLabel Planning_CustomisedPlanItem_jLabel1;
    private javax.swing.JDesktopPane Planning_CustomisedPlan_jDesktopPane;
    private javax.swing.JDesktopPane Planning_Objectives_Control_jDesktopPane1;
    private javax.swing.JDesktopPane Planning_Objectives_Control_jDesktopPane10;
    private javax.swing.JDesktopPane Planning_Objectives_Control_jDesktopPane6;
    private javax.swing.JDesktopPane Planning_Objectives_Control_jDesktopPane7;
    private javax.swing.JDesktopPane Planning_Objectives_Control_jDesktopPane8;
    private javax.swing.JLabel Planning_Planner_Name_jLabel;
    private javax.swing.JLabel Planning_Planner_Name_jLabel1;
    private javax.swing.JLabel Planning_Planner_Name_jLabel5;
    private javax.swing.JLabel Planning_Planner_Name_jLabel6;
    private javax.swing.JLabel Planning_Planner_Name_jLabel7;
    private javax.swing.JLabel Planning_Planner_Name_jLabel8;
    private javax.swing.JLabel Planning_Planner_Role_jLabel1;
    private javax.swing.JDesktopPane Planning_Planner_info_jDesktopPane;
    private javax.swing.JDesktopPane Planning_Planner_info_jDesktopPane1;
    private javax.swing.JDesktopPane Planning_Planner_info_jDesktopPane2;
    private javax.swing.JDesktopPane Planning_Planner_info_jDesktopPane3;
    private javax.swing.JDesktopPane Planning_Planner_jDesktopPane;
    private javax.swing.JDesktopPane Planning_Planner_jDesktopPane1;
    private javax.swing.JDesktopPane Planning_Resource_jDesktopPane;
    private javax.swing.JLabel Project_Constraint_RemainingDuration_jLabel1;
    private javax.swing.JLabel Project_Constraint_RemainingFunds_jLabel1;
    private javax.swing.JButton Refresh_jButton;
    private javax.swing.JTextField RemainingFunds_jTextField;
    private javax.swing.JTextField RemainingTime_jTextField;
    private javax.swing.JDesktopPane Reporting_Customised_jDesktopPane3;
    private javax.swing.JDesktopPane Reporting_Customised_jDesktopPane4;
    private javax.swing.JDesktopPane Reporting_Customised_jDesktopPane5;
    private javax.swing.JDesktopPane Reporting_Customised_jDesktopPane6;
    private javax.swing.JButton Resource_Edit_jButton;
    private javax.swing.JDesktopPane Resource_jDesktopPane;
    private javax.swing.JButton Resources_Select_jButton;
    private javax.swing.JButton Resources_UnSelect_jButton;
    private javax.swing.JList Resources_jList;
    private javax.swing.JTextField Result_jTextField;
    private javax.swing.JButton Save_jButton;
    private javax.swing.JButton Scale_Add_jButton;
    private javax.swing.JButton Scale_Delete_jButton;
    private javax.swing.JComboBox Scale_jComboBox;
    private javax.swing.JList Selected_ExpectedMeasurmentOutcomes_jList;
    private javax.swing.JList Selected_Measures_jList;
    private javax.swing.JList Selected_Resources_jList;
    private javax.swing.JList Selected_Sources_jList;
    private javax.swing.JButton Solution_Sources_Edit_jButton2;
    private javax.swing.JButton Solution_Sources_Edit_jButton3;
    private javax.swing.JButton Solution_Sources_Select_jButton2;
    private javax.swing.JButton Solution_Sources_Select_jButton3;
    private javax.swing.JButton Solution_Sources_Select_jButton4;
    private javax.swing.JButton Solution_Sources_Select_jButton6;
    private javax.swing.JButton Sources_UnSelect_jButton;
    private javax.swing.JList Sources_jList;
    private javax.swing.JTextPane SuccessCriteria_jTextPane;
    private javax.swing.JTextField Unit_jTextField;
    private javax.swing.JDesktopPane jDesktopPane45;
    private javax.swing.JDesktopPane jDesktopPane46;
    private javax.swing.JDesktopPane jDesktopPane47;
    private javax.swing.JLayeredPane jLayeredPane39;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane68;
    private javax.swing.JScrollPane jScrollPane69;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JList scale_jList;
    private javax.swing.JLabel unit_jLabel;
    // End of variables declaration//GEN-END:variables


//PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
//****************************************************************************
//                             Populate
//****************************************************************************
//PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP

private void populateForm()
{
            this.repaint();
            this.pack();
 }

//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
//                       Get Planned Objectives Model
//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
private  String scaleCategory=null;
private QualitativeMeasure qualitativeMeasure=new QualitativeMeasure();

public  DefaultComboBoxModel getSelectedScaleModel()
{
  DefaultComboBoxModel dcm=null;
  ArrayList<String> selectedScaleList=new ArrayList<String>();
  String[] scaleArrayNames = null;
  if (this.qualitativeMeasure!=null)
  {
      if (this.qualitativeMeasure.getScale().size()>0)
      {
        selectedScaleList=this.qualitativeMeasure.getScale();
        int size=selectedScaleList.size();
        scaleArrayNames = new String[size];
        int i=0;
        for (Object o:selectedScaleList)
            {
              //--------------------------------------------------------------
              String thisCause=(String) o;
              //--------------------------------------------------------------
              scaleArrayNames[i]=thisCause;
              i=i+1;
              //--------------------------------------------------------------
             }
        dcm=new DefaultComboBoxModel(scaleArrayNames);
        return dcm;
        }
     else
      {
        String thisNames[] ={"<No category yet>"};
        dcm=new DefaultComboBoxModel(thisNames);
        return dcm;
      }
  }
 else
    {
    String thisNames[] ={"<No category yet>"};
    dcm=new DefaultComboBoxModel(thisNames);
     return dcm;
    }
 }




//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
//                       Get Project Remeasures Model
//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
public  DefaultComboBoxModel getSelectedMeasuresModel()
{
  DefaultComboBoxModel dcm=null;
  ArrayList<Measure> measuresList=new ArrayList<Measure>();
  String[] measuresArrayNames = null;
  if (this.processObjective!=null && this.processObjective.getMeasurability()!=null)
  {
      if ( this.processObjective.getMeasurability().getMeasuresList().size()>0)
      {
        measuresList=this.processObjective.getMeasurability().getMeasuresList();
        int size=measuresList.size();
        measuresArrayNames = new String[size];
        int i=0;
        for (Object o:measuresList)
            {
            String result="";
             if (o.getClass().getSimpleName().equals("BooleanMeasure"))
              {
                  BooleanMeasure thisMeasure=(BooleanMeasure) o;
                  result=thisMeasure.toString();
              }
              else if (o.getClass().getSimpleName().equals("QualitativeMeasure"))
              {
                  QualitativeMeasure thisMeasure=(QualitativeMeasure) o;
                  result=thisMeasure.toString();
              }
              else if (o.getClass().getSimpleName().equals("QuantitativeMeasure"))
              {
                  QuantitativeMeasure thisMeasure=(QuantitativeMeasure) o;
                  result=thisMeasure.toString();
              }
              measuresArrayNames[i]=result;
              i=i+1;
              //--------------------------------------------------------------
             }
        dcm=new DefaultComboBoxModel(measuresArrayNames);
        return dcm;
        }
     else
      {
        String thisNames[] ={"<No measure selected yet>"};
        dcm=new DefaultComboBoxModel(thisNames);
        return dcm;
      }
  }
 else
    {
    String thisNames[] ={"<No measures selected yet>"};
    dcm=new DefaultComboBoxModel(thisNames);
     return dcm;
    }
 }



//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
//                       Get Project Resources Model
//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
public  DefaultComboBoxModel getSourcesModel()
{
  DefaultComboBoxModel dcm=null;
  ArrayList<Source> sourcesList=new ArrayList<Source>();
  String[] sourcesArrayNames = null;
  if (Global.project!=null && Global.project.getSources()!=null)
  {
      if ( Global.project.getSources().getSourcesList().size()>0)
      {
        sourcesList=Global.project.getSources().getSourcesList();
        int size=sourcesList.size();
        sourcesArrayNames = new String[size];
        int i=0;
        for (Object o:sourcesList)
            {
            String result="";
             if (o.getClass().getSimpleName().equals("InternalSource"))
              {
                  InternalSource thisSource=(InternalSource) o;
                  result=thisSource.toString();
              }
              else if (o.getClass().getSimpleName().equals("ExternalSource"))
              {
                  ExternalSource thisSource=(ExternalSource) o;
                  result=thisSource.toString();
              }
              else if (o.getClass().getSimpleName().equals("HumanSource"))
              {
                  HumanSource thisSource=(HumanSource) o;
                  result=thisSource.toString();
              }
              sourcesArrayNames[i]=result;
              i=i+1;
              //--------------------------------------------------------------
             }
        dcm=new DefaultComboBoxModel(sourcesArrayNames);
        return dcm;
        }
     else
      {
        String thisNames[] ={"<No sources available yet>"};
        dcm=new DefaultComboBoxModel(thisNames);
        return dcm;
      }
  }
 else
    {
    String thisNames[] ={"<No sources available yet>"};
    dcm=new DefaultComboBoxModel(thisNames);
     return dcm;
    }
 }

//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
//                       Get Project Resources Model
//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
public  DefaultComboBoxModel getSelectedSourcesModel()
{
  DefaultComboBoxModel dcm=null;
  ArrayList<Source> selectedSourcesList=new ArrayList<Source>();
  String[] sourcesArrayNames = null;
  if (this.processObjective!=null && this.processObjective.getTraceability()!=null)
  {
      if (this.processObjective.getTraceability().getSourcesList().size()>0)
      {
        selectedSourcesList=this.processObjective.getTraceability().getSourcesList();
        int size=selectedSourcesList.size();
        sourcesArrayNames = new String[size];
        int i=0;
        for (Object o:selectedSourcesList)
            {
              String result="";
             if (o.getClass().getSimpleName().equals("InternalSource"))
              {
                  InternalSource thisSource=(InternalSource) o;
                  result=thisSource.toString();
              }
              else if (o.getClass().getSimpleName().equals("ExternalSource"))
              {
                  ExternalSource thisSource=(ExternalSource) o;
                  result=thisSource.toString();
              }
              else if (o.getClass().getSimpleName().equals("HumanSource"))
              {
                  HumanSource thisSource=(HumanSource) o;
                  result=thisSource.toString();
              }
              sourcesArrayNames[i]=result;
              i=i+1;
             }
        dcm=new DefaultComboBoxModel(sourcesArrayNames);
        return dcm;
        }
     else
      {
        String thisNames[] ={"<No source selected yet>"};
        dcm=new DefaultComboBoxModel(thisNames);
        return dcm;
      }
  }
 else
    {
    String thisNames[] ={"<No source selected yet>"};
    dcm=new DefaultComboBoxModel(thisNames);
     return dcm;
    }
 }




//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
//                       Get Project Remeasures Model
//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
public  DefaultComboBoxModel getSelectedExpectedOutcomes()
{

 //private MeasurmentOutcome expectedOutcome =null;
  DefaultComboBoxModel dcm=null;
  ArrayList<MeasurmentOutcome> expectedOutcomesList=new ArrayList<MeasurmentOutcome>();
  String[] expectedOutcomesArrayNames = null;
  if (this.processObjective!=null &&this.processObjective.getSuccessCriteria()!=null &&
      this.processObjective.getSuccessCriteria().getExpectedOutcomes()!=null)
  {
      if ( this.processObjective.getSuccessCriteria().getExpectedOutcomes().getOutcomesList().size()>0)
      {
        expectedOutcomesList=this.processObjective.getSuccessCriteria().getExpectedOutcomes().getOutcomesList();
        int size=expectedOutcomesList.size();
        expectedOutcomesArrayNames = new String[size];
        int i=0;
        for (Object o:expectedOutcomesList)
            {
            String result="";
            MeasurmentOutcome  measurmentOutcome=(MeasurmentOutcome) o;
                  result=measurmentOutcome.toString();
              expectedOutcomesArrayNames[i]=result;
              i=i+1;
              //--------------------------------------------------------------
             }
        dcm=new DefaultComboBoxModel(expectedOutcomesArrayNames);
        return dcm;
        }
     else
      {
        String thisNames[] ={"<No expected outcome selected yet>"};
        dcm=new DefaultComboBoxModel(thisNames);
        return dcm;
      }
  }
 else
    {
    String thisNames[] ={"<No expected outcome selected yet>"};
    dcm=new DefaultComboBoxModel(thisNames);
     return dcm;
    }
 }


//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
//                       Get Project Resources Model
//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
public  DefaultComboBoxModel getProjectResourcesModel()
{
  DefaultComboBoxModel dcm=null;
  ArrayList<Resource> resourcesList=new ArrayList<Resource>();
  String[] resourcesArrayNames = null;
  if (Global.project!=null
          && Global.project.getSupplements()!=null
          && Global.project.getSupplements().getManagement()!=null )
  {
      if (  Global.project.getSupplements().getManagement().getResources()!=null
              && Global.project.getSupplements().getManagement().getResources().getResourcesList().size()>0)
      {
        resourcesList=Global.project.getSupplements().getManagement().getResources().getResourcesList();
        int size=resourcesList.size();
        resourcesArrayNames = new String[size];
        int i=0;
        for (Object o:resourcesList)
            {
              Resource thisResource=(Resource) o;
              String result="";
              if (thisResource!=null  && thisResource.getResourceType()!=null)
                  result=thisResource.getResourceType().toString()+"  ";
              if (thisResource!=null && thisResource.getDescription()!=null)
                   result=result+ thisResource.getDescription();
              resourcesArrayNames[i]=result;
              i=i+1;
             }
        dcm=new DefaultComboBoxModel(resourcesArrayNames);
        return dcm;
        }
     else
      {
        String thisNames[] ={"<No resource available yet>"};
        dcm=new DefaultComboBoxModel(thisNames);
        return dcm;
      }
  }
 else
    {
    String thisNames[] ={"<No resource available yet>"};
    dcm=new DefaultComboBoxModel(thisNames);
     return dcm;
    }
 }

//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
//                       Get Planned Resources Model
//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
public  DefaultComboBoxModel getSelectedResourcesModel()
{
  DefaultComboBoxModel dcm=null;
  ArrayList<Resource> resourcesList=new ArrayList<Resource>();
  String[] resourcesArrayNames = null;

 if (this.processObjective!=null &&
     this.processObjective.getFeasibility()!=null &&
     this.processObjective.getFeasibility().getRequiredResources()!=null)

  {
      if (this.processObjective.getFeasibility().getRequiredResources().getResourcesList().size()>0)
      {
        resourcesList=this.processObjective.getFeasibility().getRequiredResources().getResourcesList();
        int size=resourcesList.size();
        resourcesArrayNames = new String[size];
        int i=0;
        for (Object o:resourcesList)
            {
              Resource thisResource=(Resource) o;
              String result="";
              if (thisResource!=null && thisResource.getResourceType()!=null)
                  result=thisResource.getResourceType().toString()+"  ";
              if (thisResource!=null && thisResource.getDescription()!=null)
                   result=result+ thisResource.getDescription();
              resourcesArrayNames[i]=result;
              i=i+1;
             }
        dcm=new DefaultComboBoxModel(resourcesArrayNames);
        return dcm;
        }
     else
      {
        String thisNames[] ={"<No selected resource yet>"};
        dcm=new DefaultComboBoxModel(thisNames);
        return dcm;
      }
  }
 else
    {
    String thisNames[] ={"<No selected resource yet>"};
    dcm=new DefaultComboBoxModel(thisNames);
     return dcm;
    }
 }

}
