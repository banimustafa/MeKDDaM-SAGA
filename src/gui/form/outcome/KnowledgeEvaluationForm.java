/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PerformingForm.java
 *
 * Created on 04-Oct-2010, 12:08:43
 */

package gui.form.outcome;

//import global.Config;
import global.Global;
import gui.form.input.StudyForm;
import gui.form.supplement.ManagementForm;
import gui.form.supplement.SourceForm;
import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import process_model.general.Procedure;
import process_model.issue.measurement.Measure;
import process_model.issue.measurement.MeasurmentOutcome;
import process_model.issue.tracibility.ExternalSource;
import process_model.issue.tracibility.HumanSource;
import process_model.issue.tracibility.InternalSource;
import process_model.issue.tracibility.Source;
import process_model.issue.tracibility.Sources;
import process_model.phase.Phase;
import process_model.process.result.Result;
import process_model.phase.delivery.knowledge.PresentedKnowledge;
import process_model.phase.delivery.selection.ModelingTechniqueSelection;
import process_model.phase.delivery.model.Model;
import process_model.phase.delivery.model.ModelEvaluation;
import process_model.phase.delivery.process_objective.DataMiningObjective;
import process_model.supplement.management.resource.Resource;
import process_model.supplement.management.resource.Resources;
import project.Project;
import process_model.process.Process;
import process_model.phase.delivery.knowledge.KnowledgeEvaluation;
import process_model.supplement.standard.Standard;
import toolbox.Tools;
/**
 *
 * @author amb04
 */
public class KnowledgeEvaluationForm extends javax.swing.JFrame {
private Procedure procedure=null;
private ModelEvaluation modelEvaluation;
//private ModelEvaluation modelEvaluation;
private Resource resource=null;
private Phase phase=Global.currentPhase;
private ModelingTechniqueSelection techniqueSelection=null;
private Model model=null;
private Standard standard;
private Measure measure=null;
private MeasurmentOutcome outcome =null;
private PresentedKnowledge presentation=null;
private DataMiningObjective processObjective=null;
private Source source=null;
private MeasurmentOutcome expectedOutcome =null;
private KnowledgeEvaluation knowledgeEvaluation=null;
//AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
private String approaches[]={"",
    "Hypotheis-Driven",
    "Data-Driven","Other"};

private String tasks[]={"","Association",    
    "Classification",
    "Correlation Aanalysis",
    "Dimentionality Reduction",
    "Feature Extraction and Analysis",
    "Hypotheisis Testing",  
    "Regression",
    "Segmentation",    
    "Other"};

private String goals[]={"","DESCRIPTION",
    "DISCOVERY",
    "PREDICTION",
    "VERIFICATION",
    "OTHER"};

private String splits[]={"","All","Building Data",
    "Training Data",
    "Testing Data",
    "Other"};



private String methods[]={"",
  "GRAPHICAL",
  "TABULAR",
  "TEXTUAL",
  "OTHER"
};

private String visulaizationTechniques[]={"",
"Algorithm Based Technique",
"Geometrical Transformation",
"Graph Based Technique",
"Hierarchical Technique",
"Icon Based Technique",
"Multi Dimension",
"One Dimension",
"Pixels Oriented Technique",
"Projection",
"Three_Dimension",
"Two Dimension",
"Other"
};


    //
    /** Creates new form PlanningForm */
//CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
public KnowledgeEvaluationForm() {
     initComponents();        
     this.refresh();
     this.populate_knowledgeEvaluation();
     this.setTitle("Knowledge Evaluation: "+Global.currentPhase.getTitle());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Performing_jLayeredPane = new javax.swing.JLayeredPane();
        Performing_Details_jDesktopPane_jDesktopPane = new javax.swing.JDesktopPane();
        Performing_Details_TabbedPane = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        Objectives_jTextArea = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        Selected_ExpectedMeasurmentOutcomes_jList = new javax.swing.JList();
        Planning_Planner_jDesktopPane1 = new javax.swing.JDesktopPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        Model_Selected_MeasuredOutcomes_jList = new javax.swing.JList();
        jScrollPane4 = new javax.swing.JScrollPane();
        Model_Selected_Standards_jList = new javax.swing.JList();
        URL_jLabel = new javax.swing.JLabel();
        Model_URL_jTextField = new javax.swing.JTextField();
        Browse_jButton = new javax.swing.JButton();
        jScrollPane8 = new javax.swing.JScrollPane();
        Model_Used_Resources_jList = new javax.swing.JList();
        jScrollPane69 = new javax.swing.JScrollPane();
        ResultSummary_jTextPane = new javax.swing.JTextPane();
        ModelPerformance_jLabel = new javax.swing.JLabel();
        jScrollPane9 = new javax.swing.JScrollPane();
        Expected_Resources_jList = new javax.swing.JList();
        jScrollPane14 = new javax.swing.JScrollPane();
        Expected_MeasurmentOutcomes_jList = new javax.swing.JList();
        Technique_jDesktopPane = new javax.swing.JDesktopPane();
        Approaches_jComboBox = new javax.swing.JComboBox();
        Planning_Planner_Role_jLabel1 = new javax.swing.JLabel();
        goal_jLabel = new javax.swing.JLabel();
        Goals_jComboBox = new javax.swing.JComboBox();
        Tasks_jComboBox = new javax.swing.JComboBox();
        task_jLabel = new javax.swing.JLabel();
        algorithm_jLabel = new javax.swing.JLabel();
        Supervised_jCheckBox = new javax.swing.JCheckBox();
        jScrollPane70 = new javax.swing.JScrollPane();
        Technique_jTextPane = new javax.swing.JTextPane();
        Planning_CustomisedPlanItem_jLabel = new javax.swing.JLabel();
        Algorithm_jTextPane = new javax.swing.JTextField();
        Planning_CustomisedPlan_jDesktopPane = new javax.swing.JDesktopPane();
        jDesktopPane8 = new javax.swing.JDesktopPane();
        jDesktopPane51 = new javax.swing.JDesktopPane();
        ModelPerformanceAcceptable_jCheckBox = new javax.swing.JCheckBox();
        jDesktopPane45 = new javax.swing.JDesktopPane();
        ModelUnderFit_jCheckBox = new javax.swing.JCheckBox();
        jDesktopPane50 = new javax.swing.JDesktopPane();
        ModelOverFit_jCheckBox = new javax.swing.JCheckBox();
        jScrollPane3 = new javax.swing.JScrollPane();
        jScrollPane12 = new javax.swing.JScrollPane();
        ModelPerformanceComment_jTextPane = new javax.swing.JTextPane();
        jScrollPane5 = new javax.swing.JScrollPane();
        jScrollPane13 = new javax.swing.JScrollPane();
        ConfusionMatrixResult_jTextPane = new javax.swing.JTextPane();
        Procedures_jList = new javax.swing.JList();
        jPanel6 = new javax.swing.JPanel();
        ModelEvaluation_URL_jTextField = new javax.swing.JTextField();
        ViewModelEvaluation_jButton = new javax.swing.JButton();
        Performed_Plan_jPanel = new javax.swing.JPanel();
        Planning_Planner_Name_jLabel14 = new javax.swing.JLabel();
        Method_jComboBox = new javax.swing.JComboBox();
        Technique_jComboBox = new javax.swing.JComboBox();
        Planning_Planner_Name_jLabel13 = new javax.swing.JLabel();
        Planning_Planner_Name_jLabel12 = new javax.swing.JLabel();
        Presentation_Open_jButton = new javax.swing.JButton();
        Presentation_URL_jTextField = new javax.swing.JTextField();
        Prerequisite_Source_ExternalSource_URL_jLabel4 = new javax.swing.JLabel();
        jScrollPane21 = new javax.swing.JScrollPane();
        Presentation_Description_jTextPane = new javax.swing.JTextPane();
        FinalSelection_jCheckBox = new javax.swing.JCheckBox();
        Next_jButton1 = new javax.swing.JButton();
        Previous_jButton1 = new javax.swing.JButton();
        Control_jDesktopPane = new javax.swing.JDesktopPane();
        Delete_jButton = new javax.swing.JButton();
        Save_jButton = new javax.swing.JButton();
        Refresh_jButton = new javax.swing.JButton();
        New_jDesktopPane = new javax.swing.JDesktopPane();
        New_jButton1 = new javax.swing.JButton();
        Add_jButton1 = new javax.swing.JButton();
        Justification_Source_jDesktopPane1 = new javax.swing.JDesktopPane();
        Justification_Sources_Control_jDesktopPane = new javax.swing.JDesktopPane();
        KnowledgeEvaluation_Sources_Select_jButton = new javax.swing.JButton();
        KnowledgeEvaluation_Sources_UnSelect_jButton = new javax.swing.JButton();
        KnowledgeEvaluation_Sources_Edit_jButton = new javax.swing.JButton();
        jScrollPane15 = new javax.swing.JScrollPane();
        KnowledgeEvaluation_Sources_jList = new javax.swing.JList();
        jScrollPane16 = new javax.swing.JScrollPane();
        KnowledgeEvaluation_Used_Sources_jList = new javax.swing.JList();
        jScrollPane11 = new javax.swing.JScrollPane();
        KnowledgeEvaluation_Used_Resources_jList = new javax.swing.JList();
        jScrollPane7 = new javax.swing.JScrollPane();
        KnowledgeEvaluation_Resources_jList = new javax.swing.JList();
        Planning_Objectives_Control_jDesktopPane1 = new javax.swing.JDesktopPane();
        KnowledgeEvaluation_Edit_jButton = new javax.swing.JButton();
        KnowledgeEvaluation_Select_jButton1 = new javax.swing.JButton();
        KnowledgeEvaluation_UnSelect_jButton1 = new javax.swing.JButton();
        ConsumedTime_jLabel1 = new javax.swing.JLabel();
        ConsumedTimeDuration_jTextField = new javax.swing.JTextField();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        Planning_Resource_jDesktopPane = new javax.swing.JDesktopPane();
        jDesktopPane52 = new javax.swing.JDesktopPane();
        KnowledgeConsistentWithLiterature_jCheckBox = new javax.swing.JCheckBox();
        jDesktopPane53 = new javax.swing.JDesktopPane();
        KnowledgeConsistentWithBiology_jCheckBox = new javax.swing.JCheckBox();
        jDesktopPane46 = new javax.swing.JDesktopPane();
        KnowledgeFulfilledStudyAims_jCheckBox = new javax.swing.JCheckBox();
        jDesktopPane54 = new javax.swing.JDesktopPane();
        KnowledgesFulfilledProcessObjectives_jCheckBox = new javax.swing.JCheckBox();
        jDesktopPane47 = new javax.swing.JDesktopPane();
        KnowledgesConsistentWithDomainExpertBackground_jCheckBox = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jScrollPane17 = new javax.swing.JScrollPane();
        Knowledge_Recommendations_jTextPane = new javax.swing.JTextPane();
        jScrollPane10 = new javax.swing.JScrollPane();
        jScrollPane18 = new javax.swing.JScrollPane();
        Knowledge_PropogatedQuestion_jTextPane = new javax.swing.JTextPane();
        jScrollPane19 = new javax.swing.JScrollPane();
        jScrollPane20 = new javax.swing.JScrollPane();
        Knowledge_PropogatedHypothesis_jTextPane = new javax.swing.JTextPane();
        menuBar = new javax.swing.JMenuBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowDeactivated(java.awt.event.WindowEvent evt) {
                formWindowDeactivated(evt);
            }
        });

        Performing_jLayeredPane.setBackground(new java.awt.Color(255, 255, 204));
        Performing_jLayeredPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        Performing_Details_jDesktopPane_jDesktopPane.setBackground(new java.awt.Color(255, 255, 204));
        Performing_Details_jDesktopPane_jDesktopPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel1.setBackground(new java.awt.Color(255, 255, 102));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Process Data Mining Objectives"));
        jPanel1.setLayout(null);

        Objectives_jTextArea.setBackground(new java.awt.Color(255, 255, 153));
        Objectives_jTextArea.setColumns(20);
        Objectives_jTextArea.setRows(5);
        Objectives_jTextArea.setEnabled(false);
        jScrollPane2.setViewportView(Objectives_jTextArea);

        jPanel1.add(jScrollPane2);
        jScrollPane2.setBounds(16, 23, 440, 210);

        jButton1.setText("Aims of Study");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1);
        jButton1.setBounds(10, 240, 450, 25);

        Selected_ExpectedMeasurmentOutcomes_jList.setBorder(javax.swing.BorderFactory.createTitledBorder("Expected Measurable Outcomes"));
        Selected_ExpectedMeasurmentOutcomes_jList.setModel(getSelectedExpectedOutcomes());
        Selected_ExpectedMeasurmentOutcomes_jList.setEnabled(false);
        Selected_ExpectedMeasurmentOutcomes_jList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                Selected_ExpectedMeasurmentOutcomes_jListValueChanged(evt);
            }
        });
        jPanel1.add(Selected_ExpectedMeasurmentOutcomes_jList);
        Selected_ExpectedMeasurmentOutcomes_jList.setBounds(470, 20, 460, 240);

        Performing_Details_TabbedPane.addTab("Process Objectives", jPanel1);

        Planning_Planner_jDesktopPane1.setBackground(new java.awt.Color(255, 255, 153));
        Planning_Planner_jDesktopPane1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        Model_Selected_MeasuredOutcomes_jList.setBackground(new java.awt.Color(255, 255, 204));
        Model_Selected_MeasuredOutcomes_jList.setBorder(javax.swing.BorderFactory.createTitledBorder("Measured Outcomes"));
        Model_Selected_MeasuredOutcomes_jList.setModel(this.getModelPerformanceOutcomes());
        Model_Selected_MeasuredOutcomes_jList.setEnabled(false);
        Model_Selected_MeasuredOutcomes_jList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                Model_Selected_MeasuredOutcomes_jListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(Model_Selected_MeasuredOutcomes_jList);

        jScrollPane1.setBounds(180, 80, 180, 180);
        Planning_Planner_jDesktopPane1.add(jScrollPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Model_Selected_Standards_jList.setBackground(new java.awt.Color(255, 255, 204));
        Model_Selected_Standards_jList.setBorder(javax.swing.BorderFactory.createTitledBorder("Selected Standards"));
        Model_Selected_Standards_jList.setModel(this.getModelSelectedStandardsModel());
        Model_Selected_Standards_jList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        Model_Selected_Standards_jList.setEnabled(false);
        Model_Selected_Standards_jList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                Model_Selected_Standards_jListValueChanged(evt);
            }
        });
        jScrollPane4.setViewportView(Model_Selected_Standards_jList);

        jScrollPane4.setBounds(750, 80, 190, 180);
        Planning_Planner_jDesktopPane1.add(jScrollPane4, javax.swing.JLayeredPane.DEFAULT_LAYER);

        URL_jLabel.setFont(new java.awt.Font("Tahoma", 1, 11));
        URL_jLabel.setText("Model URL");
        URL_jLabel.setBounds(10, 30, 90, 25);
        Planning_Planner_jDesktopPane1.add(URL_jLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Model_URL_jTextField.setBackground(new java.awt.Color(255, 255, 204));
        Model_URL_jTextField.setEditable(false);
        Model_URL_jTextField.setBounds(100, 30, 450, 25);
        Planning_Planner_jDesktopPane1.add(Model_URL_jTextField, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Browse_jButton.setText("View");
        Browse_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Browse_jButtonActionPerformed(evt);
            }
        });
        Browse_jButton.setBounds(550, 30, 80, 25);
        Planning_Planner_jDesktopPane1.add(Browse_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Model_Used_Resources_jList.setBackground(new java.awt.Color(255, 255, 204));
        Model_Used_Resources_jList.setBorder(javax.swing.BorderFactory.createTitledBorder("Model Required Resources"));
        Model_Used_Resources_jList.setModel(this.getModelUsedResourcesModel());
        Model_Used_Resources_jList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        Model_Used_Resources_jList.setEnabled(false);
        Model_Used_Resources_jList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                Model_Used_Resources_jListValueChanged(evt);
            }
        });
        jScrollPane8.setViewportView(Model_Used_Resources_jList);

        jScrollPane8.setBounds(560, 80, 180, 180);
        Planning_Planner_jDesktopPane1.add(jScrollPane8, javax.swing.JLayeredPane.DEFAULT_LAYER);

        ResultSummary_jTextPane.setBackground(new java.awt.Color(255, 255, 204));
        ResultSummary_jTextPane.setEditable(false);
        ResultSummary_jTextPane.setEnabled(false);
        jScrollPane69.setViewportView(ResultSummary_jTextPane);

        jScrollPane69.setBounds(640, 30, 300, 40);
        Planning_Planner_jDesktopPane1.add(jScrollPane69, javax.swing.JLayeredPane.DEFAULT_LAYER);

        ModelPerformance_jLabel.setText("Performance Result Summary");
        ModelPerformance_jLabel.setBounds(640, 10, 300, 20);
        Planning_Planner_jDesktopPane1.add(ModelPerformance_jLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Expected_Resources_jList.setBorder(javax.swing.BorderFactory.createTitledBorder("Allocated Resources"));
        Expected_Resources_jList.setModel(this.getExpectedResourcesModel());
        Expected_Resources_jList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        Expected_Resources_jList.setEnabled(false);
        Expected_Resources_jList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                Expected_Resources_jListValueChanged(evt);
            }
        });
        jScrollPane9.setViewportView(Expected_Resources_jList);

        jScrollPane9.setBounds(370, 80, 190, 180);
        Planning_Planner_jDesktopPane1.add(jScrollPane9, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Expected_MeasurmentOutcomes_jList.setBorder(javax.swing.BorderFactory.createTitledBorder("Expected Outcomes"));
        Expected_MeasurmentOutcomes_jList.setModel(getExpectedOutcomes());
        Expected_MeasurmentOutcomes_jList.setEnabled(false);
        Expected_MeasurmentOutcomes_jList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                Expected_MeasurmentOutcomes_jListValueChanged(evt);
            }
        });
        jScrollPane14.setViewportView(Expected_MeasurmentOutcomes_jList);

        jScrollPane14.setBounds(10, 80, 170, 180);
        Planning_Planner_jDesktopPane1.add(jScrollPane14, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Performing_Details_TabbedPane.addTab("Data Mining Model", Planning_Planner_jDesktopPane1);

        Technique_jDesktopPane.setBackground(new java.awt.Color(255, 255, 153));
        Technique_jDesktopPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        Approaches_jComboBox.setBackground(new java.awt.Color(255, 255, 204));
        Approaches_jComboBox.setModel(new DefaultComboBoxModel(this.approaches));
        Approaches_jComboBox.setEnabled(false);
        Approaches_jComboBox.setBounds(550, 160, 200, 22);
        Technique_jDesktopPane.add(Approaches_jComboBox, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Planner_Role_jLabel1.setText(" Approach");
        Planning_Planner_Role_jLabel1.setBounds(550, 140, 130, 20);
        Technique_jDesktopPane.add(Planning_Planner_Role_jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        goal_jLabel.setText(" Goal");
        goal_jLabel.setBounds(550, 70, 130, 20);
        Technique_jDesktopPane.add(goal_jLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Goals_jComboBox.setBackground(new java.awt.Color(255, 255, 204));
        Goals_jComboBox.setModel(new DefaultComboBoxModel(this.goals));
        Goals_jComboBox.setEnabled(false);
        Goals_jComboBox.setBounds(550, 90, 200, 22);
        Technique_jDesktopPane.add(Goals_jComboBox, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Tasks_jComboBox.setBackground(new java.awt.Color(255, 255, 204));
        Tasks_jComboBox.setModel(new DefaultComboBoxModel(this.tasks));
        Tasks_jComboBox.setEnabled(false);
        Tasks_jComboBox.setBounds(550, 30, 200, 22);
        Technique_jDesktopPane.add(Tasks_jComboBox, javax.swing.JLayeredPane.DEFAULT_LAYER);

        task_jLabel.setText(" Task");
        task_jLabel.setBounds(550, 10, 130, 20);
        Technique_jDesktopPane.add(task_jLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        algorithm_jLabel.setText("Algoritm");
        algorithm_jLabel.setBounds(20, 140, 90, 20);
        Technique_jDesktopPane.add(algorithm_jLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Supervised_jCheckBox.setBackground(new java.awt.Color(255, 255, 153));
        Supervised_jCheckBox.setText("Supervised");
        Supervised_jCheckBox.setEnabled(false);
        Supervised_jCheckBox.setBounds(550, 210, 100, 20);
        Technique_jDesktopPane.add(Supervised_jCheckBox, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Technique_jTextPane.setBackground(new java.awt.Color(255, 255, 204));
        Technique_jTextPane.setEnabled(false);
        jScrollPane70.setViewportView(Technique_jTextPane);

        jScrollPane70.setBounds(20, 30, 500, 80);
        Technique_jDesktopPane.add(jScrollPane70, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_CustomisedPlanItem_jLabel.setText("Technique");
        Planning_CustomisedPlanItem_jLabel.setBounds(20, 10, 70, 20);
        Technique_jDesktopPane.add(Planning_CustomisedPlanItem_jLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Algorithm_jTextPane.setBackground(new java.awt.Color(255, 255, 204));
        Algorithm_jTextPane.setBounds(20, 160, 500, 70);
        Technique_jDesktopPane.add(Algorithm_jTextPane, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Performing_Details_TabbedPane.addTab("Modeling Technique Details", Technique_jDesktopPane);

        Planning_CustomisedPlan_jDesktopPane.setBackground(new java.awt.Color(255, 255, 204));
        Planning_CustomisedPlan_jDesktopPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jDesktopPane8.setBackground(new java.awt.Color(255, 255, 153));
        jDesktopPane8.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jDesktopPane51.setBackground(new java.awt.Color(255, 255, 102));
        jDesktopPane51.setBorder(javax.swing.BorderFactory.createTitledBorder("Does The Performance Match Expectations"));

        ModelPerformanceAcceptable_jCheckBox.setBackground(new java.awt.Color(255, 255, 102));
        ModelPerformanceAcceptable_jCheckBox.setText("Yes");
        ModelPerformanceAcceptable_jCheckBox.setEnabled(false);
        ModelPerformanceAcceptable_jCheckBox.setBounds(10, 20, 70, 20);
        jDesktopPane51.add(ModelPerformanceAcceptable_jCheckBox, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jDesktopPane51.setBounds(290, 10, 280, 50);
        jDesktopPane8.add(jDesktopPane51, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jDesktopPane45.setBackground(new java.awt.Color(255, 255, 102));
        jDesktopPane45.setBorder(javax.swing.BorderFactory.createTitledBorder("Is The Model Underfit"));

        ModelUnderFit_jCheckBox.setBackground(new java.awt.Color(255, 255, 102));
        ModelUnderFit_jCheckBox.setText("Yes");
        ModelUnderFit_jCheckBox.setEnabled(false);
        ModelUnderFit_jCheckBox.setBounds(10, 20, 70, 20);
        jDesktopPane45.add(ModelUnderFit_jCheckBox, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jDesktopPane45.setBounds(290, 130, 280, 50);
        jDesktopPane8.add(jDesktopPane45, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jDesktopPane50.setBackground(new java.awt.Color(255, 255, 102));
        jDesktopPane50.setBorder(javax.swing.BorderFactory.createTitledBorder("Is the Model Overfit"));

        ModelOverFit_jCheckBox.setBackground(new java.awt.Color(255, 255, 102));
        ModelOverFit_jCheckBox.setText("Yes");
        ModelOverFit_jCheckBox.setEnabled(false);
        ModelOverFit_jCheckBox.setBounds(10, 20, 70, 20);
        jDesktopPane50.add(ModelOverFit_jCheckBox, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jDesktopPane50.setBounds(290, 70, 280, 50);
        jDesktopPane8.add(jDesktopPane50, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jScrollPane3.setBorder(javax.swing.BorderFactory.createTitledBorder("Model Performance Evaluation"));

        ModelPerformanceComment_jTextPane.setBackground(new java.awt.Color(255, 255, 153));
        ModelPerformanceComment_jTextPane.setEditable(false);
        jScrollPane12.setViewportView(ModelPerformanceComment_jTextPane);

        jScrollPane3.setViewportView(jScrollPane12);

        jScrollPane3.setBounds(10, 10, 270, 90);
        jDesktopPane8.add(jScrollPane3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jScrollPane5.setBorder(javax.swing.BorderFactory.createTitledBorder("Confusion Matrix Outcome"));

        ConfusionMatrixResult_jTextPane.setBackground(new java.awt.Color(255, 255, 153));
        ConfusionMatrixResult_jTextPane.setEditable(false);
        jScrollPane13.setViewportView(ConfusionMatrixResult_jTextPane);

        jScrollPane5.setViewportView(jScrollPane13);

        jScrollPane5.setBounds(10, 100, 270, 90);
        jDesktopPane8.add(jScrollPane5, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Procedures_jList.setBorder(javax.swing.BorderFactory.createTitledBorder("Model Validations Tests"));
        Procedures_jList.setModel(this.getEvaluationProcedures());
        Procedures_jList.setEnabled(false);
        Procedures_jList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                Procedures_jListValueChanged(evt);
            }
        });
        Procedures_jList.setBounds(590, 10, 310, 230);
        jDesktopPane8.add(Procedures_jList, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jPanel6.setBackground(new java.awt.Color(255, 255, 204));
        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "External Model Evaluation URL", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, java.awt.Color.black));
        jPanel6.setLayout(null);
        jPanel6.add(ModelEvaluation_URL_jTextField);
        ModelEvaluation_URL_jTextField.setBounds(18, 19, 440, 22);

        ViewModelEvaluation_jButton.setText("View");
        ViewModelEvaluation_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewModelEvaluation_jButtonActionPerformed(evt);
            }
        });
        jPanel6.add(ViewModelEvaluation_jButton);
        ViewModelEvaluation_jButton.setBounds(460, 17, 100, 25);

        jPanel6.setBounds(10, 200, 570, 50);
        jDesktopPane8.add(jPanel6, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jDesktopPane8.setBounds(10, 10, 910, 260);
        Planning_CustomisedPlan_jDesktopPane.add(jDesktopPane8, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Performing_Details_TabbedPane.addTab("Model Evaluation Results", Planning_CustomisedPlan_jDesktopPane);

        Performed_Plan_jPanel.setBackground(new java.awt.Color(255, 255, 153));
        Performed_Plan_jPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        Performed_Plan_jPanel.setLayout(null);

        Planning_Planner_Name_jLabel14.setText("Prsentation Method");
        Performed_Plan_jPanel.add(Planning_Planner_Name_jLabel14);
        Planning_Planner_Name_jLabel14.setBounds(20, 10, 180, 20);

        Method_jComboBox.setBackground(new java.awt.Color(255, 255, 204));
        Method_jComboBox.setMaximumRowCount(10);
        Method_jComboBox.setModel(new DefaultComboBoxModel(this.methods));
        Method_jComboBox.setEnabled(false);
        Performed_Plan_jPanel.add(Method_jComboBox);
        Method_jComboBox.setBounds(20, 30, 180, 22);

        Technique_jComboBox.setBackground(new java.awt.Color(255, 255, 204));
        Technique_jComboBox.setMaximumRowCount(10);
        Technique_jComboBox.setModel(new DefaultComboBoxModel(this.visulaizationTechniques));
        Technique_jComboBox.setEnabled(false);
        Performed_Plan_jPanel.add(Technique_jComboBox);
        Technique_jComboBox.setBounds(20, 90, 180, 22);

        Planning_Planner_Name_jLabel13.setText("Visulaisatin Techniques");
        Performed_Plan_jPanel.add(Planning_Planner_Name_jLabel13);
        Planning_Planner_Name_jLabel13.setBounds(20, 70, 180, 20);

        Planning_Planner_Name_jLabel12.setText("Description");
        Performed_Plan_jPanel.add(Planning_Planner_Name_jLabel12);
        Planning_Planner_Name_jLabel12.setBounds(230, 10, 80, 20);

        Presentation_Open_jButton.setText("View");
        Presentation_Open_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Presentation_Open_jButtonActionPerformed(evt);
            }
        });
        Performed_Plan_jPanel.add(Presentation_Open_jButton);
        Presentation_Open_jButton.setBounds(810, 180, 100, 25);

        Presentation_URL_jTextField.setBackground(new java.awt.Color(255, 255, 204));
        Presentation_URL_jTextField.setEditable(false);
        Performed_Plan_jPanel.add(Presentation_URL_jTextField);
        Presentation_URL_jTextField.setBounds(230, 180, 570, 25);

        Prerequisite_Source_ExternalSource_URL_jLabel4.setText("Presented Knowledge URL");
        Performed_Plan_jPanel.add(Prerequisite_Source_ExternalSource_URL_jLabel4);
        Prerequisite_Source_ExternalSource_URL_jLabel4.setBounds(20, 180, 210, 20);

        Presentation_Description_jTextPane.setEnabled(false);
        jScrollPane21.setViewportView(Presentation_Description_jTextPane);

        Performed_Plan_jPanel.add(jScrollPane21);
        jScrollPane21.setBounds(230, 30, 680, 130);

        FinalSelection_jCheckBox.setBackground(new java.awt.Color(255, 255, 153));
        FinalSelection_jCheckBox.setFont(new java.awt.Font("Tahoma", 1, 11));
        FinalSelection_jCheckBox.setText("Final Selection");
        FinalSelection_jCheckBox.setEnabled(false);
        Performed_Plan_jPanel.add(FinalSelection_jCheckBox);
        FinalSelection_jCheckBox.setBounds(20, 130, 180, 20);

        Next_jButton1.setText("Next >");
        Next_jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Next_jButton1ActionPerformed(evt);
            }
        });
        Performed_Plan_jPanel.add(Next_jButton1);
        Next_jButton1.setBounds(150, 230, 130, 25);

        Previous_jButton1.setText("< Previous");
        Previous_jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Previous_jButton1ActionPerformed(evt);
            }
        });
        Performed_Plan_jPanel.add(Previous_jButton1);
        Previous_jButton1.setBounds(20, 230, 130, 25);

        Performing_Details_TabbedPane.addTab("Presented Knowledge", Performed_Plan_jPanel);

        Performing_Details_TabbedPane.setBounds(10, 310, 960, 300);
        Performing_Details_jDesktopPane_jDesktopPane.add(Performing_Details_TabbedPane, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Control_jDesktopPane.setBackground(new java.awt.Color(255, 255, 153));
        Control_jDesktopPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        Delete_jButton.setText("Delete");
        Delete_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Delete_jButtonActionPerformed(evt);
            }
        });
        Delete_jButton.setBounds(180, 10, 80, 23);
        Control_jDesktopPane.add(Delete_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Save_jButton.setText("Save");
        Save_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Save_jButtonActionPerformed(evt);
            }
        });
        Save_jButton.setBounds(100, 10, 80, 23);
        Control_jDesktopPane.add(Save_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Refresh_jButton.setText("Refresh");
        Refresh_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Refresh_jButtonActionPerformed(evt);
            }
        });
        Refresh_jButton.setBounds(10, 10, 90, 23);
        Control_jDesktopPane.add(Refresh_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Control_jDesktopPane.setBounds(500, 620, 270, 43);
        Performing_Details_jDesktopPane_jDesktopPane.add(Control_jDesktopPane, javax.swing.JLayeredPane.DEFAULT_LAYER);

        New_jDesktopPane.setBackground(new java.awt.Color(255, 255, 153));
        New_jDesktopPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        New_jButton1.setText("New");
        New_jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                New_jButton1ActionPerformed(evt);
            }
        });
        New_jButton1.setBounds(10, 10, 80, 23);
        New_jDesktopPane.add(New_jButton1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Add_jButton1.setText("Add +");
        Add_jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Add_jButton1ActionPerformed(evt);
            }
        });
        Add_jButton1.setBounds(90, 10, 90, 23);
        New_jDesktopPane.add(Add_jButton1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        New_jDesktopPane.setBounds(780, 620, 190, 43);
        Performing_Details_jDesktopPane_jDesktopPane.add(New_jDesktopPane, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Justification_Source_jDesktopPane1.setBackground(new java.awt.Color(255, 255, 153));
        Justification_Source_jDesktopPane1.setBorder(javax.swing.BorderFactory.createTitledBorder("Supporting Evidences"));

        Justification_Sources_Control_jDesktopPane.setBackground(new java.awt.Color(255, 255, 153));

        KnowledgeEvaluation_Sources_Select_jButton.setText("+>");
        KnowledgeEvaluation_Sources_Select_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                KnowledgeEvaluation_Sources_Select_jButtonActionPerformed(evt);
            }
        });
        KnowledgeEvaluation_Sources_Select_jButton.setBounds(0, 0, 60, 20);
        Justification_Sources_Control_jDesktopPane.add(KnowledgeEvaluation_Sources_Select_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        KnowledgeEvaluation_Sources_UnSelect_jButton.setText("<+");
        KnowledgeEvaluation_Sources_UnSelect_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                KnowledgeEvaluation_Sources_UnSelect_jButtonActionPerformed1(evt);
            }
        });
        KnowledgeEvaluation_Sources_UnSelect_jButton.setBounds(0, 22, 60, 20);
        Justification_Sources_Control_jDesktopPane.add(KnowledgeEvaluation_Sources_UnSelect_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        KnowledgeEvaluation_Sources_Edit_jButton.setText("Edit");
        KnowledgeEvaluation_Sources_Edit_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                KnowledgeEvaluation_Sources_Edit_jButtonActionPerformed(evt);
            }
        });
        KnowledgeEvaluation_Sources_Edit_jButton.setBounds(0, 40, 60, 20);
        Justification_Sources_Control_jDesktopPane.add(KnowledgeEvaluation_Sources_Edit_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Justification_Sources_Control_jDesktopPane.setBounds(240, 30, 60, 110);
        Justification_Source_jDesktopPane1.add(Justification_Sources_Control_jDesktopPane, javax.swing.JLayeredPane.DEFAULT_LAYER);

        KnowledgeEvaluation_Sources_jList.setBorder(javax.swing.BorderFactory.createTitledBorder("Available Sources"));
        KnowledgeEvaluation_Sources_jList.setModel(this.getSourcesModel());
        KnowledgeEvaluation_Sources_jList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        KnowledgeEvaluation_Sources_jList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                KnowledgeEvaluation_Sources_jListValueChanged(evt);
            }
        });
        jScrollPane15.setViewportView(KnowledgeEvaluation_Sources_jList);

        jScrollPane15.setBounds(20, 30, 220, 110);
        Justification_Source_jDesktopPane1.add(jScrollPane15, javax.swing.JLayeredPane.DEFAULT_LAYER);

        KnowledgeEvaluation_Used_Sources_jList.setBorder(javax.swing.BorderFactory.createTitledBorder("Objectives Sources"));
        KnowledgeEvaluation_Used_Sources_jList.setModel(this.getKnowledgeEvaluationUsedSourcesModel());
        KnowledgeEvaluation_Used_Sources_jList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        KnowledgeEvaluation_Used_Sources_jList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                KnowledgeEvaluation_Used_Sources_jListValueChanged(evt);
            }
        });
        jScrollPane16.setViewportView(KnowledgeEvaluation_Used_Sources_jList);

        jScrollPane16.setBounds(300, 30, 190, 110);
        Justification_Source_jDesktopPane1.add(jScrollPane16, javax.swing.JLayeredPane.DEFAULT_LAYER);

        KnowledgeEvaluation_Used_Resources_jList.setBorder(javax.swing.BorderFactory.createTitledBorder("EvaluationRequired Resources"));
        KnowledgeEvaluation_Used_Resources_jList.setModel(this.getKnowledgeEvaluationUsedResourcesModel());
        KnowledgeEvaluation_Used_Resources_jList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        KnowledgeEvaluation_Used_Resources_jList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                KnowledgeEvaluation_Used_Resources_jListValueChanged(evt);
            }
        });
        jScrollPane11.setViewportView(KnowledgeEvaluation_Used_Resources_jList);

        jScrollPane11.setBounds(300, 150, 190, 130);
        Justification_Source_jDesktopPane1.add(jScrollPane11, javax.swing.JLayeredPane.DEFAULT_LAYER);

        KnowledgeEvaluation_Resources_jList.setBorder(javax.swing.BorderFactory.createTitledBorder("Project Resources"));
        KnowledgeEvaluation_Resources_jList.setModel(this.getProjectResourcesModel());
        KnowledgeEvaluation_Resources_jList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        KnowledgeEvaluation_Resources_jList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                KnowledgeEvaluation_Resources_jListValueChanged(evt);
            }
        });
        jScrollPane7.setViewportView(KnowledgeEvaluation_Resources_jList);

        jScrollPane7.setBounds(20, 150, 220, 130);
        Justification_Source_jDesktopPane1.add(jScrollPane7, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Objectives_Control_jDesktopPane1.setBackground(new java.awt.Color(255, 255, 153));

        KnowledgeEvaluation_Edit_jButton.setText("Edit");
        KnowledgeEvaluation_Edit_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                KnowledgeEvaluation_Edit_jButtonActionPerformed(evt);
            }
        });
        KnowledgeEvaluation_Edit_jButton.setBounds(0, 40, 60, 20);
        Planning_Objectives_Control_jDesktopPane1.add(KnowledgeEvaluation_Edit_jButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        KnowledgeEvaluation_Select_jButton1.setText("+>");
        KnowledgeEvaluation_Select_jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                KnowledgeEvaluation_Select_jButton1ActionPerformed(evt);
            }
        });
        KnowledgeEvaluation_Select_jButton1.setBounds(0, 0, 60, 20);
        Planning_Objectives_Control_jDesktopPane1.add(KnowledgeEvaluation_Select_jButton1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        KnowledgeEvaluation_UnSelect_jButton1.setText("<-");
        KnowledgeEvaluation_UnSelect_jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                KnowledgeEvaluation_UnSelect_jButton1ActionPerformed(evt);
            }
        });
        KnowledgeEvaluation_UnSelect_jButton1.setBounds(0, 20, 60, 20);
        Planning_Objectives_Control_jDesktopPane1.add(KnowledgeEvaluation_UnSelect_jButton1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        ConsumedTime_jLabel1.setText("Time");
        ConsumedTime_jLabel1.setBounds(20, 70, 40, 22);
        Planning_Objectives_Control_jDesktopPane1.add(ConsumedTime_jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        ConsumedTimeDuration_jTextField.setBounds(0, 100, 60, 30);
        Planning_Objectives_Control_jDesktopPane1.add(ConsumedTimeDuration_jTextField, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Objectives_Control_jDesktopPane1.setBounds(240, 150, 60, 130);
        Justification_Source_jDesktopPane1.add(Planning_Objectives_Control_jDesktopPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Justification_Source_jDesktopPane1.setBounds(450, 10, 510, 290);
        Performing_Details_jDesktopPane_jDesktopPane.add(Justification_Source_jDesktopPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Planning_Resource_jDesktopPane.setBackground(new java.awt.Color(255, 255, 153));
        Planning_Resource_jDesktopPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        Planning_Resource_jDesktopPane.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Planning_Resource_jDesktopPaneFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                Planning_Resource_jDesktopPaneFocusLost(evt);
            }
        });

        jDesktopPane52.setBackground(new java.awt.Color(255, 255, 153));
        jDesktopPane52.setBorder(javax.swing.BorderFactory.createTitledBorder("Is Knowledge Consistent With Literature"));

        KnowledgeConsistentWithLiterature_jCheckBox.setBackground(new java.awt.Color(255, 255, 153));
        KnowledgeConsistentWithLiterature_jCheckBox.setText("Yes");
        KnowledgeConsistentWithLiterature_jCheckBox.setBounds(10, 20, 70, 20);
        jDesktopPane52.add(KnowledgeConsistentWithLiterature_jCheckBox, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jDesktopPane52.setBounds(10, 10, 400, 50);
        Planning_Resource_jDesktopPane.add(jDesktopPane52, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jDesktopPane53.setBackground(new java.awt.Color(255, 255, 153));
        jDesktopPane53.setBorder(javax.swing.BorderFactory.createTitledBorder("Knowledge Consistent With Bio-Chemical Priciples"));

        KnowledgeConsistentWithBiology_jCheckBox.setBackground(new java.awt.Color(255, 255, 153));
        KnowledgeConsistentWithBiology_jCheckBox.setText("Yes");
        KnowledgeConsistentWithBiology_jCheckBox.setBounds(10, 20, 70, 20);
        jDesktopPane53.add(KnowledgeConsistentWithBiology_jCheckBox, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jDesktopPane53.setBounds(10, 60, 400, 50);
        Planning_Resource_jDesktopPane.add(jDesktopPane53, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jDesktopPane46.setBackground(new java.awt.Color(255, 255, 153));
        jDesktopPane46.setBorder(javax.swing.BorderFactory.createTitledBorder("Knowledge Fulfilled Study Aims"));

        KnowledgeFulfilledStudyAims_jCheckBox.setBackground(new java.awt.Color(255, 255, 153));
        KnowledgeFulfilledStudyAims_jCheckBox.setText("Yes");
        KnowledgeFulfilledStudyAims_jCheckBox.setBounds(10, 20, 70, 20);
        jDesktopPane46.add(KnowledgeFulfilledStudyAims_jCheckBox, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jDesktopPane46.setBounds(10, 110, 400, 50);
        Planning_Resource_jDesktopPane.add(jDesktopPane46, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jDesktopPane54.setBackground(new java.awt.Color(255, 255, 153));
        jDesktopPane54.setBorder(javax.swing.BorderFactory.createTitledBorder("Does the Knowledges Fulfils Process Objectives"));

        KnowledgesFulfilledProcessObjectives_jCheckBox.setBackground(new java.awt.Color(255, 255, 153));
        KnowledgesFulfilledProcessObjectives_jCheckBox.setText("Yes");
        KnowledgesFulfilledProcessObjectives_jCheckBox.setBounds(10, 20, 70, 20);
        jDesktopPane54.add(KnowledgesFulfilledProcessObjectives_jCheckBox, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jDesktopPane54.setBounds(10, 160, 400, 50);
        Planning_Resource_jDesktopPane.add(jDesktopPane54, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jDesktopPane47.setBackground(new java.awt.Color(255, 255, 153));
        jDesktopPane47.setBorder(javax.swing.BorderFactory.createTitledBorder("Is the Knowledges Consistent with Domain Expert Background"));

        KnowledgesConsistentWithDomainExpertBackground_jCheckBox.setBackground(new java.awt.Color(255, 255, 153));
        KnowledgesConsistentWithDomainExpertBackground_jCheckBox.setText("Yes");
        KnowledgesConsistentWithDomainExpertBackground_jCheckBox.setBounds(10, 20, 70, 20);
        jDesktopPane47.add(KnowledgesConsistentWithDomainExpertBackground_jCheckBox, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jDesktopPane47.setBounds(10, 210, 400, 50);
        Planning_Resource_jDesktopPane.add(jDesktopPane47, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jTabbedPane1.addTab("Knowledge Assessmenty", Planning_Resource_jDesktopPane);

        jPanel2.setBackground(new java.awt.Color(255, 255, 153));
        jPanel2.setLayout(null);

        jScrollPane6.setBackground(new java.awt.Color(255, 255, 102));
        jScrollPane6.setBorder(javax.swing.BorderFactory.createTitledBorder("Recommandation"));

        jScrollPane17.setViewportView(Knowledge_Recommendations_jTextPane);

        jScrollPane6.setViewportView(jScrollPane17);

        jPanel2.add(jScrollPane6);
        jScrollPane6.setBounds(10, 180, 400, 90);

        jScrollPane10.setBackground(new java.awt.Color(255, 255, 102));
        jScrollPane10.setBorder(javax.swing.BorderFactory.createTitledBorder("PropogatedQuestion"));

        jScrollPane18.setViewportView(Knowledge_PropogatedQuestion_jTextPane);

        jScrollPane10.setViewportView(jScrollPane18);

        jPanel2.add(jScrollPane10);
        jScrollPane10.setBounds(10, 0, 400, 90);

        jScrollPane19.setBackground(new java.awt.Color(255, 255, 102));
        jScrollPane19.setBorder(javax.swing.BorderFactory.createTitledBorder("Propogated Hypothesis"));

        jScrollPane20.setViewportView(Knowledge_PropogatedHypothesis_jTextPane);

        jScrollPane19.setViewportView(jScrollPane20);

        jPanel2.add(jScrollPane19);
        jScrollPane19.setBounds(10, 90, 400, 90);

        jTabbedPane1.addTab("Knowledge Feedback", jPanel2);

        jTabbedPane1.setBounds(20, 10, 420, 290);
        Performing_Details_jDesktopPane_jDesktopPane.add(jTabbedPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Performing_Details_jDesktopPane_jDesktopPane.setBounds(10, 10, 980, 680);
        Performing_jLayeredPane.add(Performing_Details_jDesktopPane_jDesktopPane, javax.swing.JLayeredPane.DEFAULT_LAYER);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Performing_jLayeredPane, javax.swing.GroupLayout.PREFERRED_SIZE, 1005, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Performing_jLayeredPane, javax.swing.GroupLayout.PREFERRED_SIZE, 698, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void KnowledgeEvaluation_Resources_jListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_KnowledgeEvaluation_Resources_jListValueChanged

   if (Global.project!=null&&Global.project.getSupplements()!=null && 
       Global.project.getSupplements().getManagement()!=null &&
       Global.project.getSupplements().getManagement().getResources()!=null )
       if (this.KnowledgeEvaluation_Resources_jList.getSelectedIndex()>=0)
            this.resource=Global.project.getSupplements().getManagement().
            getResources().getResource(this.KnowledgeEvaluation_Resources_jList.getSelectedIndex());

        this.populateForm();


    }//GEN-LAST:event_KnowledgeEvaluation_Resources_jListValueChanged

    private void Sources_UnSelect_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Sources_UnSelect_jButtonActionPerformed

    }//GEN-LAST:event_Sources_UnSelect_jButtonActionPerformed

//DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
//****************************************************************************
//                              Delete Resource
//DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
//****************************************************************************
 private void delete_knowledgeEvaluation_resource()
{
if (this.knowledgeEvaluation!=null &&
//    this.evaluation.getFeasibility()!=null &&
    this.knowledgeEvaluation.getResources()!=null &&
    this.knowledgeEvaluation.getResources().getResourcesList().size()>0)
    {
        int index= this.knowledgeEvaluation.getResources().getResourcesList()
                                                                            .indexOf(this.resource);
        if (this.knowledgeEvaluation.getResources().delete(this.resource)==0);
        {
            if (this.knowledgeEvaluation.getResources().getResourcesList().size()>0)
            {
                if (index==0)
                    this.resource = this.knowledgeEvaluation.getResources().getResource(index);
                else if(index>0)
                    this.resource = this.knowledgeEvaluation.getResources().getResource(index-1);
            }
        }
        // setResult process objective
 }
}

 //DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
//****************************************************************************
//                              Delete Resource
//DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
//****************************************************************************
 private void delete_procedure_resource()
{
if (this.procedure!=null &&
//    this.procedure.getFeasibility()!=null &&
    this.procedure.getResources()!=null &&
    this.procedure.getResources().getResourcesList().size()>0)
    {
        int index= this.procedure.getResources().getResourcesList()
                                                                            .indexOf(this.resource);
        if (this.procedure.getResources().delete(this.resource)==0);
        {
            if (this.procedure.getResources().getResourcesList().size()>0)
            {
                if (index==0)
                    this.resource = this.procedure.getResources().getResource(index);
                else if(index>0)
                    this.resource = this.procedure.getResources().getResource(index-1);
            }
        }
        // setResult process objective
 }
}

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
this.refresh_knowledgeEvaluation_details();
    }//GEN-LAST:event_formWindowActivated

    private void formWindowDeactivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowDeactivated
//this.save_model();
    }//GEN-LAST:event_formWindowDeactivated

    private void KnowledgeEvaluation_Used_Resources_jListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_KnowledgeEvaluation_Used_Resources_jListValueChanged

        if (this.model!=null &&
//            this.model.getFeasibility()!=null &&
            this.model.getRequirements()!=null)

         if (this.model.getRequirements().getResourcesList().size()>=0
            && this.Model_Used_Resources_jList.getSelectedIndex()>=0)

             this.resource= (Resource) this.model.getRequirements().getResourcesList().get(this.Model_Used_Resources_jList.getSelectedIndex());
    }//GEN-LAST:event_KnowledgeEvaluation_Used_Resources_jListValueChanged

    private void KnowledgeEvaluation_Edit_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_KnowledgeEvaluation_Edit_jButtonActionPerformed
    new ManagementForm(this.resource).setVisible(true);
    }//GEN-LAST:event_KnowledgeEvaluation_Edit_jButtonActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
System.gc();
//System.runFinalization();
    
    }//GEN-LAST:event_formWindowClosed

    private void Analysts_jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_Analysts_jList1ValueChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_Analysts_jList1ValueChanged

    private void Analysts_jList2ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_Analysts_jList2ValueChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_Analysts_jList2ValueChanged

    private void Model_Selected_MeasuredOutcomes_jListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_Model_Selected_MeasuredOutcomes_jListValueChanged

    if (   this.model!=null
 //       && this.model.getSuccessCriteria()!=null
        && this.model.getPerformance()!=null
        && this.model.getPerformance().getOutcomesList().size()>0  &&
        Model_Selected_MeasuredOutcomes_jList.getSelectedIndex()>=0
        )

         this.outcome=  this.model.getPerformance().getOutcomesList().
                                get(Model_Selected_MeasuredOutcomes_jList.getSelectedIndex());

    }//GEN-LAST:event_Model_Selected_MeasuredOutcomes_jListValueChanged

    private void Planning_Resource_jDesktopPaneFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Planning_Resource_jDesktopPaneFocusGained
    //------------------------------------------------------------------------
  /*
    if (this.model!=null && this.model.getFeasibility()!=null)
         {
            this.Duration_jTextField.setText(this.model.getFeasibility().getRequiredTime()+"");
            this.Feasible_jCheckBox.setSelected(this.model.getFeasibility().isFeasible());
         }
*/

    }//GEN-LAST:event_Planning_Resource_jDesktopPaneFocusGained

    private void Planning_Resource_jDesktopPaneFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Planning_Resource_jDesktopPaneFocusLost
/*
   if (this.model!=null && this.model.getFeasibility()!=null
       && !this.Duration_jTextField.getText().equals(""))
    {
       this.model.getFeasibility().setRequiredTime(Double.parseDouble(this.Duration_jTextField.getText()));
       this.model.getFeasibility().setFeasible(this.Feasible_jCheckBox.isSelected());
     }
 *
 */
    }//GEN-LAST:event_Planning_Resource_jDesktopPaneFocusLost

    private void New_jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_New_jButton1ActionPerformed
        this.clear_knowledgeEvaluation();
}//GEN-LAST:event_New_jButton1ActionPerformed

    private void Refresh_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Refresh_jButtonActionPerformed
        this.refresh();
        this.populate_knowledgeEvaluation();
    }//GEN-LAST:event_Refresh_jButtonActionPerformed

    private void Save_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Save_jButtonActionPerformed
        this.save_knowledgeEvaluation();
}//GEN-LAST:event_Save_jButtonActionPerformed

    private void Delete_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Delete_jButtonActionPerformed
if (this.knowledgeEvaluation!=null)
        {            
            this.knowledgeEvaluation.UnDeliver();
            //this.delete_evaluation();
            this.clear_knowledgeEvaluation();
            this.populate_knowledgeEvaluation();
            this.populateForm();
        }
        //this.delete_evaluation();
}//GEN-LAST:event_Delete_jButtonActionPerformed

    private void Add_jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Add_jButton1ActionPerformed
        this.save_knowledgeEvaluation();
        this.clear_knowledgeEvaluation();
}//GEN-LAST:event_Add_jButton1ActionPerformed

    private void KnowledgeEvaluation_Select_jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_KnowledgeEvaluation_Select_jButton1ActionPerformed

 this.save_knowledgeEvaluation();
 if (this.knowledgeEvaluation!=null)
 {
        if (this.resource!=null )
        {
            if (this.knowledgeEvaluation.getResources()==null)
                this.knowledgeEvaluation.setResources(new Resources());

            this.knowledgeEvaluation.getResources().save(this.resource);
        }        
  }

 this.KnowledgeEvaluation_Used_Resources_jList.setModel(this.getKnowledgeEvaluationUsedResourcesModel());
 
 this.save_knowledgeEvaluation();
 this.populate_knowledgeEvaluation();

    }//GEN-LAST:event_KnowledgeEvaluation_Select_jButton1ActionPerformed

    private void KnowledgeEvaluation_UnSelect_jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_KnowledgeEvaluation_UnSelect_jButton1ActionPerformed

        if (this.knowledgeEvaluation!=null)
            this.delete_knowledgeEvaluation_resource();
        //
        this.KnowledgeEvaluation_Used_Resources_jList.setModel(this.getKnowledgeEvaluationUsedResourcesModel());
        //
        this.KnowledgeEvaluation_Used_Resources_jList.setSelectedIndex(this.model.getRequirements().
                getResourcesList().indexOf(this.resource));
this.KnowledgeEvaluation_Used_Resources_jList.setModel(this.getKnowledgeEvaluationUsedResourcesModel());

        this.populateForm();

    }//GEN-LAST:event_KnowledgeEvaluation_UnSelect_jButton1ActionPerformed

    private void Model_Selected_Standards_jListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_Model_Selected_Standards_jListValueChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_Model_Selected_Standards_jListValueChanged

    private void Model_Used_Resources_jListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_Model_Used_Resources_jListValueChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_Model_Used_Resources_jListValueChanged

    private void Browse_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Browse_jButtonActionPerformed
/*
if (!this.Model_URL_jTextField.getText().equals(""))
   {
       String fileName=Model_URL_jTextField.getText().substring(6, this.Model_URL_jTextField.getText().length());
//       System.out.println(fileName);
       Tools.viewAnyFile(new File(fileName));
   }
*/
        
  
    if (this.model!=null && this.model.getOutcomeURL()!=null && this.model.getOutcomeURL().toString().contains("Model.obj"))
    {            
        String modelDescriptionFileName=model.getLocation()+"/"+"Model.txt";
        File modelDescriptionFile=new File(modelDescriptionFileName);

        if (modelDescriptionFile.exists())
            modelDescriptionFile.delete();         

        if (model!=null && model.getDescription()!=null)
         {
            Tools.writeStringToFile(model.getDescription(), modelDescriptionFile.getPath());         
            Tools.viewAnyFile(modelDescriptionFile);
         }

        if (modelDescriptionFile.exists())
            modelDescriptionFile.deleteOnExit();             
    }
    else
    {
        if (!Model_URL_jTextField.getText().equals(""))        
          try {                
                URL modelUrl=new URL(Model_URL_jTextField.getText());                
                Tools.viewAnyFile(Tools.toFile(modelUrl));
                
          } catch (MalformedURLException ex) {
                JOptionPane.showMessageDialog(null, "File URL is invalid ");
                Logger.getLogger(KnowledgeEvaluationForm.class.getName()).log(Level.SEVERE, null, ex);
          }        
    }
            
        
    }//GEN-LAST:event_Browse_jButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
new StudyForm().setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void Expected_Resources_jListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_Expected_Resources_jListValueChanged

    }//GEN-LAST:event_Expected_Resources_jListValueChanged

    private void Expected_MeasurmentOutcomes_jListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_Expected_MeasurmentOutcomes_jListValueChanged

        if (   this.techniqueSelection!=null
                && this.techniqueSelection.getSuccessCriteria()!=null
                && this.techniqueSelection.getSuccessCriteria().getExpectedOutcomes()!=null
                && this.techniqueSelection.getSuccessCriteria().getExpectedOutcomes().getOutcomesList().size()>0  &&
                Expected_MeasurmentOutcomes_jList.getSelectedIndex()>=0
                )

            this.outcome=  this.techniqueSelection.getSuccessCriteria().
                    getExpectedOutcomes().getOutcomesList().
                    get(Expected_MeasurmentOutcomes_jList.getSelectedIndex());
    }//GEN-LAST:event_Expected_MeasurmentOutcomes_jListValueChanged

    private void Selected_ExpectedMeasurmentOutcomes_jListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_Selected_ExpectedMeasurmentOutcomes_jListValueChanged

        if (   this.processObjective!=null
                && this.processObjective.getSuccessCriteria()!=null
                && this.processObjective.getSuccessCriteria().getExpectedOutcomes()!=null
                && this.processObjective.getSuccessCriteria().getExpectedOutcomes().getOutcomesList().size()>0  &&
                Selected_ExpectedMeasurmentOutcomes_jList.getSelectedIndex()>=0
                )

            this.expectedOutcome=  this.processObjective.getSuccessCriteria().
                    getExpectedOutcomes().getOutcomesList().
                    get(Selected_ExpectedMeasurmentOutcomes_jList.getSelectedIndex());
    }//GEN-LAST:event_Selected_ExpectedMeasurmentOutcomes_jListValueChanged

    private void KnowledgeEvaluation_Sources_Select_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_KnowledgeEvaluation_Sources_Select_jButtonActionPerformed
        
        if (this.knowledgeEvaluation!=null) {

            if (this.knowledgeEvaluation.getEvidences()==null)
                this.knowledgeEvaluation.setEvidences(new Sources());

            this.knowledgeEvaluation.getEvidences().save(this.source);
        }
        //else
            //System.out.print("No Objective added yet ...!!!");
        this.KnowledgeEvaluation_Used_Sources_jList.setModel(this.getKnowledgeEvaluationUsedSourcesModel());
        this.populateForm();

    }//GEN-LAST:event_KnowledgeEvaluation_Sources_Select_jButtonActionPerformed

    private void KnowledgeEvaluation_Sources_UnSelect_jButtonActionPerformed1(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_KnowledgeEvaluation_Sources_UnSelect_jButtonActionPerformed1
        if (this.knowledgeEvaluation!=null )
            this.delete_knowledgeEvaluation_Evidence();
        this.KnowledgeEvaluation_Used_Sources_jList .setModel(this.getKnowledgeEvaluationUsedSourcesModel());

        this.populateForm();
}//GEN-LAST:event_KnowledgeEvaluation_Sources_UnSelect_jButtonActionPerformed1

    private void KnowledgeEvaluation_Sources_Edit_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_KnowledgeEvaluation_Sources_Edit_jButtonActionPerformed
        SourceForm projectSourceForm=null;
        projectSourceForm=new SourceForm((process_model.issue.tracibility.Source) this.source);
    }//GEN-LAST:event_KnowledgeEvaluation_Sources_Edit_jButtonActionPerformed

    private void KnowledgeEvaluation_Sources_jListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_KnowledgeEvaluation_Sources_jListValueChanged
        if (Global.project !=null &&  Global.project.getSources()!=null &&
                Global.project.getSources().getSourcesList().size()>0)
            if (this.KnowledgeEvaluation_Sources_jList.getSelectedIndex()>=0)

                this.source=(Source) Global.project.getSources().
                        getSourcesList().get(this.KnowledgeEvaluation_Sources_jList.getSelectedIndex());

    }//GEN-LAST:event_KnowledgeEvaluation_Sources_jListValueChanged

    private void KnowledgeEvaluation_Used_Sources_jListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_KnowledgeEvaluation_Used_Sources_jListValueChanged

        if (this.processObjective!=null && this.processObjective.getTraceability()!=null)
            if (this.KnowledgeEvaluation_Used_Sources_jList.getSelectedIndex()>=0)

                this.source= (Source) this.processObjective.getTraceability().getSourcesList().get(this.KnowledgeEvaluation_Used_Sources_jList.getSelectedIndex());
    }//GEN-LAST:event_KnowledgeEvaluation_Used_Sources_jListValueChanged

    
    
    
    
    private void Presentation_Open_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Presentation_Open_jButtonActionPerformed
/*
if (!this.Presentation_URL_jTextField.getText().equals(""))
   {
       String fileName=Presentation_URL_jTextField.getText().substring(6, this.Presentation_URL_jTextField.getText().length());
       System.out.println(fileName);
       Tools.viewAnyFile(new File(fileName));
   }
*/
    //--------------------------------------------------------------------------
    
        
   if (this.presentation!=null && this.presentation.isAutomated())
   {
       JOptionPane.showMessageDialog(null, "Unable to visualise automated model in this phase");
   }
   else if (Presentation_URL_jTextField.getText()!=null && !Presentation_URL_jTextField.getText().equals(""))
    {    
       try {
            Tools.viewAnyFile(Tools.toFile(new URL(Presentation_URL_jTextField.getText())));
       } catch (MalformedURLException ex) {
            JOptionPane.showMessageDialog(null, "Make sure the external file is represented by a valid URL!");
            Logger.getLogger(KnowledgePresentationForm.class.getName()).log(Level.SEVERE, null, ex);
            
       } 
    }    
    //--------------------------------------------------------------------------    
            
             
        
}//GEN-LAST:event_Presentation_Open_jButtonActionPerformed

    private void Next_jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Next_jButton1ActionPerformed
        this.next_presentation();
}//GEN-LAST:event_Next_jButton1ActionPerformed

    private void Previous_jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Previous_jButton1ActionPerformed
        this.previous_presentation();
}//GEN-LAST:event_Previous_jButton1ActionPerformed

    private void Procedures_jListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_Procedures_jListValueChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_Procedures_jListValueChanged

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
   // if (this.knowledgeEvaluation!=null)
        this.save_knowledgeEvaluation();
  
    }//GEN-LAST:event_formWindowClosing

        private void ViewModelEvaluation_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewModelEvaluation_jButtonActionPerformed

        if (!ModelEvaluation_URL_jTextField.getText().equals(""))
        try {
            Tools.viewAnyFile(Tools.toFile(new URL(ModelEvaluation_URL_jTextField.getText())));
         // TODO add your handling code here:
        } catch (MalformedURLException ex) {
            JOptionPane.showMessageDialog(null, "File URL is invalid ");
            Logger.getLogger(ModelEvaluationForm.class.getName()).log(Level.SEVERE, null, ex);
        }                   
    }//GEN-LAST:event_ViewModelEvaluation_jButtonActionPerformed


        
        
        
//PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
//                         Populate Plan Form
//PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
 private void populate_modelEvaluation()
{

if (this.modelEvaluation!=null)
{
    this.ModelOverFit_jCheckBox.setSelected(this.modelEvaluation.isModelOverFit());

    this.ModelUnderFit_jCheckBox.setSelected(this.modelEvaluation.isModelUnderFit());

    this.ModelPerformanceAcceptable_jCheckBox.setSelected(this.modelEvaluation.isModelPerformanceAcceptable());
           
    if (this.modelEvaluation.getOutcomeURL()!=null)
        this.ModelEvaluation_URL_jTextField.setText(this.modelEvaluation.getOutcomeURL().toString());         
    else
        this.ModelEvaluation_URL_jTextField.setText("");                
 }
        
}
        
        
//-----------------------------------------------------------------------------
//*****************************************************************************
//                     Resources Funds Calculations
//*****************************************************************************
//-----------------------------------------------------------------------------
private void addResourceFunds()
{
if (Global.project!=null &&
                Global.project.getSupplements()!=null &&
                Global.project.getSupplements().getManagement()!=null &&
                Global.project.getSupplements().getManagement().getConstraint()!=null)
                {
                      Double curruntUsedFunds=Global.project.getSupplements().getManagement().getConstraint().getUsedFunds();
                      Double totalFunds=Global.project.getSupplements().getManagement().getConstraint().getTotalFunds();

                      Double resourceCost=0.0;

                      if (this.resource!=null)
                              resourceCost= this.resource.getCost();

                      Double newUsedFunds=curruntUsedFunds+resourceCost;

                      if (newUsedFunds>totalFunds)
                          JOptionPane.showMessageDialog(null, "Exceeded the project Total Funds,"
                                                           +" Used Funds = "+newUsedFunds
                                                           +" Project Planned Total Funds = "+totalFunds);

                     Global.project.getSupplements().getManagement().getConstraint().setUsedFunds(newUsedFunds);

                }
}

//*****************************************************************************
private void deductResourceFunds()
{
 //------------------------------------------------------------------
            if (Global.project!=null &&
                Global.project.getSupplements()!=null &&
                Global.project.getSupplements().getManagement()!=null &&
                Global.project.getSupplements().getManagement().getConstraint()!=null)
                {
                      Double curruntUsedFunds=Global.project.getSupplements().getManagement().getConstraint().getUsedFunds();
                      Double totalFunds=Global.project.getSupplements().getManagement().getConstraint().getTotalFunds();

                      Double resourceCost=0.0;

                      if (this.resource!=null)
                              resourceCost= this.resource.getCost();

                      Double newUsedFunds=curruntUsedFunds-resourceCost;

                      if (newUsedFunds>totalFunds)
                          JOptionPane.showMessageDialog(null, "Exceeded the project Total Funds,"
                                                           +" Used Funds = "+newUsedFunds
                                                           +" Project Planned Total Funds = "+totalFunds);

                     Global.project.getSupplements().getManagement().getConstraint().setUsedFunds(newUsedFunds);

                }
}

//SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
//****************************************************************************
//                              Save Plan
//****************************************************************************
//SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS

 private void save_knowledgeEvaluation()
 {
            if (this.knowledgeEvaluation==null)
                this.knowledgeEvaluation=new KnowledgeEvaluation();
           //---------------------------------------------------------------------------------------------------------------------           
            this.knowledgeEvaluation.setKnowledgeConsistentWithBiology(this.KnowledgeConsistentWithBiology_jCheckBox.isSelected());
            this.knowledgeEvaluation.setKnowledgeConsistentWithLiterature(this.KnowledgeConsistentWithLiterature_jCheckBox.isSelected());
            this.knowledgeEvaluation.setKnowledgeFulfilledStudyAims(this.KnowledgeFulfilledStudyAims_jCheckBox.isSelected());
            this.knowledgeEvaluation.setKnowledgesFulfilledProcessObjectives(this.KnowledgesFulfilledProcessObjectives_jCheckBox.isSelected());
            this.knowledgeEvaluation.setKnowledgesConsistentWithDomainExpertBackground(this.KnowledgesConsistentWithDomainExpertBackground_jCheckBox.isSelected());

          if (this.Knowledge_PropogatedHypothesis_jTextPane.getText() != null && !this.Knowledge_PropogatedHypothesis_jTextPane.getText().equals("")) {
                this.knowledgeEvaluation.setPropogatedHypothesis(this.Knowledge_PropogatedHypothesis_jTextPane.getText());
            }

          if (this.Knowledge_PropogatedQuestion_jTextPane.getText() != null && !this.Knowledge_PropogatedQuestion_jTextPane.getText().equals("")) {
                this.knowledgeEvaluation.setPropogatedQuestion(this.Knowledge_PropogatedQuestion_jTextPane.getText());
            }

          if (this.Knowledge_Recommendations_jTextPane.getText() != null && !this.Knowledge_Recommendations_jTextPane.getText().equals("")) {
                this.knowledgeEvaluation.setRecommendations(this.Knowledge_Recommendations_jTextPane.getText());
            }

          this.Procedures_jList.setModel(this.getEvaluationProcedures());
          this.KnowledgeEvaluation_Used_Resources_jList.setModel(this.getKnowledgeEvaluationUsedResourcesModel());

        this.knowledgeEvaluation.deliverAsMain();
 }
//PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
//                         Populate Plan Form
//PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
 private void populate_knowledgeEvaluation()
{

if (this.knowledgeEvaluation!=null)
{
    this.KnowledgeConsistentWithBiology_jCheckBox.setSelected(this.knowledgeEvaluation.isKnowledgeConsistentWithBiology());

    this.KnowledgeConsistentWithLiterature_jCheckBox.setSelected(this.knowledgeEvaluation.isKnowledgeConsistentWithLiterature());

    this.KnowledgesConsistentWithDomainExpertBackground_jCheckBox.setSelected(this.knowledgeEvaluation.isKnowledgesConsistentWithDomainExpertBackground());

    this.KnowledgesFulfilledProcessObjectives_jCheckBox.setSelected(this.knowledgeEvaluation.isKnowledgesFulfilledProcessObjectives());

    this.KnowledgeFulfilledStudyAims_jCheckBox.setSelected(this.knowledgeEvaluation.isKnowledgeFulfilledStudyAims());

    if (this.knowledgeEvaluation.getPropogatedQuestion()!=null)
         this.Knowledge_PropogatedQuestion_jTextPane.setText(this.knowledgeEvaluation.getPropogatedQuestion()) ;
    else
         this.Knowledge_PropogatedQuestion_jTextPane.setText("") ;

     if (this.knowledgeEvaluation.getPropogatedHypothesis()!=null)
         this.Knowledge_PropogatedHypothesis_jTextPane.setText(this.knowledgeEvaluation.getPropogatedHypothesis()) ;
    else
         this.Knowledge_PropogatedHypothesis_jTextPane.setText("") ;

     if (this.knowledgeEvaluation.getRecommendations()!=null)
         this.Knowledge_Recommendations_jTextPane.setText(this.knowledgeEvaluation.getRecommendations()) ;
    else
         this.Knowledge_Recommendations_jTextPane.setText("") ;
 }

//-----------------------------------------------------------------------------
if (this.model!=null)
     {
         if (this.model.getTechnique()!=null)
            this.Technique_jTextPane.setText(this.model.getTechnique());
         else
           this.Technique_jTextPane.setText("");

         if (this.model.getOutcomeURL()!=null)
            this.Model_URL_jTextField.setText(this.model.getOutcomeURL().toString());
         else
           this.Model_URL_jTextField.setText("");
         
        if (this.model.getAlgorithm()!=null)
            this.Algorithm_jTextPane.setText(this.model.getAlgorithm());
         else
           this.Algorithm_jTextPane.setText("");

         //--------------------------------------------------------------------
         if (this.model!=null&& this.model.getDataMiningApproach()!=null)
             this.Approaches_jComboBox.setSelectedIndex(this.model.getDataMiningApproach().ordinal()+1);
         else
             this.Approaches_jComboBox.setSelectedIndex(0);

         if (this.model!=null&& this.model.getDataMiningGoal()!=null)
             this.Goals_jComboBox.setSelectedIndex(this.model.getDataMiningGoal().ordinal()+1);
         else
             this.Goals_jComboBox.setSelectedIndex(0);

         if (this.model!=null&& this.model.getDataMiningTask()!=null)
             this.Tasks_jComboBox.setSelectedIndex(this.model.getDataMiningTask().ordinal()+1);
         else
             this.Tasks_jComboBox.setSelectedIndex(0);


        this.Supervised_jCheckBox.setSelected(this.model.isSupervised());
        
         //--------------------------------------------------------------------
        
        if ( this.model.getPerformance()!=null
          && this.model.getPerformance().getResultSummary()!=null)
            this.ResultSummary_jTextPane.setText(this.model.getPerformance().getResultSummary());
        else
            this.ResultSummary_jTextPane.setText("");

         if (this.model!=null && this.model.getRequirements()!=null)         
            this.ConsumedTimeDuration_jTextField.setText(this.model.getBuildDuration()+"");
                                 
     }
//else
//System.out.print(" No Planned Activity found to populate");

    if (this.modelEvaluation!=null)
        this.ModelOverFit_jCheckBox.setSelected(this.modelEvaluation.isModelOverFit());
    else
        this.ModelOverFit_jCheckBox.setSelected(false);

    if (this.modelEvaluation!=null)
        this.ModelUnderFit_jCheckBox.setSelected(this.modelEvaluation.isModelUnderFit());
    else
        this.ModelUnderFit_jCheckBox.setSelected(false);

    if (this.modelEvaluation!=null)
        this.ModelPerformanceAcceptable_jCheckBox.setSelected(this.modelEvaluation.isModelPerformanceAcceptable());
    else
        this.ModelPerformanceAcceptable_jCheckBox.setSelected(false);


this.populate_knowledgePresentation();
this.populate_modelEvaluation();
this.refresh_knowledgeEvaluation_details();
this.populateForm();
}

 //RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR
//****************************************************************************
//                              Refresh
//****************************************************************************
//RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR

 private void refresh()
 {
 
Result<KnowledgeEvaluation> knowledgeEvaluationResult=new Result<KnowledgeEvaluation>();
//*****************************************************************************

if (Global.currentPhase!=null &&
    Global.currentPhase.getResult()!=null)
{
    knowledgeEvaluationResult=Global.currentPhase.getResult();
    if (knowledgeEvaluationResult.getMainDelivery()!=null)    
        this.knowledgeEvaluation= (KnowledgeEvaluation) knowledgeEvaluationResult.getMainDelivery();
}

else
 this.knowledgeEvaluation=new KnowledgeEvaluation();

//*****************************************************************************
 if (  Global.project.getProcess()!=null &&
    Global.project.getProcess().getResults()!=null &&
    Global.project.getProcess().getResults().getResult(1)!=null &&
    Global.project.getProcess().getResults().getResult(1)!=null)
{
    if (Global.project.getProcess().getResults().getResult(1).getMainDelivery()!=null)
    {
        processObjective=(DataMiningObjective) Global.project.getProcess().getResults().getResult(1).getMainDelivery();
        Objectives_jTextArea.setText(processObjective.toMyString());
    }
    else if (Global.project.getProcess().getResults().getResult(1).getSupplementDeliveries()!=null &&
            Global.project.getProcess().getResults().getResult(1).getSupplementDeliveries().getLast()!=null)
    {
       processObjective=(DataMiningObjective) Global.project.getProcess().getResults().getResult(1).getSupplementDeliveries().getLast();
        Objectives_jTextArea.setText(processObjective.toMyString());
    }
}

//*****************************************************************************
       if (    Global.project.getProcess()!=null &&
                Global.project.getProcess().getResults()!=null &&
                Global.project.getProcess().getResults().getResult(4)!=null)
            {
          if (Global.project.getProcess().getResults().getResult(4).getMainDelivery()!=null)
                this.techniqueSelection= (ModelingTechniqueSelection) Global.project.getProcess().getResults().getResult(4).getMainDelivery();
          else  if (Global.project.getProcess().getResults().getResult(4).getSupplementDeliveries()!=null
                 && Global.project.getProcess().getResults().getResult(4).getSupplementDeliveries().getFirst()!=null)
                this.techniqueSelection= (ModelingTechniqueSelection) Global.project.getProcess().getResults().getResult(4).getSupplementDeliveries().getFirst();
            }
        //else
            //System.out.print("No Selected Techniaue found ");

//*****************************************************************************
 if (  Global.project.getProcess()!=null &&
       Global.project.getProcess().getResults()!=null &&
       Global.project.getProcess().getResults().getResult(6)!=null)
{
    if (Global.project.getProcess().getResults().getResult(6).getMainDelivery()!=null)
          this.model=(Model) Global.project.getProcess().getResults().getResult(6).getMainDelivery();
    else  if (Global.project.getProcess().getResults().getResult(6).getSupplementDeliveries()!=null
          && Global.project.getProcess().getResults().getResult(6).getSupplementDeliveries().getFirst()!=null)
          this.model=(Model) Global.project.getProcess().getResults().getResult(6).getSupplementDeliveries().getFirst();
}
//else
//System.out.print("No Objective was Found.. ");

//*****************************************************************************
if (Global.project.getProcess()!=null &&
    Global.project.getProcess().getResults()!=null &&
    Global.project.getProcess().getResults().getResult(7)!=null)
       {
          if (Global.project.getProcess().getResults().getResult(7).getMainDelivery()!=null)
                this.modelEvaluation= (ModelEvaluation) Global.project.getProcess().getResults().getResult(7).getMainDelivery();
          else  if (Global.project.getProcess().getResults().getResult(7).getSupplementDeliveries()!=null
                 && Global.project.getProcess().getResults().getResult(7).getSupplementDeliveries().getFirst()!=null)
                this.modelEvaluation= (ModelEvaluation) Global.project.getProcess().getResults().getResult(7).getSupplementDeliveries().getFirst();
            }
        //else
            //System.out.print("No Selected Model Evaluation found ");

 //*****************************************************************************
       if (    Global.project.getProcess()!=null &&
                Global.project.getProcess().getResults()!=null &&
                Global.project.getProcess().getResults().getResult(8)!=null)
            {
          if (Global.project.getProcess().getResults().getResult(8).getMainDelivery()!=null)
                this.presentation= (PresentedKnowledge) Global.project.getProcess().getResults().getResult(8).getMainDelivery();
          else  if (Global.project.getProcess().getResults().getResult(8).getSupplementDeliveries()!=null
                 && Global.project.getProcess().getResults().getResult(8).getSupplementDeliveries().getFirst()!=null)
                this.presentation= (PresentedKnowledge) Global.project.getProcess().getResults().getResult(8).getSupplementDeliveries().getFirst();
            }
        //else
            //System.out.print("No Selected Presentation found ");

if (
    Global.project.getProcess() != null &&
    Global.project.getProcess().getResults()!=null &&
    Global.project.getProcess().getResults().getResult(9)!=null&&
    Global.project.getProcess().getResults().getResult(9).getMainDelivery()!=null)
    this.knowledgeEvaluation=  (KnowledgeEvaluation) Global.project.getProcess().getResults().getResult(9).getMainDelivery();
else if (Global.project.getProcess() != null &&
         Global.project.getProcess().getResults()!=null &&
         Global.project.getProcess().getResults().getResult(9)!=null&&
         Global.project.getProcess().getResults().getResult(9).getSupplementDeliveries() != null &&
         Global.project.getProcess().getResults().getResult(9).getSupplementDeliveries().getFirst()!=null)

         this.knowledgeEvaluation=  (KnowledgeEvaluation) Global.project.getProcess().
                                                         getResults().getResult(9).
                                                         getSupplementDeliveries().getFirst();
else
{
     if (Global.currentPhase.getNumber()!=9)
     {
         JOptionPane.showMessageDialog(null, "No Delivery is available Yet");
         this.dispose();
     }
     else
         this.knowledgeEvaluation=new KnowledgeEvaluation();

}
 //*****************************************************************************


 this.refresh_knowledgeEvaluation_details();
 this.populate_knowledgeEvaluation();
}


 //RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR
 //                         Refresh Plan Details
 //RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR

 private void refresh_knowledgeEvaluation_details()
 {
this.KnowledgeEvaluation_Resources_jList.setModel(this.getProjectResourcesModel());
this.KnowledgeEvaluation_Used_Resources_jList.setModel(this.getKnowledgeEvaluationUsedResourcesModel());
this.KnowledgeEvaluation_Sources_jList.setModel(this.getSourcesModel());
this.KnowledgeEvaluation_Used_Sources_jList.setModel(this.getKnowledgeEvaluationUsedSourcesModel());
//
this.Model_Selected_MeasuredOutcomes_jList.setModel(this.getModelPerformanceOutcomes());
this.Model_Used_Resources_jList.setModel(this.getModelUsedResourcesModel());
this.Model_Selected_Standards_jList.setModel(this.getModelSelectedStandardsModel());
//
this.Procedures_jList.setModel(this.getEvaluationProcedures());
//
this.Expected_MeasurmentOutcomes_jList.setModel(this.getExpectedOutcomes());
this.Expected_Resources_jList.setModel(this.getExpectedResourcesModel());
//
this.Selected_ExpectedMeasurmentOutcomes_jList.setModel(this.getSelectedExpectedOutcomes());
 this.populateForm();
 }


//DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
//****************************************************************************
//                           Delete Solution Evidence
//DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
//****************************************************************************
 private void delete_knowledgeEvaluation_Evidence()
   {
    if (this.knowledgeEvaluation!=null &&this.knowledgeEvaluation.getEvidences()!=null
            && this.knowledgeEvaluation.getEvidences().getSourcesList().size()>0)
  {
        int index= this.knowledgeEvaluation.getEvidences().getSourcesList().indexOf(this.source);
        if (this.knowledgeEvaluation.getEvidences().delete(this.source)==0);
        {
            if (this.knowledgeEvaluation.getEvidences().getSourcesList().size()>0)
            {
                if (index==0)
                    this.source = (Source) this.knowledgeEvaluation.getEvidences().getSourcesList().get(index);
                else if (index>0)
                     this.source = (Source) this.knowledgeEvaluation.getEvidences().getSourcesList().get(index-1);
            }
        }
 }
}

//DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
//****************************************************************************
//                              Delete Plan
//DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
//****************************************************************************
private void delete_evaluation()
{
 if (Global.currentPhase != null && Global.currentPhase.getResult()!=null &&
     Global.currentPhase.getResult().getMainDelivery()!=null &&
    this.modelEvaluation==Global.currentPhase.getResult().getMainDelivery() )
    Global.currentPhase.getResult().setMainDelivery(null);
 else
 if (Global.currentPhase != null &&
        Global.currentPhase.getResult()!=null&&
        Global.currentPhase.getResult().getSupplementDeliveries()!=null  &&
        Global.currentPhase.getResult().getSupplementDeliveries().getDeliveriesList().size()>0)
    if (this.modelEvaluation!=null)
    {
      int index= Global.currentPhase.getResult().getSupplementDeliveries().getDeliveriesList().indexOf(this.modelEvaluation);
          if (Global.currentPhase.getResult().getSupplementDeliveries().delete(this.modelEvaluation)>-1);
        {
            if (Global.currentPhase.getResult().getSupplementDeliveries().getDeliveriesList().size()>0)
            {
                if (index==0 && Global.currentPhase.getResult().getSupplementDeliveries().getDelivery(index)!=null)
                    this.modelEvaluation = (ModelEvaluation) Global.currentPhase.getResult().getSupplementDeliveries().getDelivery(index);
                else if(index>0)
                    this.modelEvaluation = (ModelEvaluation) Global.currentPhase.getResult().getSupplementDeliveries().getDelivery(index-1);
                //this.refresh_plan_details();
                this.refresh_knowledgeEvaluation_details();
                this.populate_knowledgeEvaluation();
            }
            else
                this.clear_knowledgeEvaluation();
        }
     Global.currentPhase.save();
 }
 }



//CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
//****************************************************************************
//                     Clear Resource Plan & Resource
//****************************************************************************
 //CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

 private void clear_knowledgeEvaluation()
{
this.knowledgeEvaluation=null;
clear_knowledgeEvaluation_details();
clear_KnowledgeEvaluationForm();
 }

 private void clear_knowledgeEvaluation_details()
{
     this.resource=null;
     this.source=null;

this.refresh_knowledgeEvaluation_details();

}
 private void clear_KnowledgeEvaluationForm()
 {
this.KnowledgeConsistentWithBiology_jCheckBox.setSelected(false);
this.KnowledgeConsistentWithLiterature_jCheckBox.setSelected(false);
this.KnowledgesConsistentWithDomainExpertBackground_jCheckBox.setSelected(false);
this.KnowledgesFulfilledProcessObjectives_jCheckBox.setSelected(false);
this.KnowledgeFulfilledStudyAims_jCheckBox.setSelected(false);
this.Knowledge_PropogatedQuestion_jTextPane.setText("") ;
this.Knowledge_PropogatedHypothesis_jTextPane.setText("") ;
this.Knowledge_Recommendations_jTextPane.setText("") ;
    this.populateForm();
 }

//FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
//****************************************************************************
//                            First & Last Plan
//****************************************************************************
//FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF

private void first_knowledgEvaluation()
{
if (Global.currentPhase.getResult()!=null &&
         Global.currentPhase.getResult().getSupplementDeliveries()!=null)
    {
        this.save_knowledgeEvaluation();
        this.knowledgeEvaluation= (KnowledgeEvaluation) Global.currentPhase.getResult().getSupplementDeliveries().getFirst();
        this.clear_knowledgeEvaluation_details();
        this.refresh_knowledgeEvaluation_details();
        //
        this.populate_knowledgeEvaluation();
  }
 }

 //****************************************************************************
private void last_knowledgEvaluation()
{
if (Global.currentPhase.getResult()!=null &&
         Global.currentPhase.getResult().getSupplementDeliveries()!=null)
    {
        this.save_knowledgeEvaluation();
        this.knowledgeEvaluation= (KnowledgeEvaluation) Global.currentPhase.getResult().getSupplementDeliveries().getLast();
        this.clear_knowledgeEvaluation_details();
        this.refresh_knowledgeEvaluation_details();
        //
        this.populate_knowledgeEvaluation();
  }    
 }


//NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
//****************************************************************************
//                                Next Plan
//****************************************************************************
//NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
 private void next_knowledgEvaluation()
    {
      
            if (this.knowledgeEvaluation!=null)
            {
            if (Global.currentPhase.getResult()!=null &&
                Global.currentPhase.getResult().getSupplementDeliveries()!=null &&
                Global.currentPhase.getResult().getSupplementDeliveries().getNext(knowledgeEvaluation)!=null
                )
                {
                    this.save_knowledgeEvaluation();
                    this.knowledgeEvaluation=(KnowledgeEvaluation) Global.currentPhase.getResult().getSupplementDeliveries().getNext(this.knowledgeEvaluation);
                    this.clear_knowledgeEvaluation_details();
                    this.refresh_knowledgeEvaluation_details();
                    //
                    this.populate_knowledgeEvaluation();
                }
            }      
        //else
            //System.out.print("No Phase Performing is found ");
    }

//PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
//****************************************************************************
//                     Previous Plan& Resource
//****************************************************************************
//PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
  private void previous_knowledgEvaluation()
    {

            if (this.knowledgeEvaluation!=null)
            {
            if (Global.currentPhase.getResult()!=null &&
                Global.currentPhase.getResult().getSupplementDeliveries()!=null &&
                Global.currentPhase.getResult().getSupplementDeliveries().getPrevious(knowledgeEvaluation)!=null
                )
                {
                    this.save_knowledgeEvaluation();
                    this.knowledgeEvaluation=(KnowledgeEvaluation) Global.currentPhase.getResult().getSupplementDeliveries().getPrevious(this.knowledgeEvaluation);
                    this.clear_knowledgeEvaluation_details();
                    this.refresh_knowledgeEvaluation_details();
                    //
                    this.populate_knowledgeEvaluation();
                }
            }
        //else
            //System.out.print("No Phase Performing is found ");
    }

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    if (Global.project == null) 
                        Global.project = new Project();

                    if (Global.project.getProcess() == null) 
                        Global.project.setProcess(new Process());
                     
                    Global.project.getProcess().setVersion(1);
/*
                    if (Global.currentPhase==null)
                            Global.currentPhase=new Phase("ObjectivesDefinition");
                    */
                    new KnowledgeEvaluationForm().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(KnowledgeEvaluationForm.class.getName()).log(Level.SEVERE, null, ex);
                } catch (Exception ex) {
                    Logger.getLogger(KnowledgeEvaluationForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }


//CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
//****************************************************************************
//                     Clear Source Prerequisite & Source
//****************************************************************************

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Add_jButton1;
    private javax.swing.JTextField Algorithm_jTextPane;
    private javax.swing.JComboBox Approaches_jComboBox;
    private javax.swing.JButton Browse_jButton;
    private javax.swing.JTextPane ConfusionMatrixResult_jTextPane;
    private javax.swing.JTextField ConsumedTimeDuration_jTextField;
    private javax.swing.JLabel ConsumedTime_jLabel1;
    private javax.swing.JDesktopPane Control_jDesktopPane;
    private javax.swing.JButton Delete_jButton;
    private javax.swing.JList Expected_MeasurmentOutcomes_jList;
    private javax.swing.JList Expected_Resources_jList;
    private javax.swing.JCheckBox FinalSelection_jCheckBox;
    private javax.swing.JComboBox Goals_jComboBox;
    private javax.swing.JDesktopPane Justification_Source_jDesktopPane1;
    private javax.swing.JDesktopPane Justification_Sources_Control_jDesktopPane;
    private javax.swing.JCheckBox KnowledgeConsistentWithBiology_jCheckBox;
    private javax.swing.JCheckBox KnowledgeConsistentWithLiterature_jCheckBox;
    private javax.swing.JButton KnowledgeEvaluation_Edit_jButton;
    private javax.swing.JList KnowledgeEvaluation_Resources_jList;
    private javax.swing.JButton KnowledgeEvaluation_Select_jButton1;
    private javax.swing.JButton KnowledgeEvaluation_Sources_Edit_jButton;
    private javax.swing.JButton KnowledgeEvaluation_Sources_Select_jButton;
    private javax.swing.JButton KnowledgeEvaluation_Sources_UnSelect_jButton;
    private javax.swing.JList KnowledgeEvaluation_Sources_jList;
    private javax.swing.JButton KnowledgeEvaluation_UnSelect_jButton1;
    private javax.swing.JList KnowledgeEvaluation_Used_Resources_jList;
    private javax.swing.JList KnowledgeEvaluation_Used_Sources_jList;
    private javax.swing.JCheckBox KnowledgeFulfilledStudyAims_jCheckBox;
    private javax.swing.JTextPane Knowledge_PropogatedHypothesis_jTextPane;
    private javax.swing.JTextPane Knowledge_PropogatedQuestion_jTextPane;
    private javax.swing.JTextPane Knowledge_Recommendations_jTextPane;
    private javax.swing.JCheckBox KnowledgesConsistentWithDomainExpertBackground_jCheckBox;
    private javax.swing.JCheckBox KnowledgesFulfilledProcessObjectives_jCheckBox;
    private javax.swing.JComboBox Method_jComboBox;
    private javax.swing.JTextField ModelEvaluation_URL_jTextField;
    private javax.swing.JCheckBox ModelOverFit_jCheckBox;
    private javax.swing.JCheckBox ModelPerformanceAcceptable_jCheckBox;
    private javax.swing.JTextPane ModelPerformanceComment_jTextPane;
    private javax.swing.JLabel ModelPerformance_jLabel;
    private javax.swing.JCheckBox ModelUnderFit_jCheckBox;
    private javax.swing.JList Model_Selected_MeasuredOutcomes_jList;
    private javax.swing.JList Model_Selected_Standards_jList;
    private javax.swing.JTextField Model_URL_jTextField;
    private javax.swing.JList Model_Used_Resources_jList;
    private javax.swing.JButton New_jButton1;
    private javax.swing.JDesktopPane New_jDesktopPane;
    private javax.swing.JButton Next_jButton1;
    private javax.swing.JTextArea Objectives_jTextArea;
    private javax.swing.JPanel Performed_Plan_jPanel;
    private javax.swing.JTabbedPane Performing_Details_TabbedPane;
    private javax.swing.JDesktopPane Performing_Details_jDesktopPane_jDesktopPane;
    private javax.swing.JLayeredPane Performing_jLayeredPane;
    private javax.swing.JLabel Planning_CustomisedPlanItem_jLabel;
    private javax.swing.JDesktopPane Planning_CustomisedPlan_jDesktopPane;
    private javax.swing.JDesktopPane Planning_Objectives_Control_jDesktopPane1;
    private javax.swing.JLabel Planning_Planner_Name_jLabel12;
    private javax.swing.JLabel Planning_Planner_Name_jLabel13;
    private javax.swing.JLabel Planning_Planner_Name_jLabel14;
    private javax.swing.JLabel Planning_Planner_Role_jLabel1;
    private javax.swing.JDesktopPane Planning_Planner_jDesktopPane1;
    private javax.swing.JDesktopPane Planning_Resource_jDesktopPane;
    private javax.swing.JLabel Prerequisite_Source_ExternalSource_URL_jLabel4;
    private javax.swing.JTextPane Presentation_Description_jTextPane;
    private javax.swing.JButton Presentation_Open_jButton;
    private javax.swing.JTextField Presentation_URL_jTextField;
    private javax.swing.JButton Previous_jButton1;
    private javax.swing.JList Procedures_jList;
    private javax.swing.JButton Refresh_jButton;
    private javax.swing.JTextPane ResultSummary_jTextPane;
    private javax.swing.JButton Save_jButton;
    private javax.swing.JList Selected_ExpectedMeasurmentOutcomes_jList;
    private javax.swing.JCheckBox Supervised_jCheckBox;
    private javax.swing.JComboBox Tasks_jComboBox;
    private javax.swing.JComboBox Technique_jComboBox;
    private javax.swing.JDesktopPane Technique_jDesktopPane;
    private javax.swing.JTextPane Technique_jTextPane;
    private javax.swing.JLabel URL_jLabel;
    private javax.swing.JButton ViewModelEvaluation_jButton;
    private javax.swing.JLabel algorithm_jLabel;
    private javax.swing.JLabel goal_jLabel;
    private javax.swing.JButton jButton1;
    private javax.swing.JDesktopPane jDesktopPane45;
    private javax.swing.JDesktopPane jDesktopPane46;
    private javax.swing.JDesktopPane jDesktopPane47;
    private javax.swing.JDesktopPane jDesktopPane50;
    private javax.swing.JDesktopPane jDesktopPane51;
    private javax.swing.JDesktopPane jDesktopPane52;
    private javax.swing.JDesktopPane jDesktopPane53;
    private javax.swing.JDesktopPane jDesktopPane54;
    private javax.swing.JDesktopPane jDesktopPane8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane15;
    private javax.swing.JScrollPane jScrollPane16;
    private javax.swing.JScrollPane jScrollPane17;
    private javax.swing.JScrollPane jScrollPane18;
    private javax.swing.JScrollPane jScrollPane19;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane20;
    private javax.swing.JScrollPane jScrollPane21;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane69;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane70;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JLabel task_jLabel;
    // End of variables declaration//GEN-END:variables


//PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
//****************************************************************************
//                             Populate
//****************************************************************************
//PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP

private void populateForm()
{
            this.repaint();
            this.pack();
 }



//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
//                       Get Project Resources Model
//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
public  DefaultComboBoxModel getModelSelectedStandardsModel()
{
  DefaultComboBoxModel dcm=null;
  ArrayList<Standard> selectedStandardsList=new ArrayList<Standard>();
  String[] sourcesArrayNames = null;
  if (this.model!=null && this.model.getStandards()!=null)
  {
      if (this.model.getStandards().getStandardsList().size()>0)
      {
        selectedStandardsList=this.model.getStandards().getStandardsList();
        int size=selectedStandardsList.size();
        sourcesArrayNames = new String[size];
        int i=0;
        for (Object o:selectedStandardsList)
            {
             String result="";
              Standard thisStandard=(Standard) o;
              result=thisStandard.toString();
              sourcesArrayNames[i]=result;
              i=i+1;
             }
        dcm=new DefaultComboBoxModel(sourcesArrayNames);
        return dcm;
        }
     else
      {
        String names[] ={"<No source selected yet>"};
        dcm=new DefaultComboBoxModel(names);
        return dcm;
      }
  }
 else
    {
    String names[] ={"<No source selected yet>"};
    dcm=new DefaultComboBoxModel(names);
     return dcm;
    }
 }



//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
//                       Get Project Remeasures Model
//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
public  DefaultComboBoxModel getModelPerformanceOutcomes()
{

 //private MeasurmentOutcome expectedOutcome =null;
  DefaultComboBoxModel dcm=null;
  ArrayList<MeasurmentOutcome> expectedOutcomesList=new ArrayList<MeasurmentOutcome>();
  String[] expectedOutcomesArrayNames = null;
  if (this.model!=null &&
//          this.model.getSuccessCriteria()!=null &&
      this.model.getPerformance()!=null)
  {
      if ( this.model.getPerformance().getOutcomesList().size()>0)
      {
        expectedOutcomesList=this.model.getPerformance().getOutcomesList();
        int size=expectedOutcomesList.size();
        expectedOutcomesArrayNames = new String[size];
        int i=0;
        for (Object o:expectedOutcomesList)
            {
            String result="";
            MeasurmentOutcome  measurmentOutcome=(MeasurmentOutcome) o;

                  result=measurmentOutcome.toString();

              expectedOutcomesArrayNames[i]=result;
              i=i+1;
              //--------------------------------------------------------------
             }
        dcm=new DefaultComboBoxModel(expectedOutcomesArrayNames);
        return dcm;
        }
     else
      {
        String names[] ={"<No expected outcome selected yet>"};
        dcm=new DefaultComboBoxModel(names);
        return dcm;
      }
  }
 else
    {
    String names[] ={"<No expected outcome selected yet>"};
    dcm=new DefaultComboBoxModel(names);
     return dcm;
    }
 }

//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
//                       Get Planned Resources Model
//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
public  DefaultComboBoxModel getModelUsedResourcesModel()
{
  DefaultComboBoxModel dcm=null;
  ArrayList<Resource> resourcesList=new ArrayList<Resource>();
  String[] resourcesArrayNames = null;

 if (this.model!=null &&
//     this.model.getFeasibility()!=null &&
     this.model.getRequirements()!=null)

  {
      if (this.model.getRequirements().getResourcesList().size()>0)
      {
        resourcesList=this.model.getRequirements().getResourcesList();
        int size=resourcesList.size();
        resourcesArrayNames = new String[size];
        int i=0;
        for (Object o:resourcesList)
            {
              Resource thisResource=(Resource) o;
              String result="";
              if (thisResource.getResourceType()!=null)
                  result=thisResource.getResourceType().toString()+"  ";
              if (thisResource.getDescription()!=null)
                   result=result+ thisResource.getDescription();
              resourcesArrayNames[i]=result;
              i=i+1;
             }
        dcm=new DefaultComboBoxModel(resourcesArrayNames);
        return dcm;
        }
     else
      {
        String names[] ={"<No selected resource yet>"};
        dcm=new DefaultComboBoxModel(names);
        return dcm;
      }
  }
 else
    {
    String names[] ={"<No selected resource yet>"};
    dcm=new DefaultComboBoxModel(names);
     return dcm;
    }
 }


//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
//                       Get Planned Resources Model
//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
public  DefaultComboBoxModel getKnowledgeEvaluationUsedResourcesModel()
{
  DefaultComboBoxModel dcm=null;
  ArrayList<Resource> resourcesList=new ArrayList<Resource>();
  String[] resourcesArrayNames = null;

 if (this.knowledgeEvaluation!=null &&
//     this.model.getFeasibility()!=null &&
     this.knowledgeEvaluation.getResources()!=null)

  {
      if (this.knowledgeEvaluation.getResources().getResourcesList().size()>0)
      {
        resourcesList=this.knowledgeEvaluation.getResources().getResourcesList();
        int size=resourcesList.size();
        resourcesArrayNames = new String[size];
        int i=0;
        for (Object o:resourcesList)
            {
              Resource thisResource=(Resource) o;
              String result="";
              if (thisResource.getResourceType()!=null)
                  result=thisResource.getResourceType().toString()+"  ";
              if (thisResource.getDescription()!=null)
                   result=result+ thisResource.getDescription();
              resourcesArrayNames[i]=result;
              i=i+1;
             }
        dcm=new DefaultComboBoxModel(resourcesArrayNames);
        return dcm;
        }
     else
      {
        String names[] ={"<No selected resource yet>"};
        dcm=new DefaultComboBoxModel(names);
        return dcm;
      }
  }
 else
    {
    String names[] ={"<No selected resource yet>"};
    dcm=new DefaultComboBoxModel(names);
     return dcm;
    }
 }


//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
//                       Get Project Resources Model
//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
public  DefaultComboBoxModel getProjectResourcesModel()
{
  DefaultComboBoxModel dcm=null;
  ArrayList<Resource> resourcesList=new ArrayList<Resource>();
  String[] resourcesArrayNames = null;
  if (Global.project!=null
          && Global.project.getSupplements()!=null
          && Global.project.getSupplements().getManagement()!=null )
  {
      if (  Global.project.getSupplements().getManagement().getResources()!=null
              && Global.project.getSupplements().getManagement().getResources().getResourcesList().size()>0)
      {
        resourcesList=Global.project.getSupplements().getManagement().getResources().getResourcesList();
        int size=resourcesList.size();
        resourcesArrayNames = new String[size];
        int i=0;
        for (Object o:resourcesList)
            {
              Resource thisResource=(Resource) o;
              String result="";
              if (thisResource.getResourceType()!=null)
                  result=thisResource.getResourceType().toString()+"  ";
              if (thisResource.getDescription()!=null)
                   result=result+ thisResource.getDescription();
              resourcesArrayNames[i]=result;
              i=i+1;
             }
        dcm=new DefaultComboBoxModel(resourcesArrayNames);
        return dcm;
        }
     else
      {
        String names[] ={"<No resource available yet>"};
        dcm=new DefaultComboBoxModel(names);
        return dcm;
      }
  }
 else
    {
    String names[] ={"<No resource available yet>"};
    dcm=new DefaultComboBoxModel(names);
     return dcm;
    }
 }



//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
//                       Get Project Remeasures Model
//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
public  DefaultComboBoxModel getExpectedOutcomes()
{

 //private MeasurmentOutcome expectedOutcome =null;
  DefaultComboBoxModel dcm=null;
  ArrayList<MeasurmentOutcome> expectedOutcomesList=new ArrayList<MeasurmentOutcome>();
  String[] expectedOutcomesArrayNames = null;
  if (this.techniqueSelection!=null &&this.techniqueSelection.getSuccessCriteria()!=null &&
      this.techniqueSelection.getSuccessCriteria().getExpectedOutcomes()!=null)
  {
      if ( this.techniqueSelection.getSuccessCriteria().getExpectedOutcomes().getOutcomesList().size()>0)
      {
        expectedOutcomesList=this.techniqueSelection.getSuccessCriteria().getExpectedOutcomes().getOutcomesList();
        int size=expectedOutcomesList.size();
        expectedOutcomesArrayNames = new String[size];
        int i=0;
        for (Object o:expectedOutcomesList)
            {
            String result="";
            MeasurmentOutcome  measurmentOutcome=(MeasurmentOutcome) o;

                  result=measurmentOutcome.toString();

              expectedOutcomesArrayNames[i]=result;
              i=i+1;
              //--------------------------------------------------------------
             }
        dcm=new DefaultComboBoxModel(expectedOutcomesArrayNames);
        return dcm;
        }
     else
      {
        String names[] ={"<No expected outcome selected yet>"};
        dcm=new DefaultComboBoxModel(names);
        return dcm;
      }
  }
 else
    {
    String names[] ={"<No expected outcome selected yet>"};
    dcm=new DefaultComboBoxModel(names);
     return dcm;
    }
 }




//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
//                       Get Planned Resources Model
//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
public  DefaultComboBoxModel getExpectedResourcesModel()
{
  DefaultComboBoxModel dcm=null;
  ArrayList<Resource> resourcesList=new ArrayList<Resource>();
  String[] resourcesArrayNames = null;

 if (this.techniqueSelection!=null &&
     this.techniqueSelection.getFeasibility()!=null &&
     this.techniqueSelection.getFeasibility().getRequiredResources()!=null)

  {
      if (this.techniqueSelection.getFeasibility().getRequiredResources().getResourcesList().size()>0)
      {
        resourcesList=this.techniqueSelection.getFeasibility().getRequiredResources().getResourcesList();
        int size=resourcesList.size();
        resourcesArrayNames = new String[size];
        int i=0;
        for (Object o:resourcesList)
            {
              Resource thisResource=(Resource) o;
              String result="";
              if (thisResource.getResourceType()!=null)
                  result=thisResource.getResourceType().toString()+"  ";
              if (thisResource.getDescription()!=null)
                   result=result+ thisResource.getDescription();
              resourcesArrayNames[i]=result;
              i=i+1;
             }
        dcm=new DefaultComboBoxModel(resourcesArrayNames);
        return dcm;
        }
     else
      {
        String names[] ={"<No selected resource yet>"};
        dcm=new DefaultComboBoxModel(names);
        return dcm;
      }
  }
 else
    {
    String names[] ={"<No selected resource yet>"};
    dcm=new DefaultComboBoxModel(names);
     return dcm;
    }
 }

  //COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
//                       Get Project Remeasures Model
//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
public  DefaultComboBoxModel getEvaluationProcedures()
{
  DefaultComboBoxModel dcm=null;
  ArrayList<Procedure> proceduresList=new ArrayList<Procedure>();
  String[] procedureArrayNames = null;
  if (this.modelEvaluation!=null &&this.modelEvaluation.getValidationTest()!=null)
  {
      if ( this.modelEvaluation.getValidationTest().getProceduresList().size()>0)
      {
        proceduresList=this.modelEvaluation.getValidationTest().getProceduresList();
        int size=proceduresList.size();
        procedureArrayNames = new String[size];
        int i=0;
        for (Object o:proceduresList)
            {
            String result="";
            Procedure  thisProcedure=(Procedure) o;
            result=thisProcedure.toString();
              procedureArrayNames[i]=result;
              i=i+1;
              //--------------------------------------------------------------
             }
        dcm=new DefaultComboBoxModel(procedureArrayNames);
        return dcm;
        }
     else
      {
        String names[] ={"<No expected outcome selected yet>"};
        dcm=new DefaultComboBoxModel(names);
        return dcm;
      }
  }
 else
    {
    String names[] ={"<No expected outcome selected yet>"};
    dcm=new DefaultComboBoxModel(names);
     return dcm;
    }
 }

//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
//                       Get Planned Resources Model
//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
public  DefaultComboBoxModel getEvaluationProcedureResourcesModel()
{
  DefaultComboBoxModel dcm=null;
  ArrayList<Resource> resourcesList=new ArrayList<Resource>();
  String[] resourcesArrayNames = null;

 if (this.procedure!=null &&
     this.procedure.getResources()!=null )

  {
      if (this.procedure.getResources().getResourcesList().size()>0)
      {
        resourcesList=this.procedure.getResources().getResourcesList();
        int size=resourcesList.size();
        resourcesArrayNames = new String[size];
        int i=0;
        for (Object o:resourcesList)
            {
              Resource thisResource=(Resource) o;
              String result="";
              if (thisResource.getResourceType()!=null)
                  result=thisResource.getResourceType().toString()+"  ";
              if (thisResource.getDescription()!=null)
                   result=result+ thisResource.getDescription();
              resourcesArrayNames[i]=result;
              i=i+1;
             }
        dcm=new DefaultComboBoxModel(resourcesArrayNames);
        return dcm;
        }
     else
      {
        String names[] ={"<No selected resource yet>"};
        dcm=new DefaultComboBoxModel(names);
        return dcm;
      }
  }
 else
    {
    String names[] ={"<No selected resource yet>"};
    dcm=new DefaultComboBoxModel(names);
     return dcm;
    }
 }

//NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
//****************************************************************************
//                                Next Plan
//****************************************************************************
//NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
 private void next_presentation()
    {
if (Global.project.getProcess()!=null &&
    Global.project.getProcess().getResults()!=null &&
    Global.project.getProcess().getResults().getResult(8)!=null &&
    this.presentation!=null)
{
if (Global.project.getProcess().getResults().getResult(8).getSupplementDeliveries()!=null
     && Global.project.getProcess().getResults().getResult(8).getSupplementDeliveries().getNext(presentation)!=null)
{
     this.clear_presentation();
     this.presentation= (PresentedKnowledge) Global.project.getProcess().getResults().getResult(8).getSupplementDeliveries().getNext(presentation);
     this.populate_knowledgePresentation();
}
}
//else
//System.out.print("No Selected Presentation found ");

}

//PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
//****************************************************************************
//                     Previous Plan& Resource
//****************************************************************************
//PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
 private void previous_presentation()
{
if (Global.project.getProcess()!=null &&
    Global.project.getProcess().getResults()!=null &&
    Global.project.getProcess().getResults().getResult(8)!=null &&
    this.presentation!=null)
{
if (Global.project.getProcess().getResults().getResult(8).getSupplementDeliveries()!=null
     && Global.project.getProcess().getResults().getResult(8).getSupplementDeliveries().getPrevious(presentation)!=null)
{
     this.clear_presentation();
     this.presentation= (PresentedKnowledge) Global.project.getProcess().getResults().getResult(8).getSupplementDeliveries().getPrevious(presentation);
     this.populate_knowledgePresentation();
}
}
//else
//System.out.print("No Selected Presentation found ");
}
private void populate_knowledgePresentation()
    {

         if ( this.presentation !=null && this.presentation.getPresentationMethod()!=null)
           this.Method_jComboBox.setSelectedIndex(this.presentation.getPresentationMethod().ordinal()+1);
         else
           this.Method_jComboBox.setSelectedIndex(0);

         if ( this.presentation !=null && this.presentation.getVisualisationTechnique()!=null)
           this.Technique_jComboBox.setSelectedIndex(this.presentation.getVisualisationTechnique().ordinal()+1);
         else
             this.Method_jComboBox.setSelectedIndex(0);

       if ( this.presentation !=null && this.presentation.getURL()!=null)
            this.Presentation_URL_jTextField.setText(this.presentation.getURL().toString());
       else
            this.Presentation_URL_jTextField.setText("");

        if ( this.presentation !=null && this.presentation.getDescription()!=null)
            this.Presentation_Description_jTextPane.setText(this.presentation.getDescription().toString());
         else
             Presentation_Description_jTextPane.setText("");

        if (this.presentation!=null)
             this.FinalSelection_jCheckBox.setSelected(this.presentation.isFinalSelection());

}

private void clear_presentation()
    {
      this.Method_jComboBox.setSelectedIndex(0);
      this.Method_jComboBox.setSelectedIndex(0);
      this.Presentation_URL_jTextField.setText("");
      this.Presentation_Description_jTextPane.setText("");
      this.FinalSelection_jCheckBox.setSelected(this.presentation.isFinalSelection());
}


//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
//                       Get Project Resources Model
//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
public  DefaultComboBoxModel getSourcesModel()
{
  DefaultComboBoxModel dcm=null;
  ArrayList<Source> sourcesList=new ArrayList<Source>();
  String[] sourcesArrayNames = null;
  if (Global.project!=null && Global.project.getSources()!=null)
  {
      if ( Global.project.getSources().getSourcesList().size()>0)
      {
        sourcesList=Global.project.getSources().getSourcesList();
        int size=sourcesList.size();
        sourcesArrayNames = new String[size];
        int i=0;
        for (Object o:sourcesList)
            {
            String result="";
             if (o.getClass().getSimpleName().equals("InternalSource"))
              {
                  InternalSource thisSource=(InternalSource) o;
                  result=thisSource.toString();
              }
              else if (o.getClass().getSimpleName().equals("ExternalSource"))
              {
                  ExternalSource thisSource=(ExternalSource) o;
                  result=thisSource.toString();
              }
              else if (o.getClass().getSimpleName().equals("HumanSource"))
              {
                  HumanSource thisSource=(HumanSource) o;
                  result=thisSource.toString();
              }
              sourcesArrayNames[i]=result;
              i=i+1;
              //--------------------------------------------------------------
             }
        dcm=new DefaultComboBoxModel(sourcesArrayNames);
        return dcm;
        }
     else
      {
        String names[] ={"<No sources available yet>"};
        dcm=new DefaultComboBoxModel(names);
        return dcm;
      }
  }
 else
    {
    String names[] ={"<No sources available yet>"};
    dcm=new DefaultComboBoxModel(names);
     return dcm;
    }
 }

//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
//                       Get Project Resources Model
//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
public  DefaultComboBoxModel getKnowledgeEvaluationUsedSourcesModel()
{
  DefaultComboBoxModel dcm=null;
  ArrayList<Source> selectedSourcesList=new ArrayList<Source>();
  String[] sourcesArrayNames = null;
  if (this.knowledgeEvaluation!=null && this.knowledgeEvaluation.getEvidences()!=null)
  {
      if (this.knowledgeEvaluation.getEvidences().getSourcesList().size()>0)
      {
        selectedSourcesList=this.knowledgeEvaluation.getEvidences().getSourcesList();
        int size=selectedSourcesList.size();
        sourcesArrayNames = new String[size];
        int i=0;
        for (Object o:selectedSourcesList)
            {
              String result="";
             if (o.getClass().getSimpleName().equals("InternalSource"))
              {
                  InternalSource thisSource=(InternalSource) o;
                  result=thisSource.toString();
              }
              else if (o.getClass().getSimpleName().equals("ExternalSource"))
              {
                  ExternalSource thisSource=(ExternalSource) o;
                  result=thisSource.toString();
              }
              else if (o.getClass().getSimpleName().equals("HumanSource"))
              {
                  HumanSource thisSource=(HumanSource) o;
                  result=thisSource.toString();
              }
              sourcesArrayNames[i]=result;
              i=i+1;
             }
        dcm=new DefaultComboBoxModel(sourcesArrayNames);
        return dcm;
        }
     else
      {
        String names[] ={"<No source selected yet>"};
        dcm=new DefaultComboBoxModel(names);
        return dcm;
      }
  }
 else
    {
    String names[] ={"<No source selected yet>"};
    dcm=new DefaultComboBoxModel(names);
     return dcm;
    }
 }

//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
//                       Get Project Remeasures Model
//COMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOCOMPOC
public  DefaultComboBoxModel getSelectedExpectedOutcomes()
{

 //private MeasurmentOutcome expectedOutcome =null;
  DefaultComboBoxModel dcm=null;
  ArrayList<MeasurmentOutcome> expectedOutcomesList=new ArrayList<MeasurmentOutcome>();
  String[] expectedOutcomesArrayNames = null;
  if (this.processObjective!=null &&this.processObjective.getSuccessCriteria()!=null &&
      this.processObjective.getSuccessCriteria().getExpectedOutcomes()!=null)
  {
      if ( this.processObjective.getSuccessCriteria().getExpectedOutcomes().getOutcomesList().size()>0)
      {
        expectedOutcomesList=this.processObjective.getSuccessCriteria().getExpectedOutcomes().getOutcomesList();
        int size=expectedOutcomesList.size();
        expectedOutcomesArrayNames = new String[size];
        int i=0;
        for (Object o:expectedOutcomesList)
            {
            String result="";
            MeasurmentOutcome  measurmentOutcome=(MeasurmentOutcome) o;

                  result=measurmentOutcome.toString();

              expectedOutcomesArrayNames[i]=result;
              i=i+1;
              //--------------------------------------------------------------
             }
        dcm=new DefaultComboBoxModel(expectedOutcomesArrayNames);
        return dcm;
        }
     else
      {
        String names[] ={"<No expected outcome selected yet>"};
        dcm=new DefaultComboBoxModel(names);
        return dcm;
      }
  }
 else
    {
    String names[] ={"<No expected outcome selected yet>"};
    dcm=new DefaultComboBoxModel(names);
     return dcm;
    }
 }


}
